// Trusted Digial Web Project
// Hyperonomy Digital Identity Lab
// Parallelspace Corporation
// (c) Copyright 2021 Parallelspace Corporation. All Rights Reserved

//////////////////////////////////////////////////////////////////////////////
/// TRA Common Types

enum TRATrustLevel
{
	Undefined,	
	UnResolvable,
	Unsigned,
	HashedThumbprint,
	SignedHashSignature,
	Verifiable,
	CorruptSignatures
}

enum TRAEncryptionFlag
{
	NotEncrypted,
	Encrypted
}

enum TRACredentialType
{
	GenericCredential,
	UDIDDocument,
	VerifiableCredential,
	VerifiableCapabilityAuthorization,
	MasterVerifiableCapabilityAuthorization,
	ServerCertificate,
	RevocationCertificate
}

enum TRAServiceType
{
	Unknown,
	ResourceService,
	StorageService,
	KeyManagementService,
	MasterKeyManagementService,
	AuthenticationService,
	VerifiableDataRegistryService,
	// ServiceEndpointRegistryService,
	// RevocationRegistryService,
	// IdentityRegistryService
}

//////////////////////////////////////////////////////////////////////////////

struct TRAKeyValuePair
{
	string key;
	string value;
}

struct TRAClaim
{
	string key;
	optional string value;				    
	optional List<TRAKeyValuePair> attribute;
	optional List<List<TRAKeyValuePair>> attributes;
}

struct TRACredentialCore
{
	string udid;	
	List<string> context;
	List<TRAClaim> claims;
}

struct TRACredentialWrapper
{
	TRACredentialType credtype;	
	TRATrustLevel trustLevel;	
	TRAEncryptionFlag encryptionFlag;
	long version;
	string notaryudid;
}

struct TRACredentialContent
{
	TRACredentialCore core;
	TRACredentialWrapper wrapper;
}

struct TRACredentialEnvelope 
{
	optional string hashedThumbprint64;		// digital hash
	optional string signedHashSignature64;	// digital signature of digital hash
	optional string notaryStamp;			// verifiable data registry key
	optional List<string> comments;
}

///////////////////////////////////////////////////////////////////////////////

cell struct TDWCredential
{	
	TRACredentialContent CredentialContent;
	TRACredentialEnvelope CredentialEnvelope;
	optional string EncryptedCredentialContent;
}