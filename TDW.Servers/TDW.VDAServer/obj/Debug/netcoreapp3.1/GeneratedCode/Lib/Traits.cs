#pragma warning disable 162,168,649,660,661,1522

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Trinity.TSL;
using Trinity.TSL.Lib;
namespace TDW.VDAServer
{
    internal class TypeSystem
    {
        #region TypeID lookup table
        private static Dictionary<Type, uint> TypeIDLookupTable = new Dictionary<Type, uint>()
        {
            
            { typeof(bool), 0 }
            ,
            { typeof(long), 1 }
            ,
            { typeof(string), 2 }
            ,
            { typeof(List<string>), 3 }
            ,
            { typeof(List<TRAClaim>), 4 }
            ,
            { typeof(List<TRAKeyValuePair>), 5 }
            ,
            { typeof(TDWVDAAccountEntryClaims), 6 }
            ,
            { typeof(TDWVDAAccountEntryContent), 7 }
            ,
            { typeof(TDWVDAAccountEntryEnvelope), 8 }
            ,
            { typeof(TDWVDAIdentityRegistryEntryParm), 9 }
            ,
            { typeof(TDWVDAPostInvocationParameters), 10 }
            ,
            { typeof(TDWVDARevocationListEntryParm), 11 }
            ,
            { typeof(TDWVDAServiceEndpointEntryParm), 12 }
            ,
            { typeof(TDWVDASmartContractEntryClaims), 13 }
            ,
            { typeof(TDWVDASmartContractEntryContent), 14 }
            ,
            { typeof(TDWVDASmartContractEntryEnvelope), 15 }
            ,
            { typeof(TRAClaim), 16 }
            ,
            { typeof(TRACredentialContent), 17 }
            ,
            { typeof(TRACredentialEnvelope), 18 }
            ,
            { typeof(TRACredentialEnvelopeSeal), 19 }
            ,
            { typeof(TRACredentialMetadata), 20 }
            ,
            { typeof(TRAKeyValuePair), 21 }
            ,
            { typeof(TRACredentialType), 22 }
            ,
            { typeof(TRAEncryptionFlag), 23 }
            ,
            { typeof(TRAServiceType), 24 }
            ,
            { typeof(TRATrustLevel), 25 }
            ,
            { typeof(List<List<TRAKeyValuePair>>), 27 }
            ,
            { typeof(TDWVDAAccountEntryContent?), 29 }
            ,
            { typeof(TDWVDASmartContractEntryContent?), 30 }
            ,
            { typeof(TRACredentialContent?), 31 }
            ,
        };
        #endregion
        #region CellTypeID lookup table
        private static Dictionary<Type, uint> CellTypeIDLookupTable = new Dictionary<Type, uint>()
        {
            
            { typeof(TRACredentialCell), 0 }
            ,
            { typeof(TDWVDAAccountEntryCell), 1 }
            ,
            { typeof(TDWVDASmartContractEntryCell), 2 }
            
        };
        #endregion
        internal static uint GetTypeID(Type t)
        {
            uint type_id;
            if (!TypeIDLookupTable.TryGetValue(t, out type_id))
                type_id = uint.MaxValue;
            return type_id;
        }
        internal static uint GetCellTypeID(Type t)
        {
            uint type_id;
            if (!CellTypeIDLookupTable.TryGetValue(t, out type_id))
                throw new Exception("Type " + t.ToString() + " is not a cell.");
            return type_id;
        }
    }
    internal enum TypeConversionAction
    {
        TC_NONCONVERTIBLE = 0,
        TC_ASSIGN,
        TC_TOSTRING,
        TC_PARSESTRING,
        TC_TOBOOL,
        TC_CONVERTLIST,
        TC_WRAPINLIST,
        TC_ARRAYTOLIST,
        TC_EXTRACTNULLABLE,
    }
    internal interface ITypeConverter<T>
    {
        
        T ConvertFrom_bool(bool value);
        bool ConvertTo_bool(T value);
        TypeConversionAction GetConversionActionTo_bool();
        IEnumerable<bool> Enumerate_bool(T value);
        
        T ConvertFrom_long(long value);
        long ConvertTo_long(T value);
        TypeConversionAction GetConversionActionTo_long();
        IEnumerable<long> Enumerate_long(T value);
        
        T ConvertFrom_string(string value);
        string ConvertTo_string(T value);
        TypeConversionAction GetConversionActionTo_string();
        IEnumerable<string> Enumerate_string(T value);
        
        T ConvertFrom_List_string(List<string> value);
        List<string> ConvertTo_List_string(T value);
        TypeConversionAction GetConversionActionTo_List_string();
        IEnumerable<List<string>> Enumerate_List_string(T value);
        
        T ConvertFrom_List_TRAClaim(List<TRAClaim> value);
        List<TRAClaim> ConvertTo_List_TRAClaim(T value);
        TypeConversionAction GetConversionActionTo_List_TRAClaim();
        IEnumerable<List<TRAClaim>> Enumerate_List_TRAClaim(T value);
        
        T ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value);
        List<TRAKeyValuePair> ConvertTo_List_TRAKeyValuePair(T value);
        TypeConversionAction GetConversionActionTo_List_TRAKeyValuePair();
        IEnumerable<List<TRAKeyValuePair>> Enumerate_List_TRAKeyValuePair(T value);
        
        T ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value);
        TDWVDAAccountEntryClaims ConvertTo_TDWVDAAccountEntryClaims(T value);
        TypeConversionAction GetConversionActionTo_TDWVDAAccountEntryClaims();
        IEnumerable<TDWVDAAccountEntryClaims> Enumerate_TDWVDAAccountEntryClaims(T value);
        
        T ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value);
        TDWVDAAccountEntryContent ConvertTo_TDWVDAAccountEntryContent(T value);
        TypeConversionAction GetConversionActionTo_TDWVDAAccountEntryContent();
        IEnumerable<TDWVDAAccountEntryContent> Enumerate_TDWVDAAccountEntryContent(T value);
        
        T ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value);
        TDWVDAAccountEntryEnvelope ConvertTo_TDWVDAAccountEntryEnvelope(T value);
        TypeConversionAction GetConversionActionTo_TDWVDAAccountEntryEnvelope();
        IEnumerable<TDWVDAAccountEntryEnvelope> Enumerate_TDWVDAAccountEntryEnvelope(T value);
        
        T ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value);
        TDWVDAIdentityRegistryEntryParm ConvertTo_TDWVDAIdentityRegistryEntryParm(T value);
        TypeConversionAction GetConversionActionTo_TDWVDAIdentityRegistryEntryParm();
        IEnumerable<TDWVDAIdentityRegistryEntryParm> Enumerate_TDWVDAIdentityRegistryEntryParm(T value);
        
        T ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value);
        TDWVDAPostInvocationParameters ConvertTo_TDWVDAPostInvocationParameters(T value);
        TypeConversionAction GetConversionActionTo_TDWVDAPostInvocationParameters();
        IEnumerable<TDWVDAPostInvocationParameters> Enumerate_TDWVDAPostInvocationParameters(T value);
        
        T ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value);
        TDWVDARevocationListEntryParm ConvertTo_TDWVDARevocationListEntryParm(T value);
        TypeConversionAction GetConversionActionTo_TDWVDARevocationListEntryParm();
        IEnumerable<TDWVDARevocationListEntryParm> Enumerate_TDWVDARevocationListEntryParm(T value);
        
        T ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value);
        TDWVDAServiceEndpointEntryParm ConvertTo_TDWVDAServiceEndpointEntryParm(T value);
        TypeConversionAction GetConversionActionTo_TDWVDAServiceEndpointEntryParm();
        IEnumerable<TDWVDAServiceEndpointEntryParm> Enumerate_TDWVDAServiceEndpointEntryParm(T value);
        
        T ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value);
        TDWVDASmartContractEntryClaims ConvertTo_TDWVDASmartContractEntryClaims(T value);
        TypeConversionAction GetConversionActionTo_TDWVDASmartContractEntryClaims();
        IEnumerable<TDWVDASmartContractEntryClaims> Enumerate_TDWVDASmartContractEntryClaims(T value);
        
        T ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value);
        TDWVDASmartContractEntryContent ConvertTo_TDWVDASmartContractEntryContent(T value);
        TypeConversionAction GetConversionActionTo_TDWVDASmartContractEntryContent();
        IEnumerable<TDWVDASmartContractEntryContent> Enumerate_TDWVDASmartContractEntryContent(T value);
        
        T ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value);
        TDWVDASmartContractEntryEnvelope ConvertTo_TDWVDASmartContractEntryEnvelope(T value);
        TypeConversionAction GetConversionActionTo_TDWVDASmartContractEntryEnvelope();
        IEnumerable<TDWVDASmartContractEntryEnvelope> Enumerate_TDWVDASmartContractEntryEnvelope(T value);
        
        T ConvertFrom_TRAClaim(TRAClaim value);
        TRAClaim ConvertTo_TRAClaim(T value);
        TypeConversionAction GetConversionActionTo_TRAClaim();
        IEnumerable<TRAClaim> Enumerate_TRAClaim(T value);
        
        T ConvertFrom_TRACredentialContent(TRACredentialContent value);
        TRACredentialContent ConvertTo_TRACredentialContent(T value);
        TypeConversionAction GetConversionActionTo_TRACredentialContent();
        IEnumerable<TRACredentialContent> Enumerate_TRACredentialContent(T value);
        
        T ConvertFrom_TRACredentialEnvelope(TRACredentialEnvelope value);
        TRACredentialEnvelope ConvertTo_TRACredentialEnvelope(T value);
        TypeConversionAction GetConversionActionTo_TRACredentialEnvelope();
        IEnumerable<TRACredentialEnvelope> Enumerate_TRACredentialEnvelope(T value);
        
        T ConvertFrom_TRACredentialEnvelopeSeal(TRACredentialEnvelopeSeal value);
        TRACredentialEnvelopeSeal ConvertTo_TRACredentialEnvelopeSeal(T value);
        TypeConversionAction GetConversionActionTo_TRACredentialEnvelopeSeal();
        IEnumerable<TRACredentialEnvelopeSeal> Enumerate_TRACredentialEnvelopeSeal(T value);
        
        T ConvertFrom_TRACredentialMetadata(TRACredentialMetadata value);
        TRACredentialMetadata ConvertTo_TRACredentialMetadata(T value);
        TypeConversionAction GetConversionActionTo_TRACredentialMetadata();
        IEnumerable<TRACredentialMetadata> Enumerate_TRACredentialMetadata(T value);
        
        T ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value);
        TRAKeyValuePair ConvertTo_TRAKeyValuePair(T value);
        TypeConversionAction GetConversionActionTo_TRAKeyValuePair();
        IEnumerable<TRAKeyValuePair> Enumerate_TRAKeyValuePair(T value);
        
        T ConvertFrom_TRACredentialType(TRACredentialType value);
        TRACredentialType ConvertTo_TRACredentialType(T value);
        TypeConversionAction GetConversionActionTo_TRACredentialType();
        IEnumerable<TRACredentialType> Enumerate_TRACredentialType(T value);
        
        T ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value);
        TRAEncryptionFlag ConvertTo_TRAEncryptionFlag(T value);
        TypeConversionAction GetConversionActionTo_TRAEncryptionFlag();
        IEnumerable<TRAEncryptionFlag> Enumerate_TRAEncryptionFlag(T value);
        
        T ConvertFrom_TRAServiceType(TRAServiceType value);
        TRAServiceType ConvertTo_TRAServiceType(T value);
        TypeConversionAction GetConversionActionTo_TRAServiceType();
        IEnumerable<TRAServiceType> Enumerate_TRAServiceType(T value);
        
        T ConvertFrom_TRATrustLevel(TRATrustLevel value);
        TRATrustLevel ConvertTo_TRATrustLevel(T value);
        TypeConversionAction GetConversionActionTo_TRATrustLevel();
        IEnumerable<TRATrustLevel> Enumerate_TRATrustLevel(T value);
        
        T ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value);
        List<List<TRAKeyValuePair>> ConvertTo_List_List_TRAKeyValuePair(T value);
        TypeConversionAction GetConversionActionTo_List_List_TRAKeyValuePair();
        IEnumerable<List<List<TRAKeyValuePair>>> Enumerate_List_List_TRAKeyValuePair(T value);
        
        T ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value);
        TDWVDAAccountEntryContent? ConvertTo_TDWVDAAccountEntryContent_nullable(T value);
        TypeConversionAction GetConversionActionTo_TDWVDAAccountEntryContent_nullable();
        IEnumerable<TDWVDAAccountEntryContent?> Enumerate_TDWVDAAccountEntryContent_nullable(T value);
        
        T ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value);
        TDWVDASmartContractEntryContent? ConvertTo_TDWVDASmartContractEntryContent_nullable(T value);
        TypeConversionAction GetConversionActionTo_TDWVDASmartContractEntryContent_nullable();
        IEnumerable<TDWVDASmartContractEntryContent?> Enumerate_TDWVDASmartContractEntryContent_nullable(T value);
        
        T ConvertFrom_TRACredentialContent_nullable(TRACredentialContent? value);
        TRACredentialContent? ConvertTo_TRACredentialContent_nullable(T value);
        TypeConversionAction GetConversionActionTo_TRACredentialContent_nullable();
        IEnumerable<TRACredentialContent?> Enumerate_TRACredentialContent_nullable(T value);
        
    }
    internal class TypeConverter<T> : ITypeConverter<T>
    {
        internal class _TypeConverterImpl : ITypeConverter<object>
            
            , ITypeConverter<bool>
        
            , ITypeConverter<long>
        
            , ITypeConverter<string>
        
            , ITypeConverter<List<string>>
        
            , ITypeConverter<List<TRAClaim>>
        
            , ITypeConverter<List<TRAKeyValuePair>>
        
            , ITypeConverter<TDWVDAAccountEntryClaims>
        
            , ITypeConverter<TDWVDAAccountEntryContent>
        
            , ITypeConverter<TDWVDAAccountEntryEnvelope>
        
            , ITypeConverter<TDWVDAIdentityRegistryEntryParm>
        
            , ITypeConverter<TDWVDAPostInvocationParameters>
        
            , ITypeConverter<TDWVDARevocationListEntryParm>
        
            , ITypeConverter<TDWVDAServiceEndpointEntryParm>
        
            , ITypeConverter<TDWVDASmartContractEntryClaims>
        
            , ITypeConverter<TDWVDASmartContractEntryContent>
        
            , ITypeConverter<TDWVDASmartContractEntryEnvelope>
        
            , ITypeConverter<TRAClaim>
        
            , ITypeConverter<TRACredentialContent>
        
            , ITypeConverter<TRACredentialEnvelope>
        
            , ITypeConverter<TRACredentialEnvelopeSeal>
        
            , ITypeConverter<TRACredentialMetadata>
        
            , ITypeConverter<TRAKeyValuePair>
        
            , ITypeConverter<TRACredentialType>
        
            , ITypeConverter<TRAEncryptionFlag>
        
            , ITypeConverter<TRAServiceType>
        
            , ITypeConverter<TRATrustLevel>
        
            , ITypeConverter<List<List<TRAKeyValuePair>>>
        
            , ITypeConverter<TDWVDAAccountEntryContent?>
        
            , ITypeConverter<TDWVDASmartContractEntryContent?>
        
            , ITypeConverter<TRACredentialContent?>
        
        {
            bool ITypeConverter<bool>.ConvertFrom_bool(bool value)
            {
                
                return (bool)value;
                
            }
            bool ITypeConverter<bool>.ConvertTo_bool(bool value)
            {
                return TypeConverter<bool>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<bool>.Enumerate_bool(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_long(long value)
            {
                
                return (value != 0);
                
            }
            long ITypeConverter<bool>.ConvertTo_long(bool value)
            {
                return TypeConverter<long>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<bool>.Enumerate_long(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    bool intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = ExternalParser.TryParse_bool(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "bool");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<bool>.ConvertTo_string(bool value)
            {
                return TypeConverter<string>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<bool>.Enumerate_string(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'bool'.");
                
            }
            List<string> ITypeConverter<bool>.ConvertTo_List_string(bool value)
            {
                return TypeConverter<List<string>>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<bool>.Enumerate_List_string(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'bool'.");
                
            }
            List<TRAClaim> ITypeConverter<bool>.ConvertTo_List_TRAClaim(bool value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<bool>.Enumerate_List_TRAClaim(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'bool'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<bool>.ConvertTo_List_TRAKeyValuePair(bool value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<bool>.Enumerate_List_TRAKeyValuePair(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'bool'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<bool>.ConvertTo_TDWVDAAccountEntryClaims(bool value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<bool>.Enumerate_TDWVDAAccountEntryClaims(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'bool'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<bool>.ConvertTo_TDWVDAAccountEntryContent(bool value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<bool>.Enumerate_TDWVDAAccountEntryContent(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'bool'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<bool>.ConvertTo_TDWVDAAccountEntryEnvelope(bool value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<bool>.Enumerate_TDWVDAAccountEntryEnvelope(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'bool'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<bool>.ConvertTo_TDWVDAIdentityRegistryEntryParm(bool value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<bool>.Enumerate_TDWVDAIdentityRegistryEntryParm(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'bool'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<bool>.ConvertTo_TDWVDAPostInvocationParameters(bool value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<bool>.Enumerate_TDWVDAPostInvocationParameters(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'bool'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<bool>.ConvertTo_TDWVDARevocationListEntryParm(bool value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<bool>.Enumerate_TDWVDARevocationListEntryParm(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'bool'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<bool>.ConvertTo_TDWVDAServiceEndpointEntryParm(bool value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<bool>.Enumerate_TDWVDAServiceEndpointEntryParm(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'bool'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<bool>.ConvertTo_TDWVDASmartContractEntryClaims(bool value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<bool>.Enumerate_TDWVDASmartContractEntryClaims(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'bool'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<bool>.ConvertTo_TDWVDASmartContractEntryContent(bool value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<bool>.Enumerate_TDWVDASmartContractEntryContent(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'bool'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<bool>.ConvertTo_TDWVDASmartContractEntryEnvelope(bool value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<bool>.Enumerate_TDWVDASmartContractEntryEnvelope(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'bool'.");
                
            }
            TRAClaim ITypeConverter<bool>.ConvertTo_TRAClaim(bool value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<bool>.Enumerate_TRAClaim(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TRACredentialContent(TRACredentialContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent' to 'bool'.");
                
            }
            TRACredentialContent ITypeConverter<bool>.ConvertTo_TRACredentialContent(bool value)
            {
                return TypeConverter<TRACredentialContent>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TRACredentialContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent> ITypeConverter<bool>.Enumerate_TRACredentialContent(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TRACredentialEnvelope(TRACredentialEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelope' to 'bool'.");
                
            }
            TRACredentialEnvelope ITypeConverter<bool>.ConvertTo_TRACredentialEnvelope(bool value)
            {
                return TypeConverter<TRACredentialEnvelope>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TRACredentialEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelope> ITypeConverter<bool>.Enumerate_TRACredentialEnvelope(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TRACredentialEnvelopeSeal(TRACredentialEnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelopeSeal' to 'bool'.");
                
            }
            TRACredentialEnvelopeSeal ITypeConverter<bool>.ConvertTo_TRACredentialEnvelopeSeal(bool value)
            {
                return TypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TRACredentialEnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelopeSeal> ITypeConverter<bool>.Enumerate_TRACredentialEnvelopeSeal(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TRACredentialMetadata(TRACredentialMetadata value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialMetadata' to 'bool'.");
                
            }
            TRACredentialMetadata ITypeConverter<bool>.ConvertTo_TRACredentialMetadata(bool value)
            {
                return TypeConverter<TRACredentialMetadata>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TRACredentialMetadata()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialMetadata> ITypeConverter<bool>.Enumerate_TRACredentialMetadata(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'bool'.");
                
            }
            TRAKeyValuePair ITypeConverter<bool>.ConvertTo_TRAKeyValuePair(bool value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<bool>.Enumerate_TRAKeyValuePair(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'bool'.");
                
            }
            TRACredentialType ITypeConverter<bool>.ConvertTo_TRACredentialType(bool value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<bool>.Enumerate_TRACredentialType(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'bool'.");
                
            }
            TRAEncryptionFlag ITypeConverter<bool>.ConvertTo_TRAEncryptionFlag(bool value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<bool>.Enumerate_TRAEncryptionFlag(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'bool'.");
                
            }
            TRAServiceType ITypeConverter<bool>.ConvertTo_TRAServiceType(bool value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<bool>.Enumerate_TRAServiceType(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'bool'.");
                
            }
            TRATrustLevel ITypeConverter<bool>.ConvertTo_TRATrustLevel(bool value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<bool>.Enumerate_TRATrustLevel(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'bool'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<bool>.ConvertTo_List_List_TRAKeyValuePair(bool value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<bool>.Enumerate_List_List_TRAKeyValuePair(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'bool'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<bool>.ConvertTo_TDWVDAAccountEntryContent_nullable(bool value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<bool>.Enumerate_TDWVDAAccountEntryContent_nullable(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'bool'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<bool>.ConvertTo_TDWVDASmartContractEntryContent_nullable(bool value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<bool>.Enumerate_TDWVDASmartContractEntryContent_nullable(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TRACredentialContent_nullable(TRACredentialContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent?' to 'bool'.");
                
            }
            TRACredentialContent? ITypeConverter<bool>.ConvertTo_TRACredentialContent_nullable(bool value)
            {
                return TypeConverter<TRACredentialContent?>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TRACredentialContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent?> ITypeConverter<bool>.Enumerate_TRACredentialContent_nullable(bool value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'long'.");
                
            }
            bool ITypeConverter<long>.ConvertTo_bool(long value)
            {
                return TypeConverter<bool>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_TOBOOL;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<long>.Enumerate_bool(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_long(long value)
            {
                
                return (long)value;
                
            }
            long ITypeConverter<long>.ConvertTo_long(long value)
            {
                return TypeConverter<long>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<long>.Enumerate_long(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    long intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = long.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "long");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<long>.ConvertTo_string(long value)
            {
                return TypeConverter<string>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<long>.Enumerate_string(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'long'.");
                
            }
            List<string> ITypeConverter<long>.ConvertTo_List_string(long value)
            {
                return TypeConverter<List<string>>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<long>.Enumerate_List_string(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'long'.");
                
            }
            List<TRAClaim> ITypeConverter<long>.ConvertTo_List_TRAClaim(long value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<long>.Enumerate_List_TRAClaim(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'long'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<long>.ConvertTo_List_TRAKeyValuePair(long value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<long>.Enumerate_List_TRAKeyValuePair(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'long'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<long>.ConvertTo_TDWVDAAccountEntryClaims(long value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<long>.Enumerate_TDWVDAAccountEntryClaims(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'long'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<long>.ConvertTo_TDWVDAAccountEntryContent(long value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<long>.Enumerate_TDWVDAAccountEntryContent(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'long'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<long>.ConvertTo_TDWVDAAccountEntryEnvelope(long value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<long>.Enumerate_TDWVDAAccountEntryEnvelope(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'long'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<long>.ConvertTo_TDWVDAIdentityRegistryEntryParm(long value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<long>.Enumerate_TDWVDAIdentityRegistryEntryParm(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'long'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<long>.ConvertTo_TDWVDAPostInvocationParameters(long value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<long>.Enumerate_TDWVDAPostInvocationParameters(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'long'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<long>.ConvertTo_TDWVDARevocationListEntryParm(long value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<long>.Enumerate_TDWVDARevocationListEntryParm(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'long'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<long>.ConvertTo_TDWVDAServiceEndpointEntryParm(long value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<long>.Enumerate_TDWVDAServiceEndpointEntryParm(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'long'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<long>.ConvertTo_TDWVDASmartContractEntryClaims(long value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<long>.Enumerate_TDWVDASmartContractEntryClaims(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'long'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<long>.ConvertTo_TDWVDASmartContractEntryContent(long value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<long>.Enumerate_TDWVDASmartContractEntryContent(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'long'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<long>.ConvertTo_TDWVDASmartContractEntryEnvelope(long value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<long>.Enumerate_TDWVDASmartContractEntryEnvelope(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'long'.");
                
            }
            TRAClaim ITypeConverter<long>.ConvertTo_TRAClaim(long value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<long>.Enumerate_TRAClaim(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TRACredentialContent(TRACredentialContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent' to 'long'.");
                
            }
            TRACredentialContent ITypeConverter<long>.ConvertTo_TRACredentialContent(long value)
            {
                return TypeConverter<TRACredentialContent>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TRACredentialContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent> ITypeConverter<long>.Enumerate_TRACredentialContent(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TRACredentialEnvelope(TRACredentialEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelope' to 'long'.");
                
            }
            TRACredentialEnvelope ITypeConverter<long>.ConvertTo_TRACredentialEnvelope(long value)
            {
                return TypeConverter<TRACredentialEnvelope>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TRACredentialEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelope> ITypeConverter<long>.Enumerate_TRACredentialEnvelope(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TRACredentialEnvelopeSeal(TRACredentialEnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelopeSeal' to 'long'.");
                
            }
            TRACredentialEnvelopeSeal ITypeConverter<long>.ConvertTo_TRACredentialEnvelopeSeal(long value)
            {
                return TypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TRACredentialEnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelopeSeal> ITypeConverter<long>.Enumerate_TRACredentialEnvelopeSeal(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TRACredentialMetadata(TRACredentialMetadata value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialMetadata' to 'long'.");
                
            }
            TRACredentialMetadata ITypeConverter<long>.ConvertTo_TRACredentialMetadata(long value)
            {
                return TypeConverter<TRACredentialMetadata>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TRACredentialMetadata()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialMetadata> ITypeConverter<long>.Enumerate_TRACredentialMetadata(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'long'.");
                
            }
            TRAKeyValuePair ITypeConverter<long>.ConvertTo_TRAKeyValuePair(long value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<long>.Enumerate_TRAKeyValuePair(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'long'.");
                
            }
            TRACredentialType ITypeConverter<long>.ConvertTo_TRACredentialType(long value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<long>.Enumerate_TRACredentialType(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'long'.");
                
            }
            TRAEncryptionFlag ITypeConverter<long>.ConvertTo_TRAEncryptionFlag(long value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<long>.Enumerate_TRAEncryptionFlag(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'long'.");
                
            }
            TRAServiceType ITypeConverter<long>.ConvertTo_TRAServiceType(long value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<long>.Enumerate_TRAServiceType(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'long'.");
                
            }
            TRATrustLevel ITypeConverter<long>.ConvertTo_TRATrustLevel(long value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<long>.Enumerate_TRATrustLevel(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'long'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<long>.ConvertTo_List_List_TRAKeyValuePair(long value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<long>.Enumerate_List_List_TRAKeyValuePair(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'long'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<long>.ConvertTo_TDWVDAAccountEntryContent_nullable(long value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<long>.Enumerate_TDWVDAAccountEntryContent_nullable(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'long'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<long>.ConvertTo_TDWVDASmartContractEntryContent_nullable(long value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<long>.Enumerate_TDWVDASmartContractEntryContent_nullable(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TRACredentialContent_nullable(TRACredentialContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent?' to 'long'.");
                
            }
            TRACredentialContent? ITypeConverter<long>.ConvertTo_TRACredentialContent_nullable(long value)
            {
                return TypeConverter<TRACredentialContent?>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TRACredentialContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent?> ITypeConverter<long>.Enumerate_TRACredentialContent_nullable(long value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_bool(bool value)
            {
                
                return Serializer.ToString(value);
                
            }
            bool ITypeConverter<string>.ConvertTo_bool(string value)
            {
                return TypeConverter<bool>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<string>.Enumerate_bool(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_long(long value)
            {
                
                return Serializer.ToString(value);
                
            }
            long ITypeConverter<string>.ConvertTo_long(string value)
            {
                return TypeConverter<long>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<string>.Enumerate_long(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_string(string value)
            {
                
                return (string)value;
                
            }
            string ITypeConverter<string>.ConvertTo_string(string value)
            {
                return TypeConverter<string>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<string>.Enumerate_string(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_List_string(List<string> value)
            {
                
                return Serializer.ToString(value);
                
            }
            List<string> ITypeConverter<string>.ConvertTo_List_string(string value)
            {
                return TypeConverter<List<string>>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<string>.Enumerate_List_string(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                return Serializer.ToString(value);
                
            }
            List<TRAClaim> ITypeConverter<string>.ConvertTo_List_TRAClaim(string value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<string>.Enumerate_List_TRAClaim(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                return Serializer.ToString(value);
                
            }
            List<TRAKeyValuePair> ITypeConverter<string>.ConvertTo_List_TRAKeyValuePair(string value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<string>.Enumerate_List_TRAKeyValuePair(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                return Serializer.ToString(value);
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<string>.ConvertTo_TDWVDAAccountEntryClaims(string value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<string>.Enumerate_TDWVDAAccountEntryClaims(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                return Serializer.ToString(value);
                
            }
            TDWVDAAccountEntryContent ITypeConverter<string>.ConvertTo_TDWVDAAccountEntryContent(string value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<string>.Enumerate_TDWVDAAccountEntryContent(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                return Serializer.ToString(value);
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<string>.ConvertTo_TDWVDAAccountEntryEnvelope(string value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<string>.Enumerate_TDWVDAAccountEntryEnvelope(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                return Serializer.ToString(value);
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<string>.ConvertTo_TDWVDAIdentityRegistryEntryParm(string value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<string>.Enumerate_TDWVDAIdentityRegistryEntryParm(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                return Serializer.ToString(value);
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<string>.ConvertTo_TDWVDAPostInvocationParameters(string value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<string>.Enumerate_TDWVDAPostInvocationParameters(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                return Serializer.ToString(value);
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<string>.ConvertTo_TDWVDARevocationListEntryParm(string value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<string>.Enumerate_TDWVDARevocationListEntryParm(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                return Serializer.ToString(value);
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<string>.ConvertTo_TDWVDAServiceEndpointEntryParm(string value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<string>.Enumerate_TDWVDAServiceEndpointEntryParm(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                return Serializer.ToString(value);
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<string>.ConvertTo_TDWVDASmartContractEntryClaims(string value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<string>.Enumerate_TDWVDASmartContractEntryClaims(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                return Serializer.ToString(value);
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<string>.ConvertTo_TDWVDASmartContractEntryContent(string value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<string>.Enumerate_TDWVDASmartContractEntryContent(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                return Serializer.ToString(value);
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<string>.ConvertTo_TDWVDASmartContractEntryEnvelope(string value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<string>.Enumerate_TDWVDASmartContractEntryEnvelope(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                return Serializer.ToString(value);
                
            }
            TRAClaim ITypeConverter<string>.ConvertTo_TRAClaim(string value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<string>.Enumerate_TRAClaim(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TRACredentialContent(TRACredentialContent value)
            {
                
                return Serializer.ToString(value);
                
            }
            TRACredentialContent ITypeConverter<string>.ConvertTo_TRACredentialContent(string value)
            {
                return TypeConverter<TRACredentialContent>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TRACredentialContent()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent> ITypeConverter<string>.Enumerate_TRACredentialContent(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TRACredentialEnvelope(TRACredentialEnvelope value)
            {
                
                return Serializer.ToString(value);
                
            }
            TRACredentialEnvelope ITypeConverter<string>.ConvertTo_TRACredentialEnvelope(string value)
            {
                return TypeConverter<TRACredentialEnvelope>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TRACredentialEnvelope()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelope> ITypeConverter<string>.Enumerate_TRACredentialEnvelope(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TRACredentialEnvelopeSeal(TRACredentialEnvelopeSeal value)
            {
                
                return Serializer.ToString(value);
                
            }
            TRACredentialEnvelopeSeal ITypeConverter<string>.ConvertTo_TRACredentialEnvelopeSeal(string value)
            {
                return TypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TRACredentialEnvelopeSeal()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelopeSeal> ITypeConverter<string>.Enumerate_TRACredentialEnvelopeSeal(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TRACredentialMetadata(TRACredentialMetadata value)
            {
                
                return Serializer.ToString(value);
                
            }
            TRACredentialMetadata ITypeConverter<string>.ConvertTo_TRACredentialMetadata(string value)
            {
                return TypeConverter<TRACredentialMetadata>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TRACredentialMetadata()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialMetadata> ITypeConverter<string>.Enumerate_TRACredentialMetadata(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                return Serializer.ToString(value);
                
            }
            TRAKeyValuePair ITypeConverter<string>.ConvertTo_TRAKeyValuePair(string value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<string>.Enumerate_TRAKeyValuePair(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                return Serializer.ToString(value);
                
            }
            TRACredentialType ITypeConverter<string>.ConvertTo_TRACredentialType(string value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<string>.Enumerate_TRACredentialType(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                return Serializer.ToString(value);
                
            }
            TRAEncryptionFlag ITypeConverter<string>.ConvertTo_TRAEncryptionFlag(string value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<string>.Enumerate_TRAEncryptionFlag(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                return Serializer.ToString(value);
                
            }
            TRAServiceType ITypeConverter<string>.ConvertTo_TRAServiceType(string value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<string>.Enumerate_TRAServiceType(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                return Serializer.ToString(value);
                
            }
            TRATrustLevel ITypeConverter<string>.ConvertTo_TRATrustLevel(string value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<string>.Enumerate_TRATrustLevel(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                return Serializer.ToString(value);
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<string>.ConvertTo_List_List_TRAKeyValuePair(string value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<string>.Enumerate_List_List_TRAKeyValuePair(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                return Serializer.ToString(value);
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<string>.ConvertTo_TDWVDAAccountEntryContent_nullable(string value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<string>.Enumerate_TDWVDAAccountEntryContent_nullable(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                return Serializer.ToString(value);
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<string>.ConvertTo_TDWVDASmartContractEntryContent_nullable(string value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<string>.Enumerate_TDWVDASmartContractEntryContent_nullable(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TRACredentialContent_nullable(TRACredentialContent? value)
            {
                
                return Serializer.ToString(value);
                
            }
            TRACredentialContent? ITypeConverter<string>.ConvertTo_TRACredentialContent_nullable(string value)
            {
                return TypeConverter<TRACredentialContent?>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TRACredentialContent_nullable()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent?> ITypeConverter<string>.Enumerate_TRACredentialContent_nullable(string value)
            {
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_bool(bool value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_bool(value));
                    return intermediate_result;
                }
                
            }
            bool ITypeConverter<List<string>>.ConvertTo_bool(List<string> value)
            {
                return TypeConverter<bool>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<List<string>>.Enumerate_bool(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<bool>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_long(long value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_long(value));
                    return intermediate_result;
                }
                
            }
            long ITypeConverter<List<string>>.ConvertTo_long(List<string> value)
            {
                return TypeConverter<long>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<List<string>>.Enumerate_long(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<long>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    List<string> intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = ExternalParser.TryParse_List_string(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        try
                        {
                            string element = TypeConverter<string>.ConvertFrom_string(value);
                            intermediate_result = new List<string>();
                            intermediate_result.Add(element);
                        }
                        catch
                        {
                            throw new ArgumentException("Cannot parse \"" + value + "\" into either 'List<string>' or 'string'.");
                        }
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<List<string>>.ConvertTo_string(List<string> value)
            {
                return TypeConverter<string>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<List<string>>.Enumerate_string(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<string>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_List_string(List<string> value)
            {
                
                return (List<string>)value;
                
            }
            List<string> ITypeConverter<List<string>>.ConvertTo_List_string(List<string> value)
            {
                return TypeConverter<List<string>>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<List<string>>.Enumerate_List_string(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<List<string>>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    foreach (var element in value)
                    {
                        intermediate_result.Add(TypeConverter<string>.ConvertFrom_TRAClaim(element));
                    }
                    return intermediate_result;
                }
                
            }
            List<TRAClaim> ITypeConverter<List<string>>.ConvertTo_List_TRAClaim(List<string> value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_CONVERTLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<List<string>>.Enumerate_List_TRAClaim(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<List<TRAClaim>>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    foreach (var element in value)
                    {
                        intermediate_result.Add(TypeConverter<string>.ConvertFrom_TRAKeyValuePair(element));
                    }
                    return intermediate_result;
                }
                
            }
            List<TRAKeyValuePair> ITypeConverter<List<string>>.ConvertTo_List_TRAKeyValuePair(List<string> value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_CONVERTLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<List<string>>.Enumerate_List_TRAKeyValuePair(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TDWVDAAccountEntryClaims(value));
                    return intermediate_result;
                }
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<List<string>>.ConvertTo_TDWVDAAccountEntryClaims(List<string> value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<List<string>>.Enumerate_TDWVDAAccountEntryClaims(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TDWVDAAccountEntryContent(value));
                    return intermediate_result;
                }
                
            }
            TDWVDAAccountEntryContent ITypeConverter<List<string>>.ConvertTo_TDWVDAAccountEntryContent(List<string> value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<List<string>>.Enumerate_TDWVDAAccountEntryContent(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TDWVDAAccountEntryEnvelope(value));
                    return intermediate_result;
                }
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<List<string>>.ConvertTo_TDWVDAAccountEntryEnvelope(List<string> value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<List<string>>.Enumerate_TDWVDAAccountEntryEnvelope(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value));
                    return intermediate_result;
                }
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<List<string>>.ConvertTo_TDWVDAIdentityRegistryEntryParm(List<string> value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<List<string>>.Enumerate_TDWVDAIdentityRegistryEntryParm(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TDWVDAPostInvocationParameters(value));
                    return intermediate_result;
                }
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<List<string>>.ConvertTo_TDWVDAPostInvocationParameters(List<string> value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<List<string>>.Enumerate_TDWVDAPostInvocationParameters(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TDWVDARevocationListEntryParm(value));
                    return intermediate_result;
                }
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<List<string>>.ConvertTo_TDWVDARevocationListEntryParm(List<string> value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<List<string>>.Enumerate_TDWVDARevocationListEntryParm(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value));
                    return intermediate_result;
                }
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<List<string>>.ConvertTo_TDWVDAServiceEndpointEntryParm(List<string> value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<List<string>>.Enumerate_TDWVDAServiceEndpointEntryParm(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TDWVDASmartContractEntryClaims(value));
                    return intermediate_result;
                }
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<List<string>>.ConvertTo_TDWVDASmartContractEntryClaims(List<string> value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<List<string>>.Enumerate_TDWVDASmartContractEntryClaims(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TDWVDASmartContractEntryContent(value));
                    return intermediate_result;
                }
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<List<string>>.ConvertTo_TDWVDASmartContractEntryContent(List<string> value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<List<string>>.Enumerate_TDWVDASmartContractEntryContent(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value));
                    return intermediate_result;
                }
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<List<string>>.ConvertTo_TDWVDASmartContractEntryEnvelope(List<string> value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<List<string>>.Enumerate_TDWVDASmartContractEntryEnvelope(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TRAClaim(value));
                    return intermediate_result;
                }
                
            }
            TRAClaim ITypeConverter<List<string>>.ConvertTo_TRAClaim(List<string> value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<List<string>>.Enumerate_TRAClaim(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TRAClaim>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TRACredentialContent(TRACredentialContent value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TRACredentialContent(value));
                    return intermediate_result;
                }
                
            }
            TRACredentialContent ITypeConverter<List<string>>.ConvertTo_TRACredentialContent(List<string> value)
            {
                return TypeConverter<TRACredentialContent>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TRACredentialContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent> ITypeConverter<List<string>>.Enumerate_TRACredentialContent(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TRACredentialContent>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TRACredentialEnvelope(TRACredentialEnvelope value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TRACredentialEnvelope(value));
                    return intermediate_result;
                }
                
            }
            TRACredentialEnvelope ITypeConverter<List<string>>.ConvertTo_TRACredentialEnvelope(List<string> value)
            {
                return TypeConverter<TRACredentialEnvelope>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TRACredentialEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelope> ITypeConverter<List<string>>.Enumerate_TRACredentialEnvelope(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TRACredentialEnvelope>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TRACredentialEnvelopeSeal(TRACredentialEnvelopeSeal value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TRACredentialEnvelopeSeal(value));
                    return intermediate_result;
                }
                
            }
            TRACredentialEnvelopeSeal ITypeConverter<List<string>>.ConvertTo_TRACredentialEnvelopeSeal(List<string> value)
            {
                return TypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TRACredentialEnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelopeSeal> ITypeConverter<List<string>>.Enumerate_TRACredentialEnvelopeSeal(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TRACredentialMetadata(TRACredentialMetadata value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TRACredentialMetadata(value));
                    return intermediate_result;
                }
                
            }
            TRACredentialMetadata ITypeConverter<List<string>>.ConvertTo_TRACredentialMetadata(List<string> value)
            {
                return TypeConverter<TRACredentialMetadata>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TRACredentialMetadata()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialMetadata> ITypeConverter<List<string>>.Enumerate_TRACredentialMetadata(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TRACredentialMetadata>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TRAKeyValuePair(value));
                    return intermediate_result;
                }
                
            }
            TRAKeyValuePair ITypeConverter<List<string>>.ConvertTo_TRAKeyValuePair(List<string> value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<List<string>>.Enumerate_TRAKeyValuePair(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TRAKeyValuePair>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TRACredentialType(value));
                    return intermediate_result;
                }
                
            }
            TRACredentialType ITypeConverter<List<string>>.ConvertTo_TRACredentialType(List<string> value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<List<string>>.Enumerate_TRACredentialType(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TRACredentialType>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TRAEncryptionFlag(value));
                    return intermediate_result;
                }
                
            }
            TRAEncryptionFlag ITypeConverter<List<string>>.ConvertTo_TRAEncryptionFlag(List<string> value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<List<string>>.Enumerate_TRAEncryptionFlag(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TRAEncryptionFlag>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TRAServiceType(value));
                    return intermediate_result;
                }
                
            }
            TRAServiceType ITypeConverter<List<string>>.ConvertTo_TRAServiceType(List<string> value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<List<string>>.Enumerate_TRAServiceType(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TRAServiceType>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TRATrustLevel(value));
                    return intermediate_result;
                }
                
            }
            TRATrustLevel ITypeConverter<List<string>>.ConvertTo_TRATrustLevel(List<string> value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<List<string>>.Enumerate_TRATrustLevel(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TRATrustLevel>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    foreach (var element in value)
                    {
                        intermediate_result.Add(TypeConverter<string>.ConvertFrom_List_TRAKeyValuePair(element));
                    }
                    return intermediate_result;
                }
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<string>>.ConvertTo_List_List_TRAKeyValuePair(List<string> value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_CONVERTLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<List<string>>.Enumerate_List_List_TRAKeyValuePair(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value));
                    return intermediate_result;
                }
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<List<string>>.ConvertTo_TDWVDAAccountEntryContent_nullable(List<string> value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<List<string>>.Enumerate_TDWVDAAccountEntryContent_nullable(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value));
                    return intermediate_result;
                }
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<List<string>>.ConvertTo_TDWVDASmartContractEntryContent_nullable(List<string> value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<List<string>>.Enumerate_TDWVDASmartContractEntryContent_nullable(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TRACredentialContent_nullable(TRACredentialContent? value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TRACredentialContent_nullable(value));
                    return intermediate_result;
                }
                
            }
            TRACredentialContent? ITypeConverter<List<string>>.ConvertTo_TRACredentialContent_nullable(List<string> value)
            {
                return TypeConverter<TRACredentialContent?>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TRACredentialContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent?> ITypeConverter<List<string>>.Enumerate_TRACredentialContent_nullable(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TRACredentialContent?>.ConvertFrom_string(element);
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'List<TRAClaim>'.");
                
            }
            bool ITypeConverter<List<TRAClaim>>.ConvertTo_bool(List<TRAClaim> value)
            {
                return TypeConverter<bool>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<List<TRAClaim>>.Enumerate_bool(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'List<TRAClaim>'.");
                
            }
            long ITypeConverter<List<TRAClaim>>.ConvertTo_long(List<TRAClaim> value)
            {
                return TypeConverter<long>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<List<TRAClaim>>.Enumerate_long(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    List<TRAClaim> intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = ExternalParser.TryParse_List_TRAClaim(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        try
                        {
                            TRAClaim element = TypeConverter<TRAClaim>.ConvertFrom_string(value);
                            intermediate_result = new List<TRAClaim>();
                            intermediate_result.Add(element);
                        }
                        catch
                        {
                            throw new ArgumentException("Cannot parse \"" + value + "\" into either 'List<TRAClaim>' or 'TRAClaim'.");
                        }
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<List<TRAClaim>>.ConvertTo_string(List<TRAClaim> value)
            {
                return TypeConverter<string>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<List<TRAClaim>>.Enumerate_string(List<TRAClaim> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<string>.ConvertFrom_TRAClaim(element);
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_List_string(List<string> value)
            {
                
                {
                    List<TRAClaim> intermediate_result = new List<TRAClaim>();
                    foreach (var element in value)
                    {
                        intermediate_result.Add(TypeConverter<TRAClaim>.ConvertFrom_string(element));
                    }
                    return intermediate_result;
                }
                
            }
            List<string> ITypeConverter<List<TRAClaim>>.ConvertTo_List_string(List<TRAClaim> value)
            {
                return TypeConverter<List<string>>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_CONVERTLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<List<TRAClaim>>.Enumerate_List_string(List<TRAClaim> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<List<string>>.ConvertFrom_TRAClaim(element);
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                return (List<TRAClaim>)value;
                
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertTo_List_TRAClaim(List<TRAClaim> value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<List<TRAClaim>>.Enumerate_List_TRAClaim(List<TRAClaim> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<List<TRAClaim>>.ConvertFrom_TRAClaim(element);
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'List<TRAClaim>'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAClaim>>.ConvertTo_List_TRAKeyValuePair(List<TRAClaim> value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<List<TRAClaim>>.Enumerate_List_TRAKeyValuePair(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'List<TRAClaim>'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<List<TRAClaim>>.ConvertTo_TDWVDAAccountEntryClaims(List<TRAClaim> value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<List<TRAClaim>>.Enumerate_TDWVDAAccountEntryClaims(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'List<TRAClaim>'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<List<TRAClaim>>.ConvertTo_TDWVDAAccountEntryContent(List<TRAClaim> value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<List<TRAClaim>>.Enumerate_TDWVDAAccountEntryContent(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'List<TRAClaim>'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<List<TRAClaim>>.ConvertTo_TDWVDAAccountEntryEnvelope(List<TRAClaim> value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<List<TRAClaim>>.Enumerate_TDWVDAAccountEntryEnvelope(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'List<TRAClaim>'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<List<TRAClaim>>.ConvertTo_TDWVDAIdentityRegistryEntryParm(List<TRAClaim> value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<List<TRAClaim>>.Enumerate_TDWVDAIdentityRegistryEntryParm(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'List<TRAClaim>'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<List<TRAClaim>>.ConvertTo_TDWVDAPostInvocationParameters(List<TRAClaim> value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<List<TRAClaim>>.Enumerate_TDWVDAPostInvocationParameters(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'List<TRAClaim>'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<List<TRAClaim>>.ConvertTo_TDWVDARevocationListEntryParm(List<TRAClaim> value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<List<TRAClaim>>.Enumerate_TDWVDARevocationListEntryParm(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'List<TRAClaim>'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<List<TRAClaim>>.ConvertTo_TDWVDAServiceEndpointEntryParm(List<TRAClaim> value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<List<TRAClaim>>.Enumerate_TDWVDAServiceEndpointEntryParm(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'List<TRAClaim>'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<List<TRAClaim>>.ConvertTo_TDWVDASmartContractEntryClaims(List<TRAClaim> value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<List<TRAClaim>>.Enumerate_TDWVDASmartContractEntryClaims(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'List<TRAClaim>'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<List<TRAClaim>>.ConvertTo_TDWVDASmartContractEntryContent(List<TRAClaim> value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<List<TRAClaim>>.Enumerate_TDWVDASmartContractEntryContent(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'List<TRAClaim>'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<List<TRAClaim>>.ConvertTo_TDWVDASmartContractEntryEnvelope(List<TRAClaim> value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<List<TRAClaim>>.Enumerate_TDWVDASmartContractEntryEnvelope(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                {
                    List<TRAClaim> intermediate_result = new List<TRAClaim>();
                    intermediate_result.Add(TypeConverter<TRAClaim>.ConvertFrom_TRAClaim(value));
                    return intermediate_result;
                }
                
            }
            TRAClaim ITypeConverter<List<TRAClaim>>.ConvertTo_TRAClaim(List<TRAClaim> value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<List<TRAClaim>>.Enumerate_TRAClaim(List<TRAClaim> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TRAClaim>.ConvertFrom_TRAClaim(element);
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TRACredentialContent(TRACredentialContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent' to 'List<TRAClaim>'.");
                
            }
            TRACredentialContent ITypeConverter<List<TRAClaim>>.ConvertTo_TRACredentialContent(List<TRAClaim> value)
            {
                return TypeConverter<TRACredentialContent>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TRACredentialContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent> ITypeConverter<List<TRAClaim>>.Enumerate_TRACredentialContent(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TRACredentialEnvelope(TRACredentialEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelope' to 'List<TRAClaim>'.");
                
            }
            TRACredentialEnvelope ITypeConverter<List<TRAClaim>>.ConvertTo_TRACredentialEnvelope(List<TRAClaim> value)
            {
                return TypeConverter<TRACredentialEnvelope>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TRACredentialEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelope> ITypeConverter<List<TRAClaim>>.Enumerate_TRACredentialEnvelope(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TRACredentialEnvelopeSeal(TRACredentialEnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelopeSeal' to 'List<TRAClaim>'.");
                
            }
            TRACredentialEnvelopeSeal ITypeConverter<List<TRAClaim>>.ConvertTo_TRACredentialEnvelopeSeal(List<TRAClaim> value)
            {
                return TypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TRACredentialEnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelopeSeal> ITypeConverter<List<TRAClaim>>.Enumerate_TRACredentialEnvelopeSeal(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TRACredentialMetadata(TRACredentialMetadata value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialMetadata' to 'List<TRAClaim>'.");
                
            }
            TRACredentialMetadata ITypeConverter<List<TRAClaim>>.ConvertTo_TRACredentialMetadata(List<TRAClaim> value)
            {
                return TypeConverter<TRACredentialMetadata>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TRACredentialMetadata()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialMetadata> ITypeConverter<List<TRAClaim>>.Enumerate_TRACredentialMetadata(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'List<TRAClaim>'.");
                
            }
            TRAKeyValuePair ITypeConverter<List<TRAClaim>>.ConvertTo_TRAKeyValuePair(List<TRAClaim> value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<List<TRAClaim>>.Enumerate_TRAKeyValuePair(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'List<TRAClaim>'.");
                
            }
            TRACredentialType ITypeConverter<List<TRAClaim>>.ConvertTo_TRACredentialType(List<TRAClaim> value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<List<TRAClaim>>.Enumerate_TRACredentialType(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'List<TRAClaim>'.");
                
            }
            TRAEncryptionFlag ITypeConverter<List<TRAClaim>>.ConvertTo_TRAEncryptionFlag(List<TRAClaim> value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<List<TRAClaim>>.Enumerate_TRAEncryptionFlag(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'List<TRAClaim>'.");
                
            }
            TRAServiceType ITypeConverter<List<TRAClaim>>.ConvertTo_TRAServiceType(List<TRAClaim> value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<List<TRAClaim>>.Enumerate_TRAServiceType(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'List<TRAClaim>'.");
                
            }
            TRATrustLevel ITypeConverter<List<TRAClaim>>.ConvertTo_TRATrustLevel(List<TRAClaim> value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<List<TRAClaim>>.Enumerate_TRATrustLevel(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'List<TRAClaim>'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<TRAClaim>>.ConvertTo_List_List_TRAKeyValuePair(List<TRAClaim> value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<List<TRAClaim>>.Enumerate_List_List_TRAKeyValuePair(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'List<TRAClaim>'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<List<TRAClaim>>.ConvertTo_TDWVDAAccountEntryContent_nullable(List<TRAClaim> value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<List<TRAClaim>>.Enumerate_TDWVDAAccountEntryContent_nullable(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'List<TRAClaim>'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<List<TRAClaim>>.ConvertTo_TDWVDASmartContractEntryContent_nullable(List<TRAClaim> value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<List<TRAClaim>>.Enumerate_TDWVDASmartContractEntryContent_nullable(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TRACredentialContent_nullable(TRACredentialContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent?' to 'List<TRAClaim>'.");
                
            }
            TRACredentialContent? ITypeConverter<List<TRAClaim>>.ConvertTo_TRACredentialContent_nullable(List<TRAClaim> value)
            {
                return TypeConverter<TRACredentialContent?>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TRACredentialContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent?> ITypeConverter<List<TRAClaim>>.Enumerate_TRACredentialContent_nullable(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'List<TRAKeyValuePair>'.");
                
            }
            bool ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_bool(List<TRAKeyValuePair> value)
            {
                return TypeConverter<bool>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_bool(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'List<TRAKeyValuePair>'.");
                
            }
            long ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_long(List<TRAKeyValuePair> value)
            {
                return TypeConverter<long>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_long(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    List<TRAKeyValuePair> intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = ExternalParser.TryParse_List_TRAKeyValuePair(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        try
                        {
                            TRAKeyValuePair element = TypeConverter<TRAKeyValuePair>.ConvertFrom_string(value);
                            intermediate_result = new List<TRAKeyValuePair>();
                            intermediate_result.Add(element);
                        }
                        catch
                        {
                            throw new ArgumentException("Cannot parse \"" + value + "\" into either 'List<TRAKeyValuePair>' or 'TRAKeyValuePair'.");
                        }
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_string(List<TRAKeyValuePair> value)
            {
                return TypeConverter<string>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_string(List<TRAKeyValuePair> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<string>.ConvertFrom_TRAKeyValuePair(element);
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_List_string(List<string> value)
            {
                
                {
                    List<TRAKeyValuePair> intermediate_result = new List<TRAKeyValuePair>();
                    foreach (var element in value)
                    {
                        intermediate_result.Add(TypeConverter<TRAKeyValuePair>.ConvertFrom_string(element));
                    }
                    return intermediate_result;
                }
                
            }
            List<string> ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_List_string(List<TRAKeyValuePair> value)
            {
                return TypeConverter<List<string>>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_CONVERTLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_List_string(List<TRAKeyValuePair> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<List<string>>.ConvertFrom_TRAKeyValuePair(element);
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'List<TRAKeyValuePair>'.");
                
            }
            List<TRAClaim> ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_List_TRAClaim(List<TRAKeyValuePair> value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_List_TRAClaim(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                return (List<TRAKeyValuePair>)value;
                
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRAKeyValuePair(element);
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'List<TRAKeyValuePair>'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TDWVDAAccountEntryClaims(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TDWVDAAccountEntryClaims(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'List<TRAKeyValuePair>'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TDWVDAAccountEntryContent(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TDWVDAAccountEntryContent(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'List<TRAKeyValuePair>'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TDWVDAAccountEntryEnvelope(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TDWVDAAccountEntryEnvelope(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'List<TRAKeyValuePair>'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TDWVDAIdentityRegistryEntryParm(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TDWVDAIdentityRegistryEntryParm(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'List<TRAKeyValuePair>'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TDWVDAPostInvocationParameters(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TDWVDAPostInvocationParameters(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'List<TRAKeyValuePair>'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TDWVDARevocationListEntryParm(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TDWVDARevocationListEntryParm(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'List<TRAKeyValuePair>'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TDWVDAServiceEndpointEntryParm(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TDWVDAServiceEndpointEntryParm(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'List<TRAKeyValuePair>'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TDWVDASmartContractEntryClaims(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TDWVDASmartContractEntryClaims(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'List<TRAKeyValuePair>'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TDWVDASmartContractEntryContent(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TDWVDASmartContractEntryContent(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'List<TRAKeyValuePair>'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TDWVDASmartContractEntryEnvelope(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TDWVDASmartContractEntryEnvelope(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'List<TRAKeyValuePair>'.");
                
            }
            TRAClaim ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TRAClaim(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TRAClaim(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRACredentialContent(TRACredentialContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent' to 'List<TRAKeyValuePair>'.");
                
            }
            TRACredentialContent ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TRACredentialContent(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TRACredentialContent>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TRACredentialContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TRACredentialContent(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRACredentialEnvelope(TRACredentialEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelope' to 'List<TRAKeyValuePair>'.");
                
            }
            TRACredentialEnvelope ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TRACredentialEnvelope(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TRACredentialEnvelope>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TRACredentialEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelope> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TRACredentialEnvelope(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRACredentialEnvelopeSeal(TRACredentialEnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelopeSeal' to 'List<TRAKeyValuePair>'.");
                
            }
            TRACredentialEnvelopeSeal ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TRACredentialEnvelopeSeal(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TRACredentialEnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelopeSeal> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TRACredentialEnvelopeSeal(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRACredentialMetadata(TRACredentialMetadata value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialMetadata' to 'List<TRAKeyValuePair>'.");
                
            }
            TRACredentialMetadata ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TRACredentialMetadata(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TRACredentialMetadata>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TRACredentialMetadata()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialMetadata> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TRACredentialMetadata(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                {
                    List<TRAKeyValuePair> intermediate_result = new List<TRAKeyValuePair>();
                    intermediate_result.Add(TypeConverter<TRAKeyValuePair>.ConvertFrom_TRAKeyValuePair(value));
                    return intermediate_result;
                }
                
            }
            TRAKeyValuePair ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TRAKeyValuePair>.ConvertFrom_TRAKeyValuePair(element);
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'List<TRAKeyValuePair>'.");
                
            }
            TRACredentialType ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TRACredentialType(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TRACredentialType(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'List<TRAKeyValuePair>'.");
                
            }
            TRAEncryptionFlag ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TRAEncryptionFlag(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TRAEncryptionFlag(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'List<TRAKeyValuePair>'.");
                
            }
            TRAServiceType ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TRAServiceType(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TRAServiceType(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'List<TRAKeyValuePair>'.");
                
            }
            TRATrustLevel ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TRATrustLevel(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TRATrustLevel(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'List<TRAKeyValuePair>'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_List_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_CONVERTLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_List_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRAKeyValuePair(element);
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'List<TRAKeyValuePair>'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TDWVDAAccountEntryContent_nullable(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TDWVDAAccountEntryContent_nullable(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'List<TRAKeyValuePair>'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TDWVDASmartContractEntryContent_nullable(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TDWVDASmartContractEntryContent_nullable(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRACredentialContent_nullable(TRACredentialContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent?' to 'List<TRAKeyValuePair>'.");
                
            }
            TRACredentialContent? ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TRACredentialContent_nullable(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TRACredentialContent?>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TRACredentialContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent?> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TRACredentialContent_nullable(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TDWVDAAccountEntryClaims'.");
                
            }
            bool ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_bool(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<bool>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_bool(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TDWVDAAccountEntryClaims'.");
                
            }
            long ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_long(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<long>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_long(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TDWVDAAccountEntryClaims intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TDWVDAAccountEntryClaims.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TDWVDAAccountEntryClaims");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_string(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<string>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_string(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TDWVDAAccountEntryClaims'.");
                
            }
            List<string> ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_List_string(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_List_string(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TDWVDAAccountEntryClaims'.");
                
            }
            List<TRAClaim> ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_List_TRAClaim(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_List_TRAClaim(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TDWVDAAccountEntryClaims'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_List_TRAKeyValuePair(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_List_TRAKeyValuePair(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                return (TDWVDAAccountEntryClaims)value;
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'TDWVDAAccountEntryClaims'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_TDWVDAAccountEntryContent(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_TDWVDAAccountEntryContent(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'TDWVDAAccountEntryClaims'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TDWVDAAccountEntryClaims'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_TDWVDAIdentityRegistryEntryParm(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TDWVDAAccountEntryClaims'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_TDWVDAPostInvocationParameters(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_TDWVDAPostInvocationParameters(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TDWVDAAccountEntryClaims'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_TDWVDARevocationListEntryParm(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_TDWVDARevocationListEntryParm(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TDWVDAAccountEntryClaims'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_TDWVDAServiceEndpointEntryParm(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_TDWVDAServiceEndpointEntryParm(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'TDWVDAAccountEntryClaims'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_TDWVDASmartContractEntryClaims(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_TDWVDASmartContractEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'TDWVDAAccountEntryClaims'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_TDWVDASmartContractEntryContent(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_TDWVDASmartContractEntryContent(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'TDWVDAAccountEntryClaims'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_TDWVDASmartContractEntryEnvelope(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_TDWVDASmartContractEntryEnvelope(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TDWVDAAccountEntryClaims'.");
                
            }
            TRAClaim ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_TRAClaim(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_TRAClaim(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TRACredentialContent(TRACredentialContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent' to 'TDWVDAAccountEntryClaims'.");
                
            }
            TRACredentialContent ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_TRACredentialContent(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<TRACredentialContent>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_TRACredentialContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_TRACredentialContent(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TRACredentialEnvelope(TRACredentialEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelope' to 'TDWVDAAccountEntryClaims'.");
                
            }
            TRACredentialEnvelope ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_TRACredentialEnvelope(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<TRACredentialEnvelope>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_TRACredentialEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelope> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_TRACredentialEnvelope(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TRACredentialEnvelopeSeal(TRACredentialEnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelopeSeal' to 'TDWVDAAccountEntryClaims'.");
                
            }
            TRACredentialEnvelopeSeal ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_TRACredentialEnvelopeSeal(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_TRACredentialEnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelopeSeal> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_TRACredentialEnvelopeSeal(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TRACredentialMetadata(TRACredentialMetadata value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialMetadata' to 'TDWVDAAccountEntryClaims'.");
                
            }
            TRACredentialMetadata ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_TRACredentialMetadata(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<TRACredentialMetadata>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_TRACredentialMetadata()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialMetadata> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_TRACredentialMetadata(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TDWVDAAccountEntryClaims'.");
                
            }
            TRAKeyValuePair ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_TRAKeyValuePair(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_TRAKeyValuePair(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TDWVDAAccountEntryClaims'.");
                
            }
            TRACredentialType ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_TRACredentialType(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_TRACredentialType(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TDWVDAAccountEntryClaims'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_TRAEncryptionFlag(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_TRAEncryptionFlag(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TDWVDAAccountEntryClaims'.");
                
            }
            TRAServiceType ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_TRAServiceType(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_TRAServiceType(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TDWVDAAccountEntryClaims'.");
                
            }
            TRATrustLevel ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_TRATrustLevel(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_TRATrustLevel(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TDWVDAAccountEntryClaims'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_List_List_TRAKeyValuePair(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_List_List_TRAKeyValuePair(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'TDWVDAAccountEntryClaims'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'TDWVDAAccountEntryClaims'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_TDWVDASmartContractEntryContent_nullable(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_TDWVDASmartContractEntryContent_nullable(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TRACredentialContent_nullable(TRACredentialContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent?' to 'TDWVDAAccountEntryClaims'.");
                
            }
            TRACredentialContent? ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_TRACredentialContent_nullable(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<TRACredentialContent?>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_TRACredentialContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent?> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_TRACredentialContent_nullable(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TDWVDAAccountEntryContent'.");
                
            }
            bool ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_bool(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<bool>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_bool(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TDWVDAAccountEntryContent'.");
                
            }
            long ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_long(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<long>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_long(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TDWVDAAccountEntryContent intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TDWVDAAccountEntryContent.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TDWVDAAccountEntryContent");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_string(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<string>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_string(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TDWVDAAccountEntryContent'.");
                
            }
            List<string> ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_List_string(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_List_string(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TDWVDAAccountEntryContent'.");
                
            }
            List<TRAClaim> ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_List_TRAClaim(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_List_TRAClaim(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TDWVDAAccountEntryContent'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_List_TRAKeyValuePair(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_List_TRAKeyValuePair(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'TDWVDAAccountEntryContent'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_TDWVDAAccountEntryClaims(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_TDWVDAAccountEntryClaims(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                return (TDWVDAAccountEntryContent)value;
                
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'TDWVDAAccountEntryContent'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TDWVDAAccountEntryContent'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_TDWVDAIdentityRegistryEntryParm(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TDWVDAAccountEntryContent'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_TDWVDAPostInvocationParameters(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_TDWVDAPostInvocationParameters(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TDWVDAAccountEntryContent'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_TDWVDARevocationListEntryParm(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_TDWVDARevocationListEntryParm(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TDWVDAAccountEntryContent'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_TDWVDAServiceEndpointEntryParm(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_TDWVDAServiceEndpointEntryParm(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'TDWVDAAccountEntryContent'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_TDWVDASmartContractEntryClaims(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_TDWVDASmartContractEntryClaims(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'TDWVDAAccountEntryContent'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_TDWVDASmartContractEntryContent(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_TDWVDASmartContractEntryContent(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'TDWVDAAccountEntryContent'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_TDWVDASmartContractEntryEnvelope(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_TDWVDASmartContractEntryEnvelope(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TDWVDAAccountEntryContent'.");
                
            }
            TRAClaim ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_TRAClaim(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_TRAClaim(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TRACredentialContent(TRACredentialContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent' to 'TDWVDAAccountEntryContent'.");
                
            }
            TRACredentialContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_TRACredentialContent(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<TRACredentialContent>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_TRACredentialContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_TRACredentialContent(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TRACredentialEnvelope(TRACredentialEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelope' to 'TDWVDAAccountEntryContent'.");
                
            }
            TRACredentialEnvelope ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_TRACredentialEnvelope(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<TRACredentialEnvelope>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_TRACredentialEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelope> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_TRACredentialEnvelope(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TRACredentialEnvelopeSeal(TRACredentialEnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelopeSeal' to 'TDWVDAAccountEntryContent'.");
                
            }
            TRACredentialEnvelopeSeal ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_TRACredentialEnvelopeSeal(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_TRACredentialEnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelopeSeal> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_TRACredentialEnvelopeSeal(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TRACredentialMetadata(TRACredentialMetadata value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialMetadata' to 'TDWVDAAccountEntryContent'.");
                
            }
            TRACredentialMetadata ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_TRACredentialMetadata(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<TRACredentialMetadata>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_TRACredentialMetadata()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialMetadata> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_TRACredentialMetadata(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TDWVDAAccountEntryContent'.");
                
            }
            TRAKeyValuePair ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_TRAKeyValuePair(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_TRAKeyValuePair(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TDWVDAAccountEntryContent'.");
                
            }
            TRACredentialType ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_TRACredentialType(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_TRACredentialType(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TDWVDAAccountEntryContent'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_TRAEncryptionFlag(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_TRAEncryptionFlag(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TDWVDAAccountEntryContent'.");
                
            }
            TRAServiceType ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_TRAServiceType(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_TRAServiceType(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TDWVDAAccountEntryContent'.");
                
            }
            TRATrustLevel ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_TRATrustLevel(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_TRATrustLevel(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TDWVDAAccountEntryContent'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_List_List_TRAKeyValuePair(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_List_List_TRAKeyValuePair(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TDWVDAAccountEntryContent(value.Value);
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'TDWVDAAccountEntryContent'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_TDWVDASmartContractEntryContent_nullable(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_TDWVDASmartContractEntryContent_nullable(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TRACredentialContent_nullable(TRACredentialContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent?' to 'TDWVDAAccountEntryContent'.");
                
            }
            TRACredentialContent? ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_TRACredentialContent_nullable(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<TRACredentialContent?>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_TRACredentialContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent?> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_TRACredentialContent_nullable(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            bool ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_bool(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<bool>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_bool(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            long ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_long(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<long>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_long(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TDWVDAAccountEntryEnvelope intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TDWVDAAccountEntryEnvelope.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TDWVDAAccountEntryEnvelope");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_string(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<string>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_string(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            List<string> ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_List_string(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_List_string(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            List<TRAClaim> ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_List_TRAClaim(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_List_TRAClaim(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_List_TRAKeyValuePair(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_List_TRAKeyValuePair(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_TDWVDAAccountEntryClaims(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_TDWVDAAccountEntryClaims(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_TDWVDAAccountEntryContent(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_TDWVDAAccountEntryContent(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                return (TDWVDAAccountEntryEnvelope)value;
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_TDWVDAIdentityRegistryEntryParm(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_TDWVDAPostInvocationParameters(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_TDWVDAPostInvocationParameters(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_TDWVDARevocationListEntryParm(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_TDWVDARevocationListEntryParm(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_TDWVDAServiceEndpointEntryParm(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_TDWVDAServiceEndpointEntryParm(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_TDWVDASmartContractEntryClaims(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_TDWVDASmartContractEntryClaims(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_TDWVDASmartContractEntryContent(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_TDWVDASmartContractEntryContent(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_TDWVDASmartContractEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_TDWVDASmartContractEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            TRAClaim ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_TRAClaim(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_TRAClaim(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TRACredentialContent(TRACredentialContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            TRACredentialContent ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_TRACredentialContent(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<TRACredentialContent>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_TRACredentialContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_TRACredentialContent(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TRACredentialEnvelope(TRACredentialEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelope' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            TRACredentialEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_TRACredentialEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<TRACredentialEnvelope>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_TRACredentialEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelope> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_TRACredentialEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TRACredentialEnvelopeSeal(TRACredentialEnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelopeSeal' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            TRACredentialEnvelopeSeal ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_TRACredentialEnvelopeSeal(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_TRACredentialEnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelopeSeal> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_TRACredentialEnvelopeSeal(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TRACredentialMetadata(TRACredentialMetadata value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialMetadata' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            TRACredentialMetadata ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_TRACredentialMetadata(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<TRACredentialMetadata>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_TRACredentialMetadata()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialMetadata> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_TRACredentialMetadata(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            TRAKeyValuePair ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_TRAKeyValuePair(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_TRAKeyValuePair(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            TRACredentialType ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_TRACredentialType(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_TRACredentialType(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_TRAEncryptionFlag(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_TRAEncryptionFlag(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            TRAServiceType ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_TRAServiceType(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_TRAServiceType(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            TRATrustLevel ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_TRATrustLevel(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_TRATrustLevel(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_List_List_TRAKeyValuePair(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_List_List_TRAKeyValuePair(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_TDWVDASmartContractEntryContent_nullable(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_TDWVDASmartContractEntryContent_nullable(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TRACredentialContent_nullable(TRACredentialContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent?' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            TRACredentialContent? ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_TRACredentialContent_nullable(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<TRACredentialContent?>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_TRACredentialContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent?> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_TRACredentialContent_nullable(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            bool ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_bool(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<bool>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_bool(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            long ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_long(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<long>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_long(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TDWVDAIdentityRegistryEntryParm intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TDWVDAIdentityRegistryEntryParm.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TDWVDAIdentityRegistryEntryParm");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_string(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<string>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_string(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            List<string> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_List_string(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_List_string(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            List<TRAClaim> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_List_TRAClaim(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_List_TRAClaim(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_List_TRAKeyValuePair(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_List_TRAKeyValuePair(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TDWVDAAccountEntryClaims(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TDWVDAAccountEntryClaims(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TDWVDAAccountEntryContent(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TDWVDAAccountEntryContent(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TDWVDAAccountEntryEnvelope(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TDWVDAAccountEntryEnvelope(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                return (TDWVDAIdentityRegistryEntryParm)value;
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TDWVDAPostInvocationParameters(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TDWVDAPostInvocationParameters(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TDWVDARevocationListEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TDWVDARevocationListEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TDWVDAServiceEndpointEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TDWVDAServiceEndpointEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TDWVDASmartContractEntryClaims(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TDWVDASmartContractEntryClaims(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TDWVDASmartContractEntryContent(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TDWVDASmartContractEntryContent(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TDWVDASmartContractEntryEnvelope(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TDWVDASmartContractEntryEnvelope(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TRAClaim ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TRAClaim(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TRAClaim(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRACredentialContent(TRACredentialContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TRACredentialContent ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TRACredentialContent(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TRACredentialContent>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TRACredentialContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TRACredentialContent(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRACredentialEnvelope(TRACredentialEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelope' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TRACredentialEnvelope ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TRACredentialEnvelope(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TRACredentialEnvelope>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TRACredentialEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelope> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TRACredentialEnvelope(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRACredentialEnvelopeSeal(TRACredentialEnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelopeSeal' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TRACredentialEnvelopeSeal ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TRACredentialEnvelopeSeal(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TRACredentialEnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelopeSeal> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TRACredentialEnvelopeSeal(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRACredentialMetadata(TRACredentialMetadata value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialMetadata' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TRACredentialMetadata ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TRACredentialMetadata(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TRACredentialMetadata>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TRACredentialMetadata()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialMetadata> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TRACredentialMetadata(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TRAKeyValuePair ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TRAKeyValuePair(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TRAKeyValuePair(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TRACredentialType ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TRACredentialType(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TRACredentialType(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TRAEncryptionFlag(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TRAEncryptionFlag(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TRAServiceType ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TRAServiceType(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TRAServiceType(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TRATrustLevel ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TRATrustLevel(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TRATrustLevel(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_List_List_TRAKeyValuePair(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_List_List_TRAKeyValuePair(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TDWVDAAccountEntryContent_nullable(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TDWVDAAccountEntryContent_nullable(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TDWVDASmartContractEntryContent_nullable(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TDWVDASmartContractEntryContent_nullable(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRACredentialContent_nullable(TRACredentialContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent?' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TRACredentialContent? ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TRACredentialContent_nullable(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TRACredentialContent?>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TRACredentialContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent?> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TRACredentialContent_nullable(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TDWVDAPostInvocationParameters'.");
                
            }
            bool ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_bool(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<bool>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_bool(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TDWVDAPostInvocationParameters'.");
                
            }
            long ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_long(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<long>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_long(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TDWVDAPostInvocationParameters intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TDWVDAPostInvocationParameters.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TDWVDAPostInvocationParameters");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_string(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<string>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_string(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TDWVDAPostInvocationParameters'.");
                
            }
            List<string> ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_List_string(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_List_string(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TDWVDAPostInvocationParameters'.");
                
            }
            List<TRAClaim> ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_List_TRAClaim(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_List_TRAClaim(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TDWVDAPostInvocationParameters'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_List_TRAKeyValuePair(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_List_TRAKeyValuePair(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TDWVDAAccountEntryClaims(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TDWVDAAccountEntryClaims(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TDWVDAAccountEntryContent(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TDWVDAAccountEntryContent(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TDWVDAAccountEntryEnvelope(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TDWVDAAccountEntryEnvelope(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TDWVDAIdentityRegistryEntryParm(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                return (TDWVDAPostInvocationParameters)value;
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TDWVDARevocationListEntryParm(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TDWVDARevocationListEntryParm(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TDWVDAServiceEndpointEntryParm(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TDWVDAServiceEndpointEntryParm(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TDWVDASmartContractEntryClaims(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TDWVDASmartContractEntryClaims(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TDWVDASmartContractEntryContent(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TDWVDASmartContractEntryContent(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TDWVDASmartContractEntryEnvelope(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TDWVDASmartContractEntryEnvelope(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TRAClaim ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TRAClaim(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TRAClaim(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRACredentialContent(TRACredentialContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TRACredentialContent ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TRACredentialContent(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TRACredentialContent>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TRACredentialContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TRACredentialContent(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRACredentialEnvelope(TRACredentialEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelope' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TRACredentialEnvelope ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TRACredentialEnvelope(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TRACredentialEnvelope>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TRACredentialEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelope> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TRACredentialEnvelope(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRACredentialEnvelopeSeal(TRACredentialEnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelopeSeal' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TRACredentialEnvelopeSeal ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TRACredentialEnvelopeSeal(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TRACredentialEnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelopeSeal> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TRACredentialEnvelopeSeal(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRACredentialMetadata(TRACredentialMetadata value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialMetadata' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TRACredentialMetadata ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TRACredentialMetadata(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TRACredentialMetadata>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TRACredentialMetadata()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialMetadata> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TRACredentialMetadata(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TRAKeyValuePair ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TRAKeyValuePair(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TRAKeyValuePair(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TRACredentialType ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TRACredentialType(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TRACredentialType(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TRAEncryptionFlag(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TRAEncryptionFlag(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TRAServiceType ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TRAServiceType(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TRAServiceType(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TRATrustLevel ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TRATrustLevel(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TRATrustLevel(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TDWVDAPostInvocationParameters'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_List_List_TRAKeyValuePair(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_List_List_TRAKeyValuePair(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TDWVDAAccountEntryContent_nullable(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TDWVDAAccountEntryContent_nullable(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TDWVDASmartContractEntryContent_nullable(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TDWVDASmartContractEntryContent_nullable(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRACredentialContent_nullable(TRACredentialContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent?' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TRACredentialContent? ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TRACredentialContent_nullable(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TRACredentialContent?>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TRACredentialContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent?> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TRACredentialContent_nullable(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TDWVDARevocationListEntryParm'.");
                
            }
            bool ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_bool(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<bool>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_bool(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TDWVDARevocationListEntryParm'.");
                
            }
            long ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_long(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<long>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_long(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TDWVDARevocationListEntryParm intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TDWVDARevocationListEntryParm.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TDWVDARevocationListEntryParm");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_string(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<string>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_string(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TDWVDARevocationListEntryParm'.");
                
            }
            List<string> ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_List_string(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_List_string(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TDWVDARevocationListEntryParm'.");
                
            }
            List<TRAClaim> ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_List_TRAClaim(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_List_TRAClaim(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TDWVDARevocationListEntryParm'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_List_TRAKeyValuePair(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_List_TRAKeyValuePair(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TDWVDAAccountEntryClaims(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TDWVDAAccountEntryClaims(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TDWVDAAccountEntryContent(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TDWVDAAccountEntryContent(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TDWVDAAccountEntryEnvelope(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TDWVDAAccountEntryEnvelope(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TDWVDAIdentityRegistryEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TDWVDAPostInvocationParameters(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TDWVDAPostInvocationParameters(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                return (TDWVDARevocationListEntryParm)value;
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TDWVDAServiceEndpointEntryParm(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TDWVDAServiceEndpointEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TDWVDASmartContractEntryClaims(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TDWVDASmartContractEntryClaims(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TDWVDASmartContractEntryContent(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TDWVDASmartContractEntryContent(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TDWVDASmartContractEntryEnvelope(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TDWVDASmartContractEntryEnvelope(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TRAClaim ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TRAClaim(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TRAClaim(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRACredentialContent(TRACredentialContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TRACredentialContent ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TRACredentialContent(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TRACredentialContent>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TRACredentialContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TRACredentialContent(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRACredentialEnvelope(TRACredentialEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelope' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TRACredentialEnvelope ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TRACredentialEnvelope(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TRACredentialEnvelope>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TRACredentialEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelope> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TRACredentialEnvelope(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRACredentialEnvelopeSeal(TRACredentialEnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelopeSeal' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TRACredentialEnvelopeSeal ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TRACredentialEnvelopeSeal(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TRACredentialEnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelopeSeal> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TRACredentialEnvelopeSeal(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRACredentialMetadata(TRACredentialMetadata value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialMetadata' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TRACredentialMetadata ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TRACredentialMetadata(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TRACredentialMetadata>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TRACredentialMetadata()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialMetadata> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TRACredentialMetadata(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TRAKeyValuePair ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TRAKeyValuePair(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TRAKeyValuePair(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TRACredentialType ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TRACredentialType(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TRACredentialType(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TRAEncryptionFlag(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TRAEncryptionFlag(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TRAServiceType ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TRAServiceType(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TRAServiceType(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TRATrustLevel ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TRATrustLevel(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TRATrustLevel(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TDWVDARevocationListEntryParm'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_List_List_TRAKeyValuePair(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_List_List_TRAKeyValuePair(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TDWVDAAccountEntryContent_nullable(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TDWVDAAccountEntryContent_nullable(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TDWVDASmartContractEntryContent_nullable(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TDWVDASmartContractEntryContent_nullable(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRACredentialContent_nullable(TRACredentialContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent?' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TRACredentialContent? ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TRACredentialContent_nullable(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TRACredentialContent?>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TRACredentialContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent?> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TRACredentialContent_nullable(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            bool ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_bool(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<bool>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_bool(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            long ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_long(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<long>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_long(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TDWVDAServiceEndpointEntryParm intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TDWVDAServiceEndpointEntryParm.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TDWVDAServiceEndpointEntryParm");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_string(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<string>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_string(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            List<string> ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_List_string(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_List_string(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            List<TRAClaim> ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_List_TRAClaim(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_List_TRAClaim(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_List_TRAKeyValuePair(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_List_TRAKeyValuePair(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TDWVDAAccountEntryClaims(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TDWVDAAccountEntryClaims(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TDWVDAAccountEntryContent(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TDWVDAAccountEntryContent(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TDWVDAAccountEntryEnvelope(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TDWVDAAccountEntryEnvelope(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TDWVDAIdentityRegistryEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TDWVDAPostInvocationParameters(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TDWVDAPostInvocationParameters(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TDWVDARevocationListEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TDWVDARevocationListEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                return (TDWVDAServiceEndpointEntryParm)value;
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TDWVDASmartContractEntryClaims(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TDWVDASmartContractEntryClaims(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TDWVDASmartContractEntryContent(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TDWVDASmartContractEntryContent(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TDWVDASmartContractEntryEnvelope(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TDWVDASmartContractEntryEnvelope(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TRAClaim ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TRAClaim(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TRAClaim(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRACredentialContent(TRACredentialContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TRACredentialContent ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TRACredentialContent(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TRACredentialContent>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TRACredentialContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TRACredentialContent(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRACredentialEnvelope(TRACredentialEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelope' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TRACredentialEnvelope ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TRACredentialEnvelope(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TRACredentialEnvelope>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TRACredentialEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelope> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TRACredentialEnvelope(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRACredentialEnvelopeSeal(TRACredentialEnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelopeSeal' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TRACredentialEnvelopeSeal ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TRACredentialEnvelopeSeal(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TRACredentialEnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelopeSeal> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TRACredentialEnvelopeSeal(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRACredentialMetadata(TRACredentialMetadata value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialMetadata' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TRACredentialMetadata ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TRACredentialMetadata(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TRACredentialMetadata>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TRACredentialMetadata()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialMetadata> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TRACredentialMetadata(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TRAKeyValuePair ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TRAKeyValuePair(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TRAKeyValuePair(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TRACredentialType ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TRACredentialType(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TRACredentialType(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TRAEncryptionFlag(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TRAEncryptionFlag(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TRAServiceType ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TRAServiceType(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TRAServiceType(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TRATrustLevel ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TRATrustLevel(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TRATrustLevel(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_List_List_TRAKeyValuePair(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_List_List_TRAKeyValuePair(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TDWVDAAccountEntryContent_nullable(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TDWVDAAccountEntryContent_nullable(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TDWVDASmartContractEntryContent_nullable(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TDWVDASmartContractEntryContent_nullable(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRACredentialContent_nullable(TRACredentialContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent?' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TRACredentialContent? ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TRACredentialContent_nullable(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TRACredentialContent?>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TRACredentialContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent?> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TRACredentialContent_nullable(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            bool ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_bool(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<bool>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_bool(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            long ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_long(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<long>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_long(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TDWVDASmartContractEntryClaims intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TDWVDASmartContractEntryClaims.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TDWVDASmartContractEntryClaims");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_string(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<string>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_string(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            List<string> ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_List_string(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_List_string(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            List<TRAClaim> ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_List_TRAClaim(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_List_TRAClaim(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_List_TRAKeyValuePair(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_List_TRAKeyValuePair(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_TDWVDAAccountEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_TDWVDAAccountEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_TDWVDAAccountEntryContent(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_TDWVDAAccountEntryContent(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_TDWVDAAccountEntryEnvelope(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_TDWVDAAccountEntryEnvelope(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_TDWVDAIdentityRegistryEntryParm(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_TDWVDAPostInvocationParameters(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_TDWVDAPostInvocationParameters(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_TDWVDARevocationListEntryParm(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_TDWVDARevocationListEntryParm(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_TDWVDAServiceEndpointEntryParm(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_TDWVDAServiceEndpointEntryParm(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                return (TDWVDASmartContractEntryClaims)value;
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            TRAClaim ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_TRAClaim(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_TRAClaim(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TRACredentialContent(TRACredentialContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            TRACredentialContent ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_TRACredentialContent(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<TRACredentialContent>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_TRACredentialContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_TRACredentialContent(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TRACredentialEnvelope(TRACredentialEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelope' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            TRACredentialEnvelope ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_TRACredentialEnvelope(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<TRACredentialEnvelope>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_TRACredentialEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelope> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_TRACredentialEnvelope(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TRACredentialEnvelopeSeal(TRACredentialEnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelopeSeal' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            TRACredentialEnvelopeSeal ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_TRACredentialEnvelopeSeal(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_TRACredentialEnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelopeSeal> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_TRACredentialEnvelopeSeal(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TRACredentialMetadata(TRACredentialMetadata value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialMetadata' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            TRACredentialMetadata ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_TRACredentialMetadata(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<TRACredentialMetadata>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_TRACredentialMetadata()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialMetadata> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_TRACredentialMetadata(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            TRAKeyValuePair ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_TRAKeyValuePair(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_TRAKeyValuePair(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            TRACredentialType ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_TRACredentialType(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_TRACredentialType(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_TRAEncryptionFlag(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_TRAEncryptionFlag(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            TRAServiceType ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_TRAServiceType(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_TRAServiceType(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            TRATrustLevel ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_TRATrustLevel(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_TRATrustLevel(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_List_List_TRAKeyValuePair(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_List_List_TRAKeyValuePair(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_TDWVDAAccountEntryContent_nullable(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_TDWVDAAccountEntryContent_nullable(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TRACredentialContent_nullable(TRACredentialContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent?' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            TRACredentialContent? ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_TRACredentialContent_nullable(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<TRACredentialContent?>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_TRACredentialContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent?> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_TRACredentialContent_nullable(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TDWVDASmartContractEntryContent'.");
                
            }
            bool ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_bool(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<bool>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_bool(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TDWVDASmartContractEntryContent'.");
                
            }
            long ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_long(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<long>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_long(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TDWVDASmartContractEntryContent intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TDWVDASmartContractEntryContent.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TDWVDASmartContractEntryContent");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_string(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<string>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_string(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TDWVDASmartContractEntryContent'.");
                
            }
            List<string> ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_List_string(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_List_string(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TDWVDASmartContractEntryContent'.");
                
            }
            List<TRAClaim> ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_List_TRAClaim(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_List_TRAClaim(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TDWVDASmartContractEntryContent'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_List_TRAKeyValuePair(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_List_TRAKeyValuePair(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'TDWVDASmartContractEntryContent'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_TDWVDAAccountEntryClaims(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_TDWVDAAccountEntryClaims(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'TDWVDASmartContractEntryContent'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_TDWVDAAccountEntryContent(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_TDWVDAAccountEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'TDWVDASmartContractEntryContent'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_TDWVDAAccountEntryEnvelope(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_TDWVDAAccountEntryEnvelope(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TDWVDASmartContractEntryContent'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_TDWVDAIdentityRegistryEntryParm(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TDWVDASmartContractEntryContent'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_TDWVDAPostInvocationParameters(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_TDWVDAPostInvocationParameters(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TDWVDASmartContractEntryContent'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_TDWVDARevocationListEntryParm(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_TDWVDARevocationListEntryParm(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TDWVDASmartContractEntryContent'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_TDWVDAServiceEndpointEntryParm(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_TDWVDAServiceEndpointEntryParm(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'TDWVDASmartContractEntryContent'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                return (TDWVDASmartContractEntryContent)value;
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'TDWVDASmartContractEntryContent'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TDWVDASmartContractEntryContent'.");
                
            }
            TRAClaim ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_TRAClaim(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_TRAClaim(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TRACredentialContent(TRACredentialContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent' to 'TDWVDASmartContractEntryContent'.");
                
            }
            TRACredentialContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_TRACredentialContent(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<TRACredentialContent>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_TRACredentialContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_TRACredentialContent(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TRACredentialEnvelope(TRACredentialEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelope' to 'TDWVDASmartContractEntryContent'.");
                
            }
            TRACredentialEnvelope ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_TRACredentialEnvelope(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<TRACredentialEnvelope>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_TRACredentialEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelope> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_TRACredentialEnvelope(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TRACredentialEnvelopeSeal(TRACredentialEnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelopeSeal' to 'TDWVDASmartContractEntryContent'.");
                
            }
            TRACredentialEnvelopeSeal ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_TRACredentialEnvelopeSeal(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_TRACredentialEnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelopeSeal> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_TRACredentialEnvelopeSeal(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TRACredentialMetadata(TRACredentialMetadata value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialMetadata' to 'TDWVDASmartContractEntryContent'.");
                
            }
            TRACredentialMetadata ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_TRACredentialMetadata(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<TRACredentialMetadata>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_TRACredentialMetadata()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialMetadata> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_TRACredentialMetadata(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TDWVDASmartContractEntryContent'.");
                
            }
            TRAKeyValuePair ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_TRAKeyValuePair(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_TRAKeyValuePair(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TDWVDASmartContractEntryContent'.");
                
            }
            TRACredentialType ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_TRACredentialType(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_TRACredentialType(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TDWVDASmartContractEntryContent'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_TRAEncryptionFlag(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_TRAEncryptionFlag(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TDWVDASmartContractEntryContent'.");
                
            }
            TRAServiceType ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_TRAServiceType(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_TRAServiceType(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TDWVDASmartContractEntryContent'.");
                
            }
            TRATrustLevel ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_TRATrustLevel(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_TRATrustLevel(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TDWVDASmartContractEntryContent'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_List_List_TRAKeyValuePair(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_List_List_TRAKeyValuePair(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'TDWVDASmartContractEntryContent'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_TDWVDAAccountEntryContent_nullable(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_TDWVDAAccountEntryContent_nullable(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TDWVDASmartContractEntryContent(value.Value);
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TRACredentialContent_nullable(TRACredentialContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent?' to 'TDWVDASmartContractEntryContent'.");
                
            }
            TRACredentialContent? ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_TRACredentialContent_nullable(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<TRACredentialContent?>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_TRACredentialContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent?> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_TRACredentialContent_nullable(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            bool ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_bool(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<bool>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_bool(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            long ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_long(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<long>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_long(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TDWVDASmartContractEntryEnvelope intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TDWVDASmartContractEntryEnvelope.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TDWVDASmartContractEntryEnvelope");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_string(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<string>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_string(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            List<string> ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_List_string(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_List_string(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            List<TRAClaim> ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_List_TRAClaim(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_List_TRAClaim(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_List_TRAKeyValuePair(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_List_TRAKeyValuePair(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_TDWVDAAccountEntryClaims(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_TDWVDAAccountEntryClaims(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_TDWVDAAccountEntryContent(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_TDWVDAAccountEntryContent(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_TDWVDAAccountEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_TDWVDAAccountEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_TDWVDAIdentityRegistryEntryParm(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_TDWVDAPostInvocationParameters(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_TDWVDAPostInvocationParameters(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_TDWVDARevocationListEntryParm(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_TDWVDARevocationListEntryParm(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_TDWVDAServiceEndpointEntryParm(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_TDWVDAServiceEndpointEntryParm(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                return (TDWVDASmartContractEntryEnvelope)value;
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            TRAClaim ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_TRAClaim(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_TRAClaim(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TRACredentialContent(TRACredentialContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            TRACredentialContent ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_TRACredentialContent(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<TRACredentialContent>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_TRACredentialContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_TRACredentialContent(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TRACredentialEnvelope(TRACredentialEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelope' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            TRACredentialEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_TRACredentialEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<TRACredentialEnvelope>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_TRACredentialEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelope> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_TRACredentialEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TRACredentialEnvelopeSeal(TRACredentialEnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelopeSeal' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            TRACredentialEnvelopeSeal ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_TRACredentialEnvelopeSeal(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_TRACredentialEnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelopeSeal> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_TRACredentialEnvelopeSeal(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TRACredentialMetadata(TRACredentialMetadata value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialMetadata' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            TRACredentialMetadata ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_TRACredentialMetadata(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<TRACredentialMetadata>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_TRACredentialMetadata()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialMetadata> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_TRACredentialMetadata(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            TRAKeyValuePair ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_TRAKeyValuePair(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_TRAKeyValuePair(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            TRACredentialType ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_TRACredentialType(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_TRACredentialType(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_TRAEncryptionFlag(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_TRAEncryptionFlag(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            TRAServiceType ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_TRAServiceType(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_TRAServiceType(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            TRATrustLevel ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_TRATrustLevel(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_TRATrustLevel(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_List_List_TRAKeyValuePair(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_List_List_TRAKeyValuePair(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_TDWVDAAccountEntryContent_nullable(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_TDWVDAAccountEntryContent_nullable(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TRACredentialContent_nullable(TRACredentialContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent?' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            TRACredentialContent? ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_TRACredentialContent_nullable(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<TRACredentialContent?>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_TRACredentialContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent?> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_TRACredentialContent_nullable(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TRAClaim'.");
                
            }
            bool ITypeConverter<TRAClaim>.ConvertTo_bool(TRAClaim value)
            {
                return TypeConverter<bool>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TRAClaim>.Enumerate_bool(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TRAClaim'.");
                
            }
            long ITypeConverter<TRAClaim>.ConvertTo_long(TRAClaim value)
            {
                return TypeConverter<long>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TRAClaim>.Enumerate_long(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TRAClaim intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TRAClaim.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TRAClaim");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TRAClaim>.ConvertTo_string(TRAClaim value)
            {
                return TypeConverter<string>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TRAClaim>.Enumerate_string(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TRAClaim'.");
                
            }
            List<string> ITypeConverter<TRAClaim>.ConvertTo_List_string(TRAClaim value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TRAClaim>.Enumerate_List_string(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TRAClaim'.");
                
            }
            List<TRAClaim> ITypeConverter<TRAClaim>.ConvertTo_List_TRAClaim(TRAClaim value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TRAClaim>.Enumerate_List_TRAClaim(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TRAClaim'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TRAClaim>.ConvertTo_List_TRAKeyValuePair(TRAClaim value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TRAClaim>.Enumerate_List_TRAKeyValuePair(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'TRAClaim'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<TRAClaim>.ConvertTo_TDWVDAAccountEntryClaims(TRAClaim value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<TRAClaim>.Enumerate_TDWVDAAccountEntryClaims(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'TRAClaim'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<TRAClaim>.ConvertTo_TDWVDAAccountEntryContent(TRAClaim value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<TRAClaim>.Enumerate_TDWVDAAccountEntryContent(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'TRAClaim'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TRAClaim>.ConvertTo_TDWVDAAccountEntryEnvelope(TRAClaim value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<TRAClaim>.Enumerate_TDWVDAAccountEntryEnvelope(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TRAClaim'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TRAClaim>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TRAClaim value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TRAClaim>.Enumerate_TDWVDAIdentityRegistryEntryParm(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TRAClaim'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TRAClaim>.ConvertTo_TDWVDAPostInvocationParameters(TRAClaim value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TRAClaim>.Enumerate_TDWVDAPostInvocationParameters(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TRAClaim'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TRAClaim>.ConvertTo_TDWVDARevocationListEntryParm(TRAClaim value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TRAClaim>.Enumerate_TDWVDARevocationListEntryParm(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TRAClaim'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TRAClaim>.ConvertTo_TDWVDAServiceEndpointEntryParm(TRAClaim value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TRAClaim>.Enumerate_TDWVDAServiceEndpointEntryParm(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'TRAClaim'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TRAClaim>.ConvertTo_TDWVDASmartContractEntryClaims(TRAClaim value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<TRAClaim>.Enumerate_TDWVDASmartContractEntryClaims(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'TRAClaim'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<TRAClaim>.ConvertTo_TDWVDASmartContractEntryContent(TRAClaim value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<TRAClaim>.Enumerate_TDWVDASmartContractEntryContent(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'TRAClaim'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TRAClaim>.ConvertTo_TDWVDASmartContractEntryEnvelope(TRAClaim value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<TRAClaim>.Enumerate_TDWVDASmartContractEntryEnvelope(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                return (TRAClaim)value;
                
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertTo_TRAClaim(TRAClaim value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TRAClaim>.Enumerate_TRAClaim(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TRACredentialContent(TRACredentialContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent' to 'TRAClaim'.");
                
            }
            TRACredentialContent ITypeConverter<TRAClaim>.ConvertTo_TRACredentialContent(TRAClaim value)
            {
                return TypeConverter<TRACredentialContent>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TRACredentialContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent> ITypeConverter<TRAClaim>.Enumerate_TRACredentialContent(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TRACredentialEnvelope(TRACredentialEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelope' to 'TRAClaim'.");
                
            }
            TRACredentialEnvelope ITypeConverter<TRAClaim>.ConvertTo_TRACredentialEnvelope(TRAClaim value)
            {
                return TypeConverter<TRACredentialEnvelope>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TRACredentialEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelope> ITypeConverter<TRAClaim>.Enumerate_TRACredentialEnvelope(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TRACredentialEnvelopeSeal(TRACredentialEnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelopeSeal' to 'TRAClaim'.");
                
            }
            TRACredentialEnvelopeSeal ITypeConverter<TRAClaim>.ConvertTo_TRACredentialEnvelopeSeal(TRAClaim value)
            {
                return TypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TRACredentialEnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelopeSeal> ITypeConverter<TRAClaim>.Enumerate_TRACredentialEnvelopeSeal(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TRACredentialMetadata(TRACredentialMetadata value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialMetadata' to 'TRAClaim'.");
                
            }
            TRACredentialMetadata ITypeConverter<TRAClaim>.ConvertTo_TRACredentialMetadata(TRAClaim value)
            {
                return TypeConverter<TRACredentialMetadata>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TRACredentialMetadata()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialMetadata> ITypeConverter<TRAClaim>.Enumerate_TRACredentialMetadata(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TRAClaim'.");
                
            }
            TRAKeyValuePair ITypeConverter<TRAClaim>.ConvertTo_TRAKeyValuePair(TRAClaim value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TRAClaim>.Enumerate_TRAKeyValuePair(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TRAClaim'.");
                
            }
            TRACredentialType ITypeConverter<TRAClaim>.ConvertTo_TRACredentialType(TRAClaim value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TRAClaim>.Enumerate_TRACredentialType(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TRAClaim'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TRAClaim>.ConvertTo_TRAEncryptionFlag(TRAClaim value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TRAClaim>.Enumerate_TRAEncryptionFlag(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TRAClaim'.");
                
            }
            TRAServiceType ITypeConverter<TRAClaim>.ConvertTo_TRAServiceType(TRAClaim value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TRAClaim>.Enumerate_TRAServiceType(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TRAClaim'.");
                
            }
            TRATrustLevel ITypeConverter<TRAClaim>.ConvertTo_TRATrustLevel(TRAClaim value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TRAClaim>.Enumerate_TRATrustLevel(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TRAClaim'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TRAClaim>.ConvertTo_List_List_TRAKeyValuePair(TRAClaim value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TRAClaim>.Enumerate_List_List_TRAKeyValuePair(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'TRAClaim'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<TRAClaim>.ConvertTo_TDWVDAAccountEntryContent_nullable(TRAClaim value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<TRAClaim>.Enumerate_TDWVDAAccountEntryContent_nullable(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'TRAClaim'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TRAClaim>.ConvertTo_TDWVDASmartContractEntryContent_nullable(TRAClaim value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<TRAClaim>.Enumerate_TDWVDASmartContractEntryContent_nullable(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TRACredentialContent_nullable(TRACredentialContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent?' to 'TRAClaim'.");
                
            }
            TRACredentialContent? ITypeConverter<TRAClaim>.ConvertTo_TRACredentialContent_nullable(TRAClaim value)
            {
                return TypeConverter<TRACredentialContent?>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TRACredentialContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent?> ITypeConverter<TRAClaim>.Enumerate_TRACredentialContent_nullable(TRAClaim value)
            {
                
                yield break;
            }
            TRACredentialContent ITypeConverter<TRACredentialContent>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TRACredentialContent'.");
                
            }
            bool ITypeConverter<TRACredentialContent>.ConvertTo_bool(TRACredentialContent value)
            {
                return TypeConverter<bool>.ConvertFrom_TRACredentialContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TRACredentialContent>.Enumerate_bool(TRACredentialContent value)
            {
                
                yield break;
            }
            TRACredentialContent ITypeConverter<TRACredentialContent>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TRACredentialContent'.");
                
            }
            long ITypeConverter<TRACredentialContent>.ConvertTo_long(TRACredentialContent value)
            {
                return TypeConverter<long>.ConvertFrom_TRACredentialContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TRACredentialContent>.Enumerate_long(TRACredentialContent value)
            {
                
                yield break;
            }
            TRACredentialContent ITypeConverter<TRACredentialContent>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TRACredentialContent intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TRACredentialContent.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TRACredentialContent");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TRACredentialContent>.ConvertTo_string(TRACredentialContent value)
            {
                return TypeConverter<string>.ConvertFrom_TRACredentialContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TRACredentialContent>.Enumerate_string(TRACredentialContent value)
            {
                
                yield break;
            }
            TRACredentialContent ITypeConverter<TRACredentialContent>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TRACredentialContent'.");
                
            }
            List<string> ITypeConverter<TRACredentialContent>.ConvertTo_List_string(TRACredentialContent value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TRACredentialContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TRACredentialContent>.Enumerate_List_string(TRACredentialContent value)
            {
                
                yield break;
            }
            TRACredentialContent ITypeConverter<TRACredentialContent>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TRACredentialContent'.");
                
            }
            List<TRAClaim> ITypeConverter<TRACredentialContent>.ConvertTo_List_TRAClaim(TRACredentialContent value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TRACredentialContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TRACredentialContent>.Enumerate_List_TRAClaim(TRACredentialContent value)
            {
                
                yield break;
            }
            TRACredentialContent ITypeConverter<TRACredentialContent>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TRACredentialContent'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TRACredentialContent>.ConvertTo_List_TRAKeyValuePair(TRACredentialContent value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRACredentialContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TRACredentialContent>.Enumerate_List_TRAKeyValuePair(TRACredentialContent value)
            {
                
                yield break;
            }
            TRACredentialContent ITypeConverter<TRACredentialContent>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'TRACredentialContent'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<TRACredentialContent>.ConvertTo_TDWVDAAccountEntryClaims(TRACredentialContent value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TRACredentialContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<TRACredentialContent>.Enumerate_TDWVDAAccountEntryClaims(TRACredentialContent value)
            {
                
                yield break;
            }
            TRACredentialContent ITypeConverter<TRACredentialContent>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'TRACredentialContent'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<TRACredentialContent>.ConvertTo_TDWVDAAccountEntryContent(TRACredentialContent value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TRACredentialContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<TRACredentialContent>.Enumerate_TDWVDAAccountEntryContent(TRACredentialContent value)
            {
                
                yield break;
            }
            TRACredentialContent ITypeConverter<TRACredentialContent>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'TRACredentialContent'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TRACredentialContent>.ConvertTo_TDWVDAAccountEntryEnvelope(TRACredentialContent value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TRACredentialContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<TRACredentialContent>.Enumerate_TDWVDAAccountEntryEnvelope(TRACredentialContent value)
            {
                
                yield break;
            }
            TRACredentialContent ITypeConverter<TRACredentialContent>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TRACredentialContent'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TRACredentialContent>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TRACredentialContent value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRACredentialContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TRACredentialContent>.Enumerate_TDWVDAIdentityRegistryEntryParm(TRACredentialContent value)
            {
                
                yield break;
            }
            TRACredentialContent ITypeConverter<TRACredentialContent>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TRACredentialContent'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TRACredentialContent>.ConvertTo_TDWVDAPostInvocationParameters(TRACredentialContent value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRACredentialContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TRACredentialContent>.Enumerate_TDWVDAPostInvocationParameters(TRACredentialContent value)
            {
                
                yield break;
            }
            TRACredentialContent ITypeConverter<TRACredentialContent>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TRACredentialContent'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TRACredentialContent>.ConvertTo_TDWVDARevocationListEntryParm(TRACredentialContent value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRACredentialContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TRACredentialContent>.Enumerate_TDWVDARevocationListEntryParm(TRACredentialContent value)
            {
                
                yield break;
            }
            TRACredentialContent ITypeConverter<TRACredentialContent>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TRACredentialContent'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TRACredentialContent>.ConvertTo_TDWVDAServiceEndpointEntryParm(TRACredentialContent value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRACredentialContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TRACredentialContent>.Enumerate_TDWVDAServiceEndpointEntryParm(TRACredentialContent value)
            {
                
                yield break;
            }
            TRACredentialContent ITypeConverter<TRACredentialContent>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'TRACredentialContent'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TRACredentialContent>.ConvertTo_TDWVDASmartContractEntryClaims(TRACredentialContent value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TRACredentialContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<TRACredentialContent>.Enumerate_TDWVDASmartContractEntryClaims(TRACredentialContent value)
            {
                
                yield break;
            }
            TRACredentialContent ITypeConverter<TRACredentialContent>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'TRACredentialContent'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<TRACredentialContent>.ConvertTo_TDWVDASmartContractEntryContent(TRACredentialContent value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TRACredentialContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<TRACredentialContent>.Enumerate_TDWVDASmartContractEntryContent(TRACredentialContent value)
            {
                
                yield break;
            }
            TRACredentialContent ITypeConverter<TRACredentialContent>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'TRACredentialContent'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TRACredentialContent>.ConvertTo_TDWVDASmartContractEntryEnvelope(TRACredentialContent value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TRACredentialContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<TRACredentialContent>.Enumerate_TDWVDASmartContractEntryEnvelope(TRACredentialContent value)
            {
                
                yield break;
            }
            TRACredentialContent ITypeConverter<TRACredentialContent>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TRACredentialContent'.");
                
            }
            TRAClaim ITypeConverter<TRACredentialContent>.ConvertTo_TRAClaim(TRACredentialContent value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TRACredentialContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TRACredentialContent>.Enumerate_TRAClaim(TRACredentialContent value)
            {
                
                yield break;
            }
            TRACredentialContent ITypeConverter<TRACredentialContent>.ConvertFrom_TRACredentialContent(TRACredentialContent value)
            {
                
                return (TRACredentialContent)value;
                
            }
            TRACredentialContent ITypeConverter<TRACredentialContent>.ConvertTo_TRACredentialContent(TRACredentialContent value)
            {
                return TypeConverter<TRACredentialContent>.ConvertFrom_TRACredentialContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent>.GetConversionActionTo_TRACredentialContent()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent> ITypeConverter<TRACredentialContent>.Enumerate_TRACredentialContent(TRACredentialContent value)
            {
                
                yield break;
            }
            TRACredentialContent ITypeConverter<TRACredentialContent>.ConvertFrom_TRACredentialEnvelope(TRACredentialEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelope' to 'TRACredentialContent'.");
                
            }
            TRACredentialEnvelope ITypeConverter<TRACredentialContent>.ConvertTo_TRACredentialEnvelope(TRACredentialContent value)
            {
                return TypeConverter<TRACredentialEnvelope>.ConvertFrom_TRACredentialContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent>.GetConversionActionTo_TRACredentialEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelope> ITypeConverter<TRACredentialContent>.Enumerate_TRACredentialEnvelope(TRACredentialContent value)
            {
                
                yield break;
            }
            TRACredentialContent ITypeConverter<TRACredentialContent>.ConvertFrom_TRACredentialEnvelopeSeal(TRACredentialEnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelopeSeal' to 'TRACredentialContent'.");
                
            }
            TRACredentialEnvelopeSeal ITypeConverter<TRACredentialContent>.ConvertTo_TRACredentialEnvelopeSeal(TRACredentialContent value)
            {
                return TypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_TRACredentialContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent>.GetConversionActionTo_TRACredentialEnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelopeSeal> ITypeConverter<TRACredentialContent>.Enumerate_TRACredentialEnvelopeSeal(TRACredentialContent value)
            {
                
                yield break;
            }
            TRACredentialContent ITypeConverter<TRACredentialContent>.ConvertFrom_TRACredentialMetadata(TRACredentialMetadata value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialMetadata' to 'TRACredentialContent'.");
                
            }
            TRACredentialMetadata ITypeConverter<TRACredentialContent>.ConvertTo_TRACredentialMetadata(TRACredentialContent value)
            {
                return TypeConverter<TRACredentialMetadata>.ConvertFrom_TRACredentialContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent>.GetConversionActionTo_TRACredentialMetadata()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialMetadata> ITypeConverter<TRACredentialContent>.Enumerate_TRACredentialMetadata(TRACredentialContent value)
            {
                
                yield break;
            }
            TRACredentialContent ITypeConverter<TRACredentialContent>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TRACredentialContent'.");
                
            }
            TRAKeyValuePair ITypeConverter<TRACredentialContent>.ConvertTo_TRAKeyValuePair(TRACredentialContent value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TRACredentialContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TRACredentialContent>.Enumerate_TRAKeyValuePair(TRACredentialContent value)
            {
                
                yield break;
            }
            TRACredentialContent ITypeConverter<TRACredentialContent>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TRACredentialContent'.");
                
            }
            TRACredentialType ITypeConverter<TRACredentialContent>.ConvertTo_TRACredentialType(TRACredentialContent value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TRACredentialContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TRACredentialContent>.Enumerate_TRACredentialType(TRACredentialContent value)
            {
                
                yield break;
            }
            TRACredentialContent ITypeConverter<TRACredentialContent>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TRACredentialContent'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TRACredentialContent>.ConvertTo_TRAEncryptionFlag(TRACredentialContent value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TRACredentialContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TRACredentialContent>.Enumerate_TRAEncryptionFlag(TRACredentialContent value)
            {
                
                yield break;
            }
            TRACredentialContent ITypeConverter<TRACredentialContent>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TRACredentialContent'.");
                
            }
            TRAServiceType ITypeConverter<TRACredentialContent>.ConvertTo_TRAServiceType(TRACredentialContent value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TRACredentialContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TRACredentialContent>.Enumerate_TRAServiceType(TRACredentialContent value)
            {
                
                yield break;
            }
            TRACredentialContent ITypeConverter<TRACredentialContent>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TRACredentialContent'.");
                
            }
            TRATrustLevel ITypeConverter<TRACredentialContent>.ConvertTo_TRATrustLevel(TRACredentialContent value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TRACredentialContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TRACredentialContent>.Enumerate_TRATrustLevel(TRACredentialContent value)
            {
                
                yield break;
            }
            TRACredentialContent ITypeConverter<TRACredentialContent>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TRACredentialContent'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TRACredentialContent>.ConvertTo_List_List_TRAKeyValuePair(TRACredentialContent value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRACredentialContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TRACredentialContent>.Enumerate_List_List_TRAKeyValuePair(TRACredentialContent value)
            {
                
                yield break;
            }
            TRACredentialContent ITypeConverter<TRACredentialContent>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'TRACredentialContent'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<TRACredentialContent>.ConvertTo_TDWVDAAccountEntryContent_nullable(TRACredentialContent value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TRACredentialContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<TRACredentialContent>.Enumerate_TDWVDAAccountEntryContent_nullable(TRACredentialContent value)
            {
                
                yield break;
            }
            TRACredentialContent ITypeConverter<TRACredentialContent>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'TRACredentialContent'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TRACredentialContent>.ConvertTo_TDWVDASmartContractEntryContent_nullable(TRACredentialContent value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TRACredentialContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<TRACredentialContent>.Enumerate_TDWVDASmartContractEntryContent_nullable(TRACredentialContent value)
            {
                
                yield break;
            }
            TRACredentialContent ITypeConverter<TRACredentialContent>.ConvertFrom_TRACredentialContent_nullable(TRACredentialContent? value)
            {
                
                return TypeConverter<TRACredentialContent>.ConvertFrom_TRACredentialContent(value.Value);
                
            }
            TRACredentialContent? ITypeConverter<TRACredentialContent>.ConvertTo_TRACredentialContent_nullable(TRACredentialContent value)
            {
                return TypeConverter<TRACredentialContent?>.ConvertFrom_TRACredentialContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent>.GetConversionActionTo_TRACredentialContent_nullable()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent?> ITypeConverter<TRACredentialContent>.Enumerate_TRACredentialContent_nullable(TRACredentialContent value)
            {
                
                yield break;
            }
            TRACredentialEnvelope ITypeConverter<TRACredentialEnvelope>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TRACredentialEnvelope'.");
                
            }
            bool ITypeConverter<TRACredentialEnvelope>.ConvertTo_bool(TRACredentialEnvelope value)
            {
                return TypeConverter<bool>.ConvertFrom_TRACredentialEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelope>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TRACredentialEnvelope>.Enumerate_bool(TRACredentialEnvelope value)
            {
                
                yield break;
            }
            TRACredentialEnvelope ITypeConverter<TRACredentialEnvelope>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TRACredentialEnvelope'.");
                
            }
            long ITypeConverter<TRACredentialEnvelope>.ConvertTo_long(TRACredentialEnvelope value)
            {
                return TypeConverter<long>.ConvertFrom_TRACredentialEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelope>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TRACredentialEnvelope>.Enumerate_long(TRACredentialEnvelope value)
            {
                
                yield break;
            }
            TRACredentialEnvelope ITypeConverter<TRACredentialEnvelope>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TRACredentialEnvelope intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TRACredentialEnvelope.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TRACredentialEnvelope");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TRACredentialEnvelope>.ConvertTo_string(TRACredentialEnvelope value)
            {
                return TypeConverter<string>.ConvertFrom_TRACredentialEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelope>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TRACredentialEnvelope>.Enumerate_string(TRACredentialEnvelope value)
            {
                
                yield break;
            }
            TRACredentialEnvelope ITypeConverter<TRACredentialEnvelope>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TRACredentialEnvelope'.");
                
            }
            List<string> ITypeConverter<TRACredentialEnvelope>.ConvertTo_List_string(TRACredentialEnvelope value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TRACredentialEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelope>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TRACredentialEnvelope>.Enumerate_List_string(TRACredentialEnvelope value)
            {
                
                yield break;
            }
            TRACredentialEnvelope ITypeConverter<TRACredentialEnvelope>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TRACredentialEnvelope'.");
                
            }
            List<TRAClaim> ITypeConverter<TRACredentialEnvelope>.ConvertTo_List_TRAClaim(TRACredentialEnvelope value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TRACredentialEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelope>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TRACredentialEnvelope>.Enumerate_List_TRAClaim(TRACredentialEnvelope value)
            {
                
                yield break;
            }
            TRACredentialEnvelope ITypeConverter<TRACredentialEnvelope>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TRACredentialEnvelope'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TRACredentialEnvelope>.ConvertTo_List_TRAKeyValuePair(TRACredentialEnvelope value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRACredentialEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelope>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TRACredentialEnvelope>.Enumerate_List_TRAKeyValuePair(TRACredentialEnvelope value)
            {
                
                yield break;
            }
            TRACredentialEnvelope ITypeConverter<TRACredentialEnvelope>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'TRACredentialEnvelope'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<TRACredentialEnvelope>.ConvertTo_TDWVDAAccountEntryClaims(TRACredentialEnvelope value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TRACredentialEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelope>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<TRACredentialEnvelope>.Enumerate_TDWVDAAccountEntryClaims(TRACredentialEnvelope value)
            {
                
                yield break;
            }
            TRACredentialEnvelope ITypeConverter<TRACredentialEnvelope>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'TRACredentialEnvelope'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<TRACredentialEnvelope>.ConvertTo_TDWVDAAccountEntryContent(TRACredentialEnvelope value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TRACredentialEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelope>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<TRACredentialEnvelope>.Enumerate_TDWVDAAccountEntryContent(TRACredentialEnvelope value)
            {
                
                yield break;
            }
            TRACredentialEnvelope ITypeConverter<TRACredentialEnvelope>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'TRACredentialEnvelope'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TRACredentialEnvelope>.ConvertTo_TDWVDAAccountEntryEnvelope(TRACredentialEnvelope value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TRACredentialEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelope>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<TRACredentialEnvelope>.Enumerate_TDWVDAAccountEntryEnvelope(TRACredentialEnvelope value)
            {
                
                yield break;
            }
            TRACredentialEnvelope ITypeConverter<TRACredentialEnvelope>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TRACredentialEnvelope'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TRACredentialEnvelope>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TRACredentialEnvelope value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRACredentialEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelope>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TRACredentialEnvelope>.Enumerate_TDWVDAIdentityRegistryEntryParm(TRACredentialEnvelope value)
            {
                
                yield break;
            }
            TRACredentialEnvelope ITypeConverter<TRACredentialEnvelope>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TRACredentialEnvelope'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TRACredentialEnvelope>.ConvertTo_TDWVDAPostInvocationParameters(TRACredentialEnvelope value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRACredentialEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelope>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TRACredentialEnvelope>.Enumerate_TDWVDAPostInvocationParameters(TRACredentialEnvelope value)
            {
                
                yield break;
            }
            TRACredentialEnvelope ITypeConverter<TRACredentialEnvelope>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TRACredentialEnvelope'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TRACredentialEnvelope>.ConvertTo_TDWVDARevocationListEntryParm(TRACredentialEnvelope value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRACredentialEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelope>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TRACredentialEnvelope>.Enumerate_TDWVDARevocationListEntryParm(TRACredentialEnvelope value)
            {
                
                yield break;
            }
            TRACredentialEnvelope ITypeConverter<TRACredentialEnvelope>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TRACredentialEnvelope'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TRACredentialEnvelope>.ConvertTo_TDWVDAServiceEndpointEntryParm(TRACredentialEnvelope value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRACredentialEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelope>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TRACredentialEnvelope>.Enumerate_TDWVDAServiceEndpointEntryParm(TRACredentialEnvelope value)
            {
                
                yield break;
            }
            TRACredentialEnvelope ITypeConverter<TRACredentialEnvelope>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'TRACredentialEnvelope'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TRACredentialEnvelope>.ConvertTo_TDWVDASmartContractEntryClaims(TRACredentialEnvelope value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TRACredentialEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelope>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<TRACredentialEnvelope>.Enumerate_TDWVDASmartContractEntryClaims(TRACredentialEnvelope value)
            {
                
                yield break;
            }
            TRACredentialEnvelope ITypeConverter<TRACredentialEnvelope>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'TRACredentialEnvelope'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<TRACredentialEnvelope>.ConvertTo_TDWVDASmartContractEntryContent(TRACredentialEnvelope value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TRACredentialEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelope>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<TRACredentialEnvelope>.Enumerate_TDWVDASmartContractEntryContent(TRACredentialEnvelope value)
            {
                
                yield break;
            }
            TRACredentialEnvelope ITypeConverter<TRACredentialEnvelope>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'TRACredentialEnvelope'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TRACredentialEnvelope>.ConvertTo_TDWVDASmartContractEntryEnvelope(TRACredentialEnvelope value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TRACredentialEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelope>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<TRACredentialEnvelope>.Enumerate_TDWVDASmartContractEntryEnvelope(TRACredentialEnvelope value)
            {
                
                yield break;
            }
            TRACredentialEnvelope ITypeConverter<TRACredentialEnvelope>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TRACredentialEnvelope'.");
                
            }
            TRAClaim ITypeConverter<TRACredentialEnvelope>.ConvertTo_TRAClaim(TRACredentialEnvelope value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TRACredentialEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelope>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TRACredentialEnvelope>.Enumerate_TRAClaim(TRACredentialEnvelope value)
            {
                
                yield break;
            }
            TRACredentialEnvelope ITypeConverter<TRACredentialEnvelope>.ConvertFrom_TRACredentialContent(TRACredentialContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent' to 'TRACredentialEnvelope'.");
                
            }
            TRACredentialContent ITypeConverter<TRACredentialEnvelope>.ConvertTo_TRACredentialContent(TRACredentialEnvelope value)
            {
                return TypeConverter<TRACredentialContent>.ConvertFrom_TRACredentialEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelope>.GetConversionActionTo_TRACredentialContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent> ITypeConverter<TRACredentialEnvelope>.Enumerate_TRACredentialContent(TRACredentialEnvelope value)
            {
                
                yield break;
            }
            TRACredentialEnvelope ITypeConverter<TRACredentialEnvelope>.ConvertFrom_TRACredentialEnvelope(TRACredentialEnvelope value)
            {
                
                return (TRACredentialEnvelope)value;
                
            }
            TRACredentialEnvelope ITypeConverter<TRACredentialEnvelope>.ConvertTo_TRACredentialEnvelope(TRACredentialEnvelope value)
            {
                return TypeConverter<TRACredentialEnvelope>.ConvertFrom_TRACredentialEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelope>.GetConversionActionTo_TRACredentialEnvelope()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelope> ITypeConverter<TRACredentialEnvelope>.Enumerate_TRACredentialEnvelope(TRACredentialEnvelope value)
            {
                
                yield break;
            }
            TRACredentialEnvelope ITypeConverter<TRACredentialEnvelope>.ConvertFrom_TRACredentialEnvelopeSeal(TRACredentialEnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelopeSeal' to 'TRACredentialEnvelope'.");
                
            }
            TRACredentialEnvelopeSeal ITypeConverter<TRACredentialEnvelope>.ConvertTo_TRACredentialEnvelopeSeal(TRACredentialEnvelope value)
            {
                return TypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_TRACredentialEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelope>.GetConversionActionTo_TRACredentialEnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelopeSeal> ITypeConverter<TRACredentialEnvelope>.Enumerate_TRACredentialEnvelopeSeal(TRACredentialEnvelope value)
            {
                
                yield break;
            }
            TRACredentialEnvelope ITypeConverter<TRACredentialEnvelope>.ConvertFrom_TRACredentialMetadata(TRACredentialMetadata value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialMetadata' to 'TRACredentialEnvelope'.");
                
            }
            TRACredentialMetadata ITypeConverter<TRACredentialEnvelope>.ConvertTo_TRACredentialMetadata(TRACredentialEnvelope value)
            {
                return TypeConverter<TRACredentialMetadata>.ConvertFrom_TRACredentialEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelope>.GetConversionActionTo_TRACredentialMetadata()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialMetadata> ITypeConverter<TRACredentialEnvelope>.Enumerate_TRACredentialMetadata(TRACredentialEnvelope value)
            {
                
                yield break;
            }
            TRACredentialEnvelope ITypeConverter<TRACredentialEnvelope>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TRACredentialEnvelope'.");
                
            }
            TRAKeyValuePair ITypeConverter<TRACredentialEnvelope>.ConvertTo_TRAKeyValuePair(TRACredentialEnvelope value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TRACredentialEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelope>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TRACredentialEnvelope>.Enumerate_TRAKeyValuePair(TRACredentialEnvelope value)
            {
                
                yield break;
            }
            TRACredentialEnvelope ITypeConverter<TRACredentialEnvelope>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TRACredentialEnvelope'.");
                
            }
            TRACredentialType ITypeConverter<TRACredentialEnvelope>.ConvertTo_TRACredentialType(TRACredentialEnvelope value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TRACredentialEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelope>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TRACredentialEnvelope>.Enumerate_TRACredentialType(TRACredentialEnvelope value)
            {
                
                yield break;
            }
            TRACredentialEnvelope ITypeConverter<TRACredentialEnvelope>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TRACredentialEnvelope'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TRACredentialEnvelope>.ConvertTo_TRAEncryptionFlag(TRACredentialEnvelope value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TRACredentialEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelope>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TRACredentialEnvelope>.Enumerate_TRAEncryptionFlag(TRACredentialEnvelope value)
            {
                
                yield break;
            }
            TRACredentialEnvelope ITypeConverter<TRACredentialEnvelope>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TRACredentialEnvelope'.");
                
            }
            TRAServiceType ITypeConverter<TRACredentialEnvelope>.ConvertTo_TRAServiceType(TRACredentialEnvelope value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TRACredentialEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelope>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TRACredentialEnvelope>.Enumerate_TRAServiceType(TRACredentialEnvelope value)
            {
                
                yield break;
            }
            TRACredentialEnvelope ITypeConverter<TRACredentialEnvelope>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TRACredentialEnvelope'.");
                
            }
            TRATrustLevel ITypeConverter<TRACredentialEnvelope>.ConvertTo_TRATrustLevel(TRACredentialEnvelope value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TRACredentialEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelope>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TRACredentialEnvelope>.Enumerate_TRATrustLevel(TRACredentialEnvelope value)
            {
                
                yield break;
            }
            TRACredentialEnvelope ITypeConverter<TRACredentialEnvelope>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TRACredentialEnvelope'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TRACredentialEnvelope>.ConvertTo_List_List_TRAKeyValuePair(TRACredentialEnvelope value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRACredentialEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelope>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TRACredentialEnvelope>.Enumerate_List_List_TRAKeyValuePair(TRACredentialEnvelope value)
            {
                
                yield break;
            }
            TRACredentialEnvelope ITypeConverter<TRACredentialEnvelope>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'TRACredentialEnvelope'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<TRACredentialEnvelope>.ConvertTo_TDWVDAAccountEntryContent_nullable(TRACredentialEnvelope value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TRACredentialEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelope>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<TRACredentialEnvelope>.Enumerate_TDWVDAAccountEntryContent_nullable(TRACredentialEnvelope value)
            {
                
                yield break;
            }
            TRACredentialEnvelope ITypeConverter<TRACredentialEnvelope>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'TRACredentialEnvelope'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TRACredentialEnvelope>.ConvertTo_TDWVDASmartContractEntryContent_nullable(TRACredentialEnvelope value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TRACredentialEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelope>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<TRACredentialEnvelope>.Enumerate_TDWVDASmartContractEntryContent_nullable(TRACredentialEnvelope value)
            {
                
                yield break;
            }
            TRACredentialEnvelope ITypeConverter<TRACredentialEnvelope>.ConvertFrom_TRACredentialContent_nullable(TRACredentialContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent?' to 'TRACredentialEnvelope'.");
                
            }
            TRACredentialContent? ITypeConverter<TRACredentialEnvelope>.ConvertTo_TRACredentialContent_nullable(TRACredentialEnvelope value)
            {
                return TypeConverter<TRACredentialContent?>.ConvertFrom_TRACredentialEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelope>.GetConversionActionTo_TRACredentialContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent?> ITypeConverter<TRACredentialEnvelope>.Enumerate_TRACredentialContent_nullable(TRACredentialEnvelope value)
            {
                
                yield break;
            }
            TRACredentialEnvelopeSeal ITypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TRACredentialEnvelopeSeal'.");
                
            }
            bool ITypeConverter<TRACredentialEnvelopeSeal>.ConvertTo_bool(TRACredentialEnvelopeSeal value)
            {
                return TypeConverter<bool>.ConvertFrom_TRACredentialEnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelopeSeal>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TRACredentialEnvelopeSeal>.Enumerate_bool(TRACredentialEnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredentialEnvelopeSeal ITypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TRACredentialEnvelopeSeal'.");
                
            }
            long ITypeConverter<TRACredentialEnvelopeSeal>.ConvertTo_long(TRACredentialEnvelopeSeal value)
            {
                return TypeConverter<long>.ConvertFrom_TRACredentialEnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelopeSeal>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TRACredentialEnvelopeSeal>.Enumerate_long(TRACredentialEnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredentialEnvelopeSeal ITypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TRACredentialEnvelopeSeal intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TRACredentialEnvelopeSeal.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TRACredentialEnvelopeSeal");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TRACredentialEnvelopeSeal>.ConvertTo_string(TRACredentialEnvelopeSeal value)
            {
                return TypeConverter<string>.ConvertFrom_TRACredentialEnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelopeSeal>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TRACredentialEnvelopeSeal>.Enumerate_string(TRACredentialEnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredentialEnvelopeSeal ITypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TRACredentialEnvelopeSeal'.");
                
            }
            List<string> ITypeConverter<TRACredentialEnvelopeSeal>.ConvertTo_List_string(TRACredentialEnvelopeSeal value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TRACredentialEnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelopeSeal>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TRACredentialEnvelopeSeal>.Enumerate_List_string(TRACredentialEnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredentialEnvelopeSeal ITypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TRACredentialEnvelopeSeal'.");
                
            }
            List<TRAClaim> ITypeConverter<TRACredentialEnvelopeSeal>.ConvertTo_List_TRAClaim(TRACredentialEnvelopeSeal value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TRACredentialEnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelopeSeal>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TRACredentialEnvelopeSeal>.Enumerate_List_TRAClaim(TRACredentialEnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredentialEnvelopeSeal ITypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TRACredentialEnvelopeSeal'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TRACredentialEnvelopeSeal>.ConvertTo_List_TRAKeyValuePair(TRACredentialEnvelopeSeal value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRACredentialEnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelopeSeal>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TRACredentialEnvelopeSeal>.Enumerate_List_TRAKeyValuePair(TRACredentialEnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredentialEnvelopeSeal ITypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'TRACredentialEnvelopeSeal'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<TRACredentialEnvelopeSeal>.ConvertTo_TDWVDAAccountEntryClaims(TRACredentialEnvelopeSeal value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TRACredentialEnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelopeSeal>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<TRACredentialEnvelopeSeal>.Enumerate_TDWVDAAccountEntryClaims(TRACredentialEnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredentialEnvelopeSeal ITypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'TRACredentialEnvelopeSeal'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<TRACredentialEnvelopeSeal>.ConvertTo_TDWVDAAccountEntryContent(TRACredentialEnvelopeSeal value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TRACredentialEnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelopeSeal>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<TRACredentialEnvelopeSeal>.Enumerate_TDWVDAAccountEntryContent(TRACredentialEnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredentialEnvelopeSeal ITypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'TRACredentialEnvelopeSeal'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TRACredentialEnvelopeSeal>.ConvertTo_TDWVDAAccountEntryEnvelope(TRACredentialEnvelopeSeal value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TRACredentialEnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelopeSeal>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<TRACredentialEnvelopeSeal>.Enumerate_TDWVDAAccountEntryEnvelope(TRACredentialEnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredentialEnvelopeSeal ITypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TRACredentialEnvelopeSeal'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TRACredentialEnvelopeSeal>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TRACredentialEnvelopeSeal value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRACredentialEnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelopeSeal>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TRACredentialEnvelopeSeal>.Enumerate_TDWVDAIdentityRegistryEntryParm(TRACredentialEnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredentialEnvelopeSeal ITypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TRACredentialEnvelopeSeal'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TRACredentialEnvelopeSeal>.ConvertTo_TDWVDAPostInvocationParameters(TRACredentialEnvelopeSeal value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRACredentialEnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelopeSeal>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TRACredentialEnvelopeSeal>.Enumerate_TDWVDAPostInvocationParameters(TRACredentialEnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredentialEnvelopeSeal ITypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TRACredentialEnvelopeSeal'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TRACredentialEnvelopeSeal>.ConvertTo_TDWVDARevocationListEntryParm(TRACredentialEnvelopeSeal value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRACredentialEnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelopeSeal>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TRACredentialEnvelopeSeal>.Enumerate_TDWVDARevocationListEntryParm(TRACredentialEnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredentialEnvelopeSeal ITypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TRACredentialEnvelopeSeal'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TRACredentialEnvelopeSeal>.ConvertTo_TDWVDAServiceEndpointEntryParm(TRACredentialEnvelopeSeal value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRACredentialEnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelopeSeal>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TRACredentialEnvelopeSeal>.Enumerate_TDWVDAServiceEndpointEntryParm(TRACredentialEnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredentialEnvelopeSeal ITypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'TRACredentialEnvelopeSeal'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TRACredentialEnvelopeSeal>.ConvertTo_TDWVDASmartContractEntryClaims(TRACredentialEnvelopeSeal value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TRACredentialEnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelopeSeal>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<TRACredentialEnvelopeSeal>.Enumerate_TDWVDASmartContractEntryClaims(TRACredentialEnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredentialEnvelopeSeal ITypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'TRACredentialEnvelopeSeal'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<TRACredentialEnvelopeSeal>.ConvertTo_TDWVDASmartContractEntryContent(TRACredentialEnvelopeSeal value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TRACredentialEnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelopeSeal>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<TRACredentialEnvelopeSeal>.Enumerate_TDWVDASmartContractEntryContent(TRACredentialEnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredentialEnvelopeSeal ITypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'TRACredentialEnvelopeSeal'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TRACredentialEnvelopeSeal>.ConvertTo_TDWVDASmartContractEntryEnvelope(TRACredentialEnvelopeSeal value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TRACredentialEnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelopeSeal>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<TRACredentialEnvelopeSeal>.Enumerate_TDWVDASmartContractEntryEnvelope(TRACredentialEnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredentialEnvelopeSeal ITypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TRACredentialEnvelopeSeal'.");
                
            }
            TRAClaim ITypeConverter<TRACredentialEnvelopeSeal>.ConvertTo_TRAClaim(TRACredentialEnvelopeSeal value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TRACredentialEnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelopeSeal>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TRACredentialEnvelopeSeal>.Enumerate_TRAClaim(TRACredentialEnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredentialEnvelopeSeal ITypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_TRACredentialContent(TRACredentialContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent' to 'TRACredentialEnvelopeSeal'.");
                
            }
            TRACredentialContent ITypeConverter<TRACredentialEnvelopeSeal>.ConvertTo_TRACredentialContent(TRACredentialEnvelopeSeal value)
            {
                return TypeConverter<TRACredentialContent>.ConvertFrom_TRACredentialEnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelopeSeal>.GetConversionActionTo_TRACredentialContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent> ITypeConverter<TRACredentialEnvelopeSeal>.Enumerate_TRACredentialContent(TRACredentialEnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredentialEnvelopeSeal ITypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_TRACredentialEnvelope(TRACredentialEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelope' to 'TRACredentialEnvelopeSeal'.");
                
            }
            TRACredentialEnvelope ITypeConverter<TRACredentialEnvelopeSeal>.ConvertTo_TRACredentialEnvelope(TRACredentialEnvelopeSeal value)
            {
                return TypeConverter<TRACredentialEnvelope>.ConvertFrom_TRACredentialEnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelopeSeal>.GetConversionActionTo_TRACredentialEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelope> ITypeConverter<TRACredentialEnvelopeSeal>.Enumerate_TRACredentialEnvelope(TRACredentialEnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredentialEnvelopeSeal ITypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_TRACredentialEnvelopeSeal(TRACredentialEnvelopeSeal value)
            {
                
                return (TRACredentialEnvelopeSeal)value;
                
            }
            TRACredentialEnvelopeSeal ITypeConverter<TRACredentialEnvelopeSeal>.ConvertTo_TRACredentialEnvelopeSeal(TRACredentialEnvelopeSeal value)
            {
                return TypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_TRACredentialEnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelopeSeal>.GetConversionActionTo_TRACredentialEnvelopeSeal()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelopeSeal> ITypeConverter<TRACredentialEnvelopeSeal>.Enumerate_TRACredentialEnvelopeSeal(TRACredentialEnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredentialEnvelopeSeal ITypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_TRACredentialMetadata(TRACredentialMetadata value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialMetadata' to 'TRACredentialEnvelopeSeal'.");
                
            }
            TRACredentialMetadata ITypeConverter<TRACredentialEnvelopeSeal>.ConvertTo_TRACredentialMetadata(TRACredentialEnvelopeSeal value)
            {
                return TypeConverter<TRACredentialMetadata>.ConvertFrom_TRACredentialEnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelopeSeal>.GetConversionActionTo_TRACredentialMetadata()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialMetadata> ITypeConverter<TRACredentialEnvelopeSeal>.Enumerate_TRACredentialMetadata(TRACredentialEnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredentialEnvelopeSeal ITypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TRACredentialEnvelopeSeal'.");
                
            }
            TRAKeyValuePair ITypeConverter<TRACredentialEnvelopeSeal>.ConvertTo_TRAKeyValuePair(TRACredentialEnvelopeSeal value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TRACredentialEnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelopeSeal>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TRACredentialEnvelopeSeal>.Enumerate_TRAKeyValuePair(TRACredentialEnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredentialEnvelopeSeal ITypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TRACredentialEnvelopeSeal'.");
                
            }
            TRACredentialType ITypeConverter<TRACredentialEnvelopeSeal>.ConvertTo_TRACredentialType(TRACredentialEnvelopeSeal value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TRACredentialEnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelopeSeal>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TRACredentialEnvelopeSeal>.Enumerate_TRACredentialType(TRACredentialEnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredentialEnvelopeSeal ITypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TRACredentialEnvelopeSeal'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TRACredentialEnvelopeSeal>.ConvertTo_TRAEncryptionFlag(TRACredentialEnvelopeSeal value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TRACredentialEnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelopeSeal>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TRACredentialEnvelopeSeal>.Enumerate_TRAEncryptionFlag(TRACredentialEnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredentialEnvelopeSeal ITypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TRACredentialEnvelopeSeal'.");
                
            }
            TRAServiceType ITypeConverter<TRACredentialEnvelopeSeal>.ConvertTo_TRAServiceType(TRACredentialEnvelopeSeal value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TRACredentialEnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelopeSeal>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TRACredentialEnvelopeSeal>.Enumerate_TRAServiceType(TRACredentialEnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredentialEnvelopeSeal ITypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TRACredentialEnvelopeSeal'.");
                
            }
            TRATrustLevel ITypeConverter<TRACredentialEnvelopeSeal>.ConvertTo_TRATrustLevel(TRACredentialEnvelopeSeal value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TRACredentialEnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelopeSeal>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TRACredentialEnvelopeSeal>.Enumerate_TRATrustLevel(TRACredentialEnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredentialEnvelopeSeal ITypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TRACredentialEnvelopeSeal'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TRACredentialEnvelopeSeal>.ConvertTo_List_List_TRAKeyValuePair(TRACredentialEnvelopeSeal value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRACredentialEnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelopeSeal>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TRACredentialEnvelopeSeal>.Enumerate_List_List_TRAKeyValuePair(TRACredentialEnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredentialEnvelopeSeal ITypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'TRACredentialEnvelopeSeal'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<TRACredentialEnvelopeSeal>.ConvertTo_TDWVDAAccountEntryContent_nullable(TRACredentialEnvelopeSeal value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TRACredentialEnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelopeSeal>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<TRACredentialEnvelopeSeal>.Enumerate_TDWVDAAccountEntryContent_nullable(TRACredentialEnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredentialEnvelopeSeal ITypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'TRACredentialEnvelopeSeal'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TRACredentialEnvelopeSeal>.ConvertTo_TDWVDASmartContractEntryContent_nullable(TRACredentialEnvelopeSeal value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TRACredentialEnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelopeSeal>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<TRACredentialEnvelopeSeal>.Enumerate_TDWVDASmartContractEntryContent_nullable(TRACredentialEnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredentialEnvelopeSeal ITypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_TRACredentialContent_nullable(TRACredentialContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent?' to 'TRACredentialEnvelopeSeal'.");
                
            }
            TRACredentialContent? ITypeConverter<TRACredentialEnvelopeSeal>.ConvertTo_TRACredentialContent_nullable(TRACredentialEnvelopeSeal value)
            {
                return TypeConverter<TRACredentialContent?>.ConvertFrom_TRACredentialEnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialEnvelopeSeal>.GetConversionActionTo_TRACredentialContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent?> ITypeConverter<TRACredentialEnvelopeSeal>.Enumerate_TRACredentialContent_nullable(TRACredentialEnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredentialMetadata ITypeConverter<TRACredentialMetadata>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TRACredentialMetadata'.");
                
            }
            bool ITypeConverter<TRACredentialMetadata>.ConvertTo_bool(TRACredentialMetadata value)
            {
                return TypeConverter<bool>.ConvertFrom_TRACredentialMetadata(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialMetadata>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TRACredentialMetadata>.Enumerate_bool(TRACredentialMetadata value)
            {
                
                yield break;
            }
            TRACredentialMetadata ITypeConverter<TRACredentialMetadata>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TRACredentialMetadata'.");
                
            }
            long ITypeConverter<TRACredentialMetadata>.ConvertTo_long(TRACredentialMetadata value)
            {
                return TypeConverter<long>.ConvertFrom_TRACredentialMetadata(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialMetadata>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TRACredentialMetadata>.Enumerate_long(TRACredentialMetadata value)
            {
                
                yield break;
            }
            TRACredentialMetadata ITypeConverter<TRACredentialMetadata>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TRACredentialMetadata intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TRACredentialMetadata.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TRACredentialMetadata");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TRACredentialMetadata>.ConvertTo_string(TRACredentialMetadata value)
            {
                return TypeConverter<string>.ConvertFrom_TRACredentialMetadata(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialMetadata>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TRACredentialMetadata>.Enumerate_string(TRACredentialMetadata value)
            {
                
                yield break;
            }
            TRACredentialMetadata ITypeConverter<TRACredentialMetadata>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TRACredentialMetadata'.");
                
            }
            List<string> ITypeConverter<TRACredentialMetadata>.ConvertTo_List_string(TRACredentialMetadata value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TRACredentialMetadata(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialMetadata>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TRACredentialMetadata>.Enumerate_List_string(TRACredentialMetadata value)
            {
                
                yield break;
            }
            TRACredentialMetadata ITypeConverter<TRACredentialMetadata>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TRACredentialMetadata'.");
                
            }
            List<TRAClaim> ITypeConverter<TRACredentialMetadata>.ConvertTo_List_TRAClaim(TRACredentialMetadata value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TRACredentialMetadata(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialMetadata>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TRACredentialMetadata>.Enumerate_List_TRAClaim(TRACredentialMetadata value)
            {
                
                yield break;
            }
            TRACredentialMetadata ITypeConverter<TRACredentialMetadata>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TRACredentialMetadata'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TRACredentialMetadata>.ConvertTo_List_TRAKeyValuePair(TRACredentialMetadata value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRACredentialMetadata(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialMetadata>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TRACredentialMetadata>.Enumerate_List_TRAKeyValuePair(TRACredentialMetadata value)
            {
                
                yield break;
            }
            TRACredentialMetadata ITypeConverter<TRACredentialMetadata>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'TRACredentialMetadata'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<TRACredentialMetadata>.ConvertTo_TDWVDAAccountEntryClaims(TRACredentialMetadata value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TRACredentialMetadata(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialMetadata>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<TRACredentialMetadata>.Enumerate_TDWVDAAccountEntryClaims(TRACredentialMetadata value)
            {
                
                yield break;
            }
            TRACredentialMetadata ITypeConverter<TRACredentialMetadata>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'TRACredentialMetadata'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<TRACredentialMetadata>.ConvertTo_TDWVDAAccountEntryContent(TRACredentialMetadata value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TRACredentialMetadata(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialMetadata>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<TRACredentialMetadata>.Enumerate_TDWVDAAccountEntryContent(TRACredentialMetadata value)
            {
                
                yield break;
            }
            TRACredentialMetadata ITypeConverter<TRACredentialMetadata>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'TRACredentialMetadata'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TRACredentialMetadata>.ConvertTo_TDWVDAAccountEntryEnvelope(TRACredentialMetadata value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TRACredentialMetadata(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialMetadata>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<TRACredentialMetadata>.Enumerate_TDWVDAAccountEntryEnvelope(TRACredentialMetadata value)
            {
                
                yield break;
            }
            TRACredentialMetadata ITypeConverter<TRACredentialMetadata>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TRACredentialMetadata'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TRACredentialMetadata>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TRACredentialMetadata value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRACredentialMetadata(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialMetadata>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TRACredentialMetadata>.Enumerate_TDWVDAIdentityRegistryEntryParm(TRACredentialMetadata value)
            {
                
                yield break;
            }
            TRACredentialMetadata ITypeConverter<TRACredentialMetadata>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TRACredentialMetadata'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TRACredentialMetadata>.ConvertTo_TDWVDAPostInvocationParameters(TRACredentialMetadata value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRACredentialMetadata(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialMetadata>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TRACredentialMetadata>.Enumerate_TDWVDAPostInvocationParameters(TRACredentialMetadata value)
            {
                
                yield break;
            }
            TRACredentialMetadata ITypeConverter<TRACredentialMetadata>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TRACredentialMetadata'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TRACredentialMetadata>.ConvertTo_TDWVDARevocationListEntryParm(TRACredentialMetadata value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRACredentialMetadata(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialMetadata>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TRACredentialMetadata>.Enumerate_TDWVDARevocationListEntryParm(TRACredentialMetadata value)
            {
                
                yield break;
            }
            TRACredentialMetadata ITypeConverter<TRACredentialMetadata>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TRACredentialMetadata'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TRACredentialMetadata>.ConvertTo_TDWVDAServiceEndpointEntryParm(TRACredentialMetadata value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRACredentialMetadata(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialMetadata>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TRACredentialMetadata>.Enumerate_TDWVDAServiceEndpointEntryParm(TRACredentialMetadata value)
            {
                
                yield break;
            }
            TRACredentialMetadata ITypeConverter<TRACredentialMetadata>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'TRACredentialMetadata'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TRACredentialMetadata>.ConvertTo_TDWVDASmartContractEntryClaims(TRACredentialMetadata value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TRACredentialMetadata(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialMetadata>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<TRACredentialMetadata>.Enumerate_TDWVDASmartContractEntryClaims(TRACredentialMetadata value)
            {
                
                yield break;
            }
            TRACredentialMetadata ITypeConverter<TRACredentialMetadata>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'TRACredentialMetadata'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<TRACredentialMetadata>.ConvertTo_TDWVDASmartContractEntryContent(TRACredentialMetadata value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TRACredentialMetadata(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialMetadata>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<TRACredentialMetadata>.Enumerate_TDWVDASmartContractEntryContent(TRACredentialMetadata value)
            {
                
                yield break;
            }
            TRACredentialMetadata ITypeConverter<TRACredentialMetadata>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'TRACredentialMetadata'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TRACredentialMetadata>.ConvertTo_TDWVDASmartContractEntryEnvelope(TRACredentialMetadata value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TRACredentialMetadata(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialMetadata>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<TRACredentialMetadata>.Enumerate_TDWVDASmartContractEntryEnvelope(TRACredentialMetadata value)
            {
                
                yield break;
            }
            TRACredentialMetadata ITypeConverter<TRACredentialMetadata>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TRACredentialMetadata'.");
                
            }
            TRAClaim ITypeConverter<TRACredentialMetadata>.ConvertTo_TRAClaim(TRACredentialMetadata value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TRACredentialMetadata(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialMetadata>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TRACredentialMetadata>.Enumerate_TRAClaim(TRACredentialMetadata value)
            {
                
                yield break;
            }
            TRACredentialMetadata ITypeConverter<TRACredentialMetadata>.ConvertFrom_TRACredentialContent(TRACredentialContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent' to 'TRACredentialMetadata'.");
                
            }
            TRACredentialContent ITypeConverter<TRACredentialMetadata>.ConvertTo_TRACredentialContent(TRACredentialMetadata value)
            {
                return TypeConverter<TRACredentialContent>.ConvertFrom_TRACredentialMetadata(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialMetadata>.GetConversionActionTo_TRACredentialContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent> ITypeConverter<TRACredentialMetadata>.Enumerate_TRACredentialContent(TRACredentialMetadata value)
            {
                
                yield break;
            }
            TRACredentialMetadata ITypeConverter<TRACredentialMetadata>.ConvertFrom_TRACredentialEnvelope(TRACredentialEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelope' to 'TRACredentialMetadata'.");
                
            }
            TRACredentialEnvelope ITypeConverter<TRACredentialMetadata>.ConvertTo_TRACredentialEnvelope(TRACredentialMetadata value)
            {
                return TypeConverter<TRACredentialEnvelope>.ConvertFrom_TRACredentialMetadata(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialMetadata>.GetConversionActionTo_TRACredentialEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelope> ITypeConverter<TRACredentialMetadata>.Enumerate_TRACredentialEnvelope(TRACredentialMetadata value)
            {
                
                yield break;
            }
            TRACredentialMetadata ITypeConverter<TRACredentialMetadata>.ConvertFrom_TRACredentialEnvelopeSeal(TRACredentialEnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelopeSeal' to 'TRACredentialMetadata'.");
                
            }
            TRACredentialEnvelopeSeal ITypeConverter<TRACredentialMetadata>.ConvertTo_TRACredentialEnvelopeSeal(TRACredentialMetadata value)
            {
                return TypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_TRACredentialMetadata(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialMetadata>.GetConversionActionTo_TRACredentialEnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelopeSeal> ITypeConverter<TRACredentialMetadata>.Enumerate_TRACredentialEnvelopeSeal(TRACredentialMetadata value)
            {
                
                yield break;
            }
            TRACredentialMetadata ITypeConverter<TRACredentialMetadata>.ConvertFrom_TRACredentialMetadata(TRACredentialMetadata value)
            {
                
                return (TRACredentialMetadata)value;
                
            }
            TRACredentialMetadata ITypeConverter<TRACredentialMetadata>.ConvertTo_TRACredentialMetadata(TRACredentialMetadata value)
            {
                return TypeConverter<TRACredentialMetadata>.ConvertFrom_TRACredentialMetadata(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialMetadata>.GetConversionActionTo_TRACredentialMetadata()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialMetadata> ITypeConverter<TRACredentialMetadata>.Enumerate_TRACredentialMetadata(TRACredentialMetadata value)
            {
                
                yield break;
            }
            TRACredentialMetadata ITypeConverter<TRACredentialMetadata>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TRACredentialMetadata'.");
                
            }
            TRAKeyValuePair ITypeConverter<TRACredentialMetadata>.ConvertTo_TRAKeyValuePair(TRACredentialMetadata value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TRACredentialMetadata(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialMetadata>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TRACredentialMetadata>.Enumerate_TRAKeyValuePair(TRACredentialMetadata value)
            {
                
                yield break;
            }
            TRACredentialMetadata ITypeConverter<TRACredentialMetadata>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TRACredentialMetadata'.");
                
            }
            TRACredentialType ITypeConverter<TRACredentialMetadata>.ConvertTo_TRACredentialType(TRACredentialMetadata value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TRACredentialMetadata(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialMetadata>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TRACredentialMetadata>.Enumerate_TRACredentialType(TRACredentialMetadata value)
            {
                
                yield break;
            }
            TRACredentialMetadata ITypeConverter<TRACredentialMetadata>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TRACredentialMetadata'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TRACredentialMetadata>.ConvertTo_TRAEncryptionFlag(TRACredentialMetadata value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TRACredentialMetadata(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialMetadata>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TRACredentialMetadata>.Enumerate_TRAEncryptionFlag(TRACredentialMetadata value)
            {
                
                yield break;
            }
            TRACredentialMetadata ITypeConverter<TRACredentialMetadata>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TRACredentialMetadata'.");
                
            }
            TRAServiceType ITypeConverter<TRACredentialMetadata>.ConvertTo_TRAServiceType(TRACredentialMetadata value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TRACredentialMetadata(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialMetadata>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TRACredentialMetadata>.Enumerate_TRAServiceType(TRACredentialMetadata value)
            {
                
                yield break;
            }
            TRACredentialMetadata ITypeConverter<TRACredentialMetadata>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TRACredentialMetadata'.");
                
            }
            TRATrustLevel ITypeConverter<TRACredentialMetadata>.ConvertTo_TRATrustLevel(TRACredentialMetadata value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TRACredentialMetadata(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialMetadata>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TRACredentialMetadata>.Enumerate_TRATrustLevel(TRACredentialMetadata value)
            {
                
                yield break;
            }
            TRACredentialMetadata ITypeConverter<TRACredentialMetadata>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TRACredentialMetadata'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TRACredentialMetadata>.ConvertTo_List_List_TRAKeyValuePair(TRACredentialMetadata value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRACredentialMetadata(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialMetadata>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TRACredentialMetadata>.Enumerate_List_List_TRAKeyValuePair(TRACredentialMetadata value)
            {
                
                yield break;
            }
            TRACredentialMetadata ITypeConverter<TRACredentialMetadata>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'TRACredentialMetadata'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<TRACredentialMetadata>.ConvertTo_TDWVDAAccountEntryContent_nullable(TRACredentialMetadata value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TRACredentialMetadata(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialMetadata>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<TRACredentialMetadata>.Enumerate_TDWVDAAccountEntryContent_nullable(TRACredentialMetadata value)
            {
                
                yield break;
            }
            TRACredentialMetadata ITypeConverter<TRACredentialMetadata>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'TRACredentialMetadata'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TRACredentialMetadata>.ConvertTo_TDWVDASmartContractEntryContent_nullable(TRACredentialMetadata value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TRACredentialMetadata(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialMetadata>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<TRACredentialMetadata>.Enumerate_TDWVDASmartContractEntryContent_nullable(TRACredentialMetadata value)
            {
                
                yield break;
            }
            TRACredentialMetadata ITypeConverter<TRACredentialMetadata>.ConvertFrom_TRACredentialContent_nullable(TRACredentialContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent?' to 'TRACredentialMetadata'.");
                
            }
            TRACredentialContent? ITypeConverter<TRACredentialMetadata>.ConvertTo_TRACredentialContent_nullable(TRACredentialMetadata value)
            {
                return TypeConverter<TRACredentialContent?>.ConvertFrom_TRACredentialMetadata(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialMetadata>.GetConversionActionTo_TRACredentialContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent?> ITypeConverter<TRACredentialMetadata>.Enumerate_TRACredentialContent_nullable(TRACredentialMetadata value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TRAKeyValuePair'.");
                
            }
            bool ITypeConverter<TRAKeyValuePair>.ConvertTo_bool(TRAKeyValuePair value)
            {
                return TypeConverter<bool>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TRAKeyValuePair>.Enumerate_bool(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TRAKeyValuePair'.");
                
            }
            long ITypeConverter<TRAKeyValuePair>.ConvertTo_long(TRAKeyValuePair value)
            {
                return TypeConverter<long>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TRAKeyValuePair>.Enumerate_long(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TRAKeyValuePair intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TRAKeyValuePair.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TRAKeyValuePair");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TRAKeyValuePair>.ConvertTo_string(TRAKeyValuePair value)
            {
                return TypeConverter<string>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TRAKeyValuePair>.Enumerate_string(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TRAKeyValuePair'.");
                
            }
            List<string> ITypeConverter<TRAKeyValuePair>.ConvertTo_List_string(TRAKeyValuePair value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TRAKeyValuePair>.Enumerate_List_string(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TRAKeyValuePair'.");
                
            }
            List<TRAClaim> ITypeConverter<TRAKeyValuePair>.ConvertTo_List_TRAClaim(TRAKeyValuePair value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TRAKeyValuePair>.Enumerate_List_TRAClaim(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TRAKeyValuePair'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TRAKeyValuePair>.ConvertTo_List_TRAKeyValuePair(TRAKeyValuePair value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TRAKeyValuePair>.Enumerate_List_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'TRAKeyValuePair'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<TRAKeyValuePair>.ConvertTo_TDWVDAAccountEntryClaims(TRAKeyValuePair value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<TRAKeyValuePair>.Enumerate_TDWVDAAccountEntryClaims(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'TRAKeyValuePair'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<TRAKeyValuePair>.ConvertTo_TDWVDAAccountEntryContent(TRAKeyValuePair value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<TRAKeyValuePair>.Enumerate_TDWVDAAccountEntryContent(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'TRAKeyValuePair'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TRAKeyValuePair>.ConvertTo_TDWVDAAccountEntryEnvelope(TRAKeyValuePair value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<TRAKeyValuePair>.Enumerate_TDWVDAAccountEntryEnvelope(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TRAKeyValuePair'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TRAKeyValuePair>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TRAKeyValuePair value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TRAKeyValuePair>.Enumerate_TDWVDAIdentityRegistryEntryParm(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TRAKeyValuePair'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TRAKeyValuePair>.ConvertTo_TDWVDAPostInvocationParameters(TRAKeyValuePair value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TRAKeyValuePair>.Enumerate_TDWVDAPostInvocationParameters(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TRAKeyValuePair'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TRAKeyValuePair>.ConvertTo_TDWVDARevocationListEntryParm(TRAKeyValuePair value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TRAKeyValuePair>.Enumerate_TDWVDARevocationListEntryParm(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TRAKeyValuePair'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TRAKeyValuePair>.ConvertTo_TDWVDAServiceEndpointEntryParm(TRAKeyValuePair value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TRAKeyValuePair>.Enumerate_TDWVDAServiceEndpointEntryParm(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'TRAKeyValuePair'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TRAKeyValuePair>.ConvertTo_TDWVDASmartContractEntryClaims(TRAKeyValuePair value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<TRAKeyValuePair>.Enumerate_TDWVDASmartContractEntryClaims(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'TRAKeyValuePair'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<TRAKeyValuePair>.ConvertTo_TDWVDASmartContractEntryContent(TRAKeyValuePair value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<TRAKeyValuePair>.Enumerate_TDWVDASmartContractEntryContent(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'TRAKeyValuePair'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TRAKeyValuePair>.ConvertTo_TDWVDASmartContractEntryEnvelope(TRAKeyValuePair value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<TRAKeyValuePair>.Enumerate_TDWVDASmartContractEntryEnvelope(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TRAKeyValuePair'.");
                
            }
            TRAClaim ITypeConverter<TRAKeyValuePair>.ConvertTo_TRAClaim(TRAKeyValuePair value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TRAKeyValuePair>.Enumerate_TRAClaim(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TRACredentialContent(TRACredentialContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent' to 'TRAKeyValuePair'.");
                
            }
            TRACredentialContent ITypeConverter<TRAKeyValuePair>.ConvertTo_TRACredentialContent(TRAKeyValuePair value)
            {
                return TypeConverter<TRACredentialContent>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TRACredentialContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent> ITypeConverter<TRAKeyValuePair>.Enumerate_TRACredentialContent(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TRACredentialEnvelope(TRACredentialEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelope' to 'TRAKeyValuePair'.");
                
            }
            TRACredentialEnvelope ITypeConverter<TRAKeyValuePair>.ConvertTo_TRACredentialEnvelope(TRAKeyValuePair value)
            {
                return TypeConverter<TRACredentialEnvelope>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TRACredentialEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelope> ITypeConverter<TRAKeyValuePair>.Enumerate_TRACredentialEnvelope(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TRACredentialEnvelopeSeal(TRACredentialEnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelopeSeal' to 'TRAKeyValuePair'.");
                
            }
            TRACredentialEnvelopeSeal ITypeConverter<TRAKeyValuePair>.ConvertTo_TRACredentialEnvelopeSeal(TRAKeyValuePair value)
            {
                return TypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TRACredentialEnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelopeSeal> ITypeConverter<TRAKeyValuePair>.Enumerate_TRACredentialEnvelopeSeal(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TRACredentialMetadata(TRACredentialMetadata value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialMetadata' to 'TRAKeyValuePair'.");
                
            }
            TRACredentialMetadata ITypeConverter<TRAKeyValuePair>.ConvertTo_TRACredentialMetadata(TRAKeyValuePair value)
            {
                return TypeConverter<TRACredentialMetadata>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TRACredentialMetadata()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialMetadata> ITypeConverter<TRAKeyValuePair>.Enumerate_TRACredentialMetadata(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                return (TRAKeyValuePair)value;
                
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertTo_TRAKeyValuePair(TRAKeyValuePair value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TRAKeyValuePair>.Enumerate_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TRAKeyValuePair'.");
                
            }
            TRACredentialType ITypeConverter<TRAKeyValuePair>.ConvertTo_TRACredentialType(TRAKeyValuePair value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TRAKeyValuePair>.Enumerate_TRACredentialType(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TRAKeyValuePair'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TRAKeyValuePair>.ConvertTo_TRAEncryptionFlag(TRAKeyValuePair value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TRAKeyValuePair>.Enumerate_TRAEncryptionFlag(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TRAKeyValuePair'.");
                
            }
            TRAServiceType ITypeConverter<TRAKeyValuePair>.ConvertTo_TRAServiceType(TRAKeyValuePair value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TRAKeyValuePair>.Enumerate_TRAServiceType(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TRAKeyValuePair'.");
                
            }
            TRATrustLevel ITypeConverter<TRAKeyValuePair>.ConvertTo_TRATrustLevel(TRAKeyValuePair value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TRAKeyValuePair>.Enumerate_TRATrustLevel(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TRAKeyValuePair'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TRAKeyValuePair>.ConvertTo_List_List_TRAKeyValuePair(TRAKeyValuePair value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TRAKeyValuePair>.Enumerate_List_List_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'TRAKeyValuePair'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<TRAKeyValuePair>.ConvertTo_TDWVDAAccountEntryContent_nullable(TRAKeyValuePair value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<TRAKeyValuePair>.Enumerate_TDWVDAAccountEntryContent_nullable(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'TRAKeyValuePair'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TRAKeyValuePair>.ConvertTo_TDWVDASmartContractEntryContent_nullable(TRAKeyValuePair value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<TRAKeyValuePair>.Enumerate_TDWVDASmartContractEntryContent_nullable(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TRACredentialContent_nullable(TRACredentialContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent?' to 'TRAKeyValuePair'.");
                
            }
            TRACredentialContent? ITypeConverter<TRAKeyValuePair>.ConvertTo_TRACredentialContent_nullable(TRAKeyValuePair value)
            {
                return TypeConverter<TRACredentialContent?>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TRACredentialContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent?> ITypeConverter<TRAKeyValuePair>.Enumerate_TRACredentialContent_nullable(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TRACredentialType'.");
                
            }
            bool ITypeConverter<TRACredentialType>.ConvertTo_bool(TRACredentialType value)
            {
                return TypeConverter<bool>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TRACredentialType>.Enumerate_bool(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TRACredentialType'.");
                
            }
            long ITypeConverter<TRACredentialType>.ConvertTo_long(TRACredentialType value)
            {
                return TypeConverter<long>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TRACredentialType>.Enumerate_long(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TRACredentialType intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TRACredentialType.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TRACredentialType");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TRACredentialType>.ConvertTo_string(TRACredentialType value)
            {
                return TypeConverter<string>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TRACredentialType>.Enumerate_string(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TRACredentialType'.");
                
            }
            List<string> ITypeConverter<TRACredentialType>.ConvertTo_List_string(TRACredentialType value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TRACredentialType>.Enumerate_List_string(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TRACredentialType'.");
                
            }
            List<TRAClaim> ITypeConverter<TRACredentialType>.ConvertTo_List_TRAClaim(TRACredentialType value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TRACredentialType>.Enumerate_List_TRAClaim(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TRACredentialType'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TRACredentialType>.ConvertTo_List_TRAKeyValuePair(TRACredentialType value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TRACredentialType>.Enumerate_List_TRAKeyValuePair(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'TRACredentialType'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<TRACredentialType>.ConvertTo_TDWVDAAccountEntryClaims(TRACredentialType value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<TRACredentialType>.Enumerate_TDWVDAAccountEntryClaims(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'TRACredentialType'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<TRACredentialType>.ConvertTo_TDWVDAAccountEntryContent(TRACredentialType value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<TRACredentialType>.Enumerate_TDWVDAAccountEntryContent(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'TRACredentialType'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TRACredentialType>.ConvertTo_TDWVDAAccountEntryEnvelope(TRACredentialType value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<TRACredentialType>.Enumerate_TDWVDAAccountEntryEnvelope(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TRACredentialType'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TRACredentialType>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TRACredentialType value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TRACredentialType>.Enumerate_TDWVDAIdentityRegistryEntryParm(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TRACredentialType'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TRACredentialType>.ConvertTo_TDWVDAPostInvocationParameters(TRACredentialType value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TRACredentialType>.Enumerate_TDWVDAPostInvocationParameters(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TRACredentialType'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TRACredentialType>.ConvertTo_TDWVDARevocationListEntryParm(TRACredentialType value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TRACredentialType>.Enumerate_TDWVDARevocationListEntryParm(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TRACredentialType'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TRACredentialType>.ConvertTo_TDWVDAServiceEndpointEntryParm(TRACredentialType value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TRACredentialType>.Enumerate_TDWVDAServiceEndpointEntryParm(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'TRACredentialType'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TRACredentialType>.ConvertTo_TDWVDASmartContractEntryClaims(TRACredentialType value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<TRACredentialType>.Enumerate_TDWVDASmartContractEntryClaims(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'TRACredentialType'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<TRACredentialType>.ConvertTo_TDWVDASmartContractEntryContent(TRACredentialType value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<TRACredentialType>.Enumerate_TDWVDASmartContractEntryContent(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'TRACredentialType'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TRACredentialType>.ConvertTo_TDWVDASmartContractEntryEnvelope(TRACredentialType value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<TRACredentialType>.Enumerate_TDWVDASmartContractEntryEnvelope(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TRACredentialType'.");
                
            }
            TRAClaim ITypeConverter<TRACredentialType>.ConvertTo_TRAClaim(TRACredentialType value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TRACredentialType>.Enumerate_TRAClaim(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TRACredentialContent(TRACredentialContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent' to 'TRACredentialType'.");
                
            }
            TRACredentialContent ITypeConverter<TRACredentialType>.ConvertTo_TRACredentialContent(TRACredentialType value)
            {
                return TypeConverter<TRACredentialContent>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TRACredentialContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent> ITypeConverter<TRACredentialType>.Enumerate_TRACredentialContent(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TRACredentialEnvelope(TRACredentialEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelope' to 'TRACredentialType'.");
                
            }
            TRACredentialEnvelope ITypeConverter<TRACredentialType>.ConvertTo_TRACredentialEnvelope(TRACredentialType value)
            {
                return TypeConverter<TRACredentialEnvelope>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TRACredentialEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelope> ITypeConverter<TRACredentialType>.Enumerate_TRACredentialEnvelope(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TRACredentialEnvelopeSeal(TRACredentialEnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelopeSeal' to 'TRACredentialType'.");
                
            }
            TRACredentialEnvelopeSeal ITypeConverter<TRACredentialType>.ConvertTo_TRACredentialEnvelopeSeal(TRACredentialType value)
            {
                return TypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TRACredentialEnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelopeSeal> ITypeConverter<TRACredentialType>.Enumerate_TRACredentialEnvelopeSeal(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TRACredentialMetadata(TRACredentialMetadata value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialMetadata' to 'TRACredentialType'.");
                
            }
            TRACredentialMetadata ITypeConverter<TRACredentialType>.ConvertTo_TRACredentialMetadata(TRACredentialType value)
            {
                return TypeConverter<TRACredentialMetadata>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TRACredentialMetadata()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialMetadata> ITypeConverter<TRACredentialType>.Enumerate_TRACredentialMetadata(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TRACredentialType'.");
                
            }
            TRAKeyValuePair ITypeConverter<TRACredentialType>.ConvertTo_TRAKeyValuePair(TRACredentialType value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TRACredentialType>.Enumerate_TRAKeyValuePair(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                return (TRACredentialType)value;
                
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertTo_TRACredentialType(TRACredentialType value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TRACredentialType>.Enumerate_TRACredentialType(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TRACredentialType'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TRACredentialType>.ConvertTo_TRAEncryptionFlag(TRACredentialType value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TRACredentialType>.Enumerate_TRAEncryptionFlag(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TRACredentialType'.");
                
            }
            TRAServiceType ITypeConverter<TRACredentialType>.ConvertTo_TRAServiceType(TRACredentialType value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TRACredentialType>.Enumerate_TRAServiceType(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TRACredentialType'.");
                
            }
            TRATrustLevel ITypeConverter<TRACredentialType>.ConvertTo_TRATrustLevel(TRACredentialType value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TRACredentialType>.Enumerate_TRATrustLevel(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TRACredentialType'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TRACredentialType>.ConvertTo_List_List_TRAKeyValuePair(TRACredentialType value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TRACredentialType>.Enumerate_List_List_TRAKeyValuePair(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'TRACredentialType'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<TRACredentialType>.ConvertTo_TDWVDAAccountEntryContent_nullable(TRACredentialType value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<TRACredentialType>.Enumerate_TDWVDAAccountEntryContent_nullable(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'TRACredentialType'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TRACredentialType>.ConvertTo_TDWVDASmartContractEntryContent_nullable(TRACredentialType value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<TRACredentialType>.Enumerate_TDWVDASmartContractEntryContent_nullable(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TRACredentialContent_nullable(TRACredentialContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent?' to 'TRACredentialType'.");
                
            }
            TRACredentialContent? ITypeConverter<TRACredentialType>.ConvertTo_TRACredentialContent_nullable(TRACredentialType value)
            {
                return TypeConverter<TRACredentialContent?>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TRACredentialContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent?> ITypeConverter<TRACredentialType>.Enumerate_TRACredentialContent_nullable(TRACredentialType value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TRAEncryptionFlag'.");
                
            }
            bool ITypeConverter<TRAEncryptionFlag>.ConvertTo_bool(TRAEncryptionFlag value)
            {
                return TypeConverter<bool>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TRAEncryptionFlag>.Enumerate_bool(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TRAEncryptionFlag'.");
                
            }
            long ITypeConverter<TRAEncryptionFlag>.ConvertTo_long(TRAEncryptionFlag value)
            {
                return TypeConverter<long>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TRAEncryptionFlag>.Enumerate_long(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TRAEncryptionFlag intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TRAEncryptionFlag.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TRAEncryptionFlag");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TRAEncryptionFlag>.ConvertTo_string(TRAEncryptionFlag value)
            {
                return TypeConverter<string>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TRAEncryptionFlag>.Enumerate_string(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TRAEncryptionFlag'.");
                
            }
            List<string> ITypeConverter<TRAEncryptionFlag>.ConvertTo_List_string(TRAEncryptionFlag value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TRAEncryptionFlag>.Enumerate_List_string(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TRAEncryptionFlag'.");
                
            }
            List<TRAClaim> ITypeConverter<TRAEncryptionFlag>.ConvertTo_List_TRAClaim(TRAEncryptionFlag value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TRAEncryptionFlag>.Enumerate_List_TRAClaim(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TRAEncryptionFlag'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TRAEncryptionFlag>.ConvertTo_List_TRAKeyValuePair(TRAEncryptionFlag value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TRAEncryptionFlag>.Enumerate_List_TRAKeyValuePair(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'TRAEncryptionFlag'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<TRAEncryptionFlag>.ConvertTo_TDWVDAAccountEntryClaims(TRAEncryptionFlag value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<TRAEncryptionFlag>.Enumerate_TDWVDAAccountEntryClaims(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'TRAEncryptionFlag'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<TRAEncryptionFlag>.ConvertTo_TDWVDAAccountEntryContent(TRAEncryptionFlag value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<TRAEncryptionFlag>.Enumerate_TDWVDAAccountEntryContent(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'TRAEncryptionFlag'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TRAEncryptionFlag>.ConvertTo_TDWVDAAccountEntryEnvelope(TRAEncryptionFlag value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<TRAEncryptionFlag>.Enumerate_TDWVDAAccountEntryEnvelope(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TRAEncryptionFlag'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TRAEncryptionFlag>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TRAEncryptionFlag value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TRAEncryptionFlag>.Enumerate_TDWVDAIdentityRegistryEntryParm(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TRAEncryptionFlag'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TRAEncryptionFlag>.ConvertTo_TDWVDAPostInvocationParameters(TRAEncryptionFlag value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TRAEncryptionFlag>.Enumerate_TDWVDAPostInvocationParameters(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TRAEncryptionFlag'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TRAEncryptionFlag>.ConvertTo_TDWVDARevocationListEntryParm(TRAEncryptionFlag value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TRAEncryptionFlag>.Enumerate_TDWVDARevocationListEntryParm(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TRAEncryptionFlag'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TRAEncryptionFlag>.ConvertTo_TDWVDAServiceEndpointEntryParm(TRAEncryptionFlag value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TRAEncryptionFlag>.Enumerate_TDWVDAServiceEndpointEntryParm(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'TRAEncryptionFlag'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TRAEncryptionFlag>.ConvertTo_TDWVDASmartContractEntryClaims(TRAEncryptionFlag value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<TRAEncryptionFlag>.Enumerate_TDWVDASmartContractEntryClaims(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'TRAEncryptionFlag'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<TRAEncryptionFlag>.ConvertTo_TDWVDASmartContractEntryContent(TRAEncryptionFlag value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<TRAEncryptionFlag>.Enumerate_TDWVDASmartContractEntryContent(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'TRAEncryptionFlag'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TRAEncryptionFlag>.ConvertTo_TDWVDASmartContractEntryEnvelope(TRAEncryptionFlag value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<TRAEncryptionFlag>.Enumerate_TDWVDASmartContractEntryEnvelope(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TRAEncryptionFlag'.");
                
            }
            TRAClaim ITypeConverter<TRAEncryptionFlag>.ConvertTo_TRAClaim(TRAEncryptionFlag value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TRAEncryptionFlag>.Enumerate_TRAClaim(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TRACredentialContent(TRACredentialContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent' to 'TRAEncryptionFlag'.");
                
            }
            TRACredentialContent ITypeConverter<TRAEncryptionFlag>.ConvertTo_TRACredentialContent(TRAEncryptionFlag value)
            {
                return TypeConverter<TRACredentialContent>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TRACredentialContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent> ITypeConverter<TRAEncryptionFlag>.Enumerate_TRACredentialContent(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TRACredentialEnvelope(TRACredentialEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelope' to 'TRAEncryptionFlag'.");
                
            }
            TRACredentialEnvelope ITypeConverter<TRAEncryptionFlag>.ConvertTo_TRACredentialEnvelope(TRAEncryptionFlag value)
            {
                return TypeConverter<TRACredentialEnvelope>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TRACredentialEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelope> ITypeConverter<TRAEncryptionFlag>.Enumerate_TRACredentialEnvelope(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TRACredentialEnvelopeSeal(TRACredentialEnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelopeSeal' to 'TRAEncryptionFlag'.");
                
            }
            TRACredentialEnvelopeSeal ITypeConverter<TRAEncryptionFlag>.ConvertTo_TRACredentialEnvelopeSeal(TRAEncryptionFlag value)
            {
                return TypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TRACredentialEnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelopeSeal> ITypeConverter<TRAEncryptionFlag>.Enumerate_TRACredentialEnvelopeSeal(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TRACredentialMetadata(TRACredentialMetadata value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialMetadata' to 'TRAEncryptionFlag'.");
                
            }
            TRACredentialMetadata ITypeConverter<TRAEncryptionFlag>.ConvertTo_TRACredentialMetadata(TRAEncryptionFlag value)
            {
                return TypeConverter<TRACredentialMetadata>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TRACredentialMetadata()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialMetadata> ITypeConverter<TRAEncryptionFlag>.Enumerate_TRACredentialMetadata(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TRAEncryptionFlag'.");
                
            }
            TRAKeyValuePair ITypeConverter<TRAEncryptionFlag>.ConvertTo_TRAKeyValuePair(TRAEncryptionFlag value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TRAEncryptionFlag>.Enumerate_TRAKeyValuePair(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TRAEncryptionFlag'.");
                
            }
            TRACredentialType ITypeConverter<TRAEncryptionFlag>.ConvertTo_TRACredentialType(TRAEncryptionFlag value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TRAEncryptionFlag>.Enumerate_TRACredentialType(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                return (TRAEncryptionFlag)value;
                
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertTo_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TRAEncryptionFlag>.Enumerate_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TRAEncryptionFlag'.");
                
            }
            TRAServiceType ITypeConverter<TRAEncryptionFlag>.ConvertTo_TRAServiceType(TRAEncryptionFlag value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TRAEncryptionFlag>.Enumerate_TRAServiceType(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TRAEncryptionFlag'.");
                
            }
            TRATrustLevel ITypeConverter<TRAEncryptionFlag>.ConvertTo_TRATrustLevel(TRAEncryptionFlag value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TRAEncryptionFlag>.Enumerate_TRATrustLevel(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TRAEncryptionFlag'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TRAEncryptionFlag>.ConvertTo_List_List_TRAKeyValuePair(TRAEncryptionFlag value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TRAEncryptionFlag>.Enumerate_List_List_TRAKeyValuePair(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'TRAEncryptionFlag'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<TRAEncryptionFlag>.ConvertTo_TDWVDAAccountEntryContent_nullable(TRAEncryptionFlag value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<TRAEncryptionFlag>.Enumerate_TDWVDAAccountEntryContent_nullable(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'TRAEncryptionFlag'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TRAEncryptionFlag>.ConvertTo_TDWVDASmartContractEntryContent_nullable(TRAEncryptionFlag value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<TRAEncryptionFlag>.Enumerate_TDWVDASmartContractEntryContent_nullable(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TRACredentialContent_nullable(TRACredentialContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent?' to 'TRAEncryptionFlag'.");
                
            }
            TRACredentialContent? ITypeConverter<TRAEncryptionFlag>.ConvertTo_TRACredentialContent_nullable(TRAEncryptionFlag value)
            {
                return TypeConverter<TRACredentialContent?>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TRACredentialContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent?> ITypeConverter<TRAEncryptionFlag>.Enumerate_TRACredentialContent_nullable(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TRAServiceType'.");
                
            }
            bool ITypeConverter<TRAServiceType>.ConvertTo_bool(TRAServiceType value)
            {
                return TypeConverter<bool>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TRAServiceType>.Enumerate_bool(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TRAServiceType'.");
                
            }
            long ITypeConverter<TRAServiceType>.ConvertTo_long(TRAServiceType value)
            {
                return TypeConverter<long>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TRAServiceType>.Enumerate_long(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TRAServiceType intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TRAServiceType.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TRAServiceType");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TRAServiceType>.ConvertTo_string(TRAServiceType value)
            {
                return TypeConverter<string>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TRAServiceType>.Enumerate_string(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TRAServiceType'.");
                
            }
            List<string> ITypeConverter<TRAServiceType>.ConvertTo_List_string(TRAServiceType value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TRAServiceType>.Enumerate_List_string(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TRAServiceType'.");
                
            }
            List<TRAClaim> ITypeConverter<TRAServiceType>.ConvertTo_List_TRAClaim(TRAServiceType value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TRAServiceType>.Enumerate_List_TRAClaim(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TRAServiceType'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TRAServiceType>.ConvertTo_List_TRAKeyValuePair(TRAServiceType value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TRAServiceType>.Enumerate_List_TRAKeyValuePair(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'TRAServiceType'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<TRAServiceType>.ConvertTo_TDWVDAAccountEntryClaims(TRAServiceType value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<TRAServiceType>.Enumerate_TDWVDAAccountEntryClaims(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'TRAServiceType'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<TRAServiceType>.ConvertTo_TDWVDAAccountEntryContent(TRAServiceType value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<TRAServiceType>.Enumerate_TDWVDAAccountEntryContent(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'TRAServiceType'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TRAServiceType>.ConvertTo_TDWVDAAccountEntryEnvelope(TRAServiceType value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<TRAServiceType>.Enumerate_TDWVDAAccountEntryEnvelope(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TRAServiceType'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TRAServiceType>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TRAServiceType value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TRAServiceType>.Enumerate_TDWVDAIdentityRegistryEntryParm(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TRAServiceType'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TRAServiceType>.ConvertTo_TDWVDAPostInvocationParameters(TRAServiceType value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TRAServiceType>.Enumerate_TDWVDAPostInvocationParameters(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TRAServiceType'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TRAServiceType>.ConvertTo_TDWVDARevocationListEntryParm(TRAServiceType value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TRAServiceType>.Enumerate_TDWVDARevocationListEntryParm(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TRAServiceType'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TRAServiceType>.ConvertTo_TDWVDAServiceEndpointEntryParm(TRAServiceType value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TRAServiceType>.Enumerate_TDWVDAServiceEndpointEntryParm(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'TRAServiceType'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TRAServiceType>.ConvertTo_TDWVDASmartContractEntryClaims(TRAServiceType value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<TRAServiceType>.Enumerate_TDWVDASmartContractEntryClaims(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'TRAServiceType'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<TRAServiceType>.ConvertTo_TDWVDASmartContractEntryContent(TRAServiceType value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<TRAServiceType>.Enumerate_TDWVDASmartContractEntryContent(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'TRAServiceType'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TRAServiceType>.ConvertTo_TDWVDASmartContractEntryEnvelope(TRAServiceType value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<TRAServiceType>.Enumerate_TDWVDASmartContractEntryEnvelope(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TRAServiceType'.");
                
            }
            TRAClaim ITypeConverter<TRAServiceType>.ConvertTo_TRAClaim(TRAServiceType value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TRAServiceType>.Enumerate_TRAClaim(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TRACredentialContent(TRACredentialContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent' to 'TRAServiceType'.");
                
            }
            TRACredentialContent ITypeConverter<TRAServiceType>.ConvertTo_TRACredentialContent(TRAServiceType value)
            {
                return TypeConverter<TRACredentialContent>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TRACredentialContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent> ITypeConverter<TRAServiceType>.Enumerate_TRACredentialContent(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TRACredentialEnvelope(TRACredentialEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelope' to 'TRAServiceType'.");
                
            }
            TRACredentialEnvelope ITypeConverter<TRAServiceType>.ConvertTo_TRACredentialEnvelope(TRAServiceType value)
            {
                return TypeConverter<TRACredentialEnvelope>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TRACredentialEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelope> ITypeConverter<TRAServiceType>.Enumerate_TRACredentialEnvelope(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TRACredentialEnvelopeSeal(TRACredentialEnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelopeSeal' to 'TRAServiceType'.");
                
            }
            TRACredentialEnvelopeSeal ITypeConverter<TRAServiceType>.ConvertTo_TRACredentialEnvelopeSeal(TRAServiceType value)
            {
                return TypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TRACredentialEnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelopeSeal> ITypeConverter<TRAServiceType>.Enumerate_TRACredentialEnvelopeSeal(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TRACredentialMetadata(TRACredentialMetadata value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialMetadata' to 'TRAServiceType'.");
                
            }
            TRACredentialMetadata ITypeConverter<TRAServiceType>.ConvertTo_TRACredentialMetadata(TRAServiceType value)
            {
                return TypeConverter<TRACredentialMetadata>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TRACredentialMetadata()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialMetadata> ITypeConverter<TRAServiceType>.Enumerate_TRACredentialMetadata(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TRAServiceType'.");
                
            }
            TRAKeyValuePair ITypeConverter<TRAServiceType>.ConvertTo_TRAKeyValuePair(TRAServiceType value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TRAServiceType>.Enumerate_TRAKeyValuePair(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TRAServiceType'.");
                
            }
            TRACredentialType ITypeConverter<TRAServiceType>.ConvertTo_TRACredentialType(TRAServiceType value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TRAServiceType>.Enumerate_TRACredentialType(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TRAServiceType'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TRAServiceType>.ConvertTo_TRAEncryptionFlag(TRAServiceType value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TRAServiceType>.Enumerate_TRAEncryptionFlag(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                return (TRAServiceType)value;
                
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertTo_TRAServiceType(TRAServiceType value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TRAServiceType>.Enumerate_TRAServiceType(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TRAServiceType'.");
                
            }
            TRATrustLevel ITypeConverter<TRAServiceType>.ConvertTo_TRATrustLevel(TRAServiceType value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TRAServiceType>.Enumerate_TRATrustLevel(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TRAServiceType'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TRAServiceType>.ConvertTo_List_List_TRAKeyValuePair(TRAServiceType value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TRAServiceType>.Enumerate_List_List_TRAKeyValuePair(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'TRAServiceType'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<TRAServiceType>.ConvertTo_TDWVDAAccountEntryContent_nullable(TRAServiceType value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<TRAServiceType>.Enumerate_TDWVDAAccountEntryContent_nullable(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'TRAServiceType'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TRAServiceType>.ConvertTo_TDWVDASmartContractEntryContent_nullable(TRAServiceType value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<TRAServiceType>.Enumerate_TDWVDASmartContractEntryContent_nullable(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TRACredentialContent_nullable(TRACredentialContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent?' to 'TRAServiceType'.");
                
            }
            TRACredentialContent? ITypeConverter<TRAServiceType>.ConvertTo_TRACredentialContent_nullable(TRAServiceType value)
            {
                return TypeConverter<TRACredentialContent?>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TRACredentialContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent?> ITypeConverter<TRAServiceType>.Enumerate_TRACredentialContent_nullable(TRAServiceType value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TRATrustLevel'.");
                
            }
            bool ITypeConverter<TRATrustLevel>.ConvertTo_bool(TRATrustLevel value)
            {
                return TypeConverter<bool>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TRATrustLevel>.Enumerate_bool(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TRATrustLevel'.");
                
            }
            long ITypeConverter<TRATrustLevel>.ConvertTo_long(TRATrustLevel value)
            {
                return TypeConverter<long>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TRATrustLevel>.Enumerate_long(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TRATrustLevel intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TRATrustLevel.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TRATrustLevel");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TRATrustLevel>.ConvertTo_string(TRATrustLevel value)
            {
                return TypeConverter<string>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TRATrustLevel>.Enumerate_string(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TRATrustLevel'.");
                
            }
            List<string> ITypeConverter<TRATrustLevel>.ConvertTo_List_string(TRATrustLevel value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TRATrustLevel>.Enumerate_List_string(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TRATrustLevel'.");
                
            }
            List<TRAClaim> ITypeConverter<TRATrustLevel>.ConvertTo_List_TRAClaim(TRATrustLevel value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TRATrustLevel>.Enumerate_List_TRAClaim(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TRATrustLevel'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TRATrustLevel>.ConvertTo_List_TRAKeyValuePair(TRATrustLevel value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TRATrustLevel>.Enumerate_List_TRAKeyValuePair(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'TRATrustLevel'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<TRATrustLevel>.ConvertTo_TDWVDAAccountEntryClaims(TRATrustLevel value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<TRATrustLevel>.Enumerate_TDWVDAAccountEntryClaims(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'TRATrustLevel'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<TRATrustLevel>.ConvertTo_TDWVDAAccountEntryContent(TRATrustLevel value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<TRATrustLevel>.Enumerate_TDWVDAAccountEntryContent(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'TRATrustLevel'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TRATrustLevel>.ConvertTo_TDWVDAAccountEntryEnvelope(TRATrustLevel value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<TRATrustLevel>.Enumerate_TDWVDAAccountEntryEnvelope(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TRATrustLevel'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TRATrustLevel>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TRATrustLevel value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TRATrustLevel>.Enumerate_TDWVDAIdentityRegistryEntryParm(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TRATrustLevel'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TRATrustLevel>.ConvertTo_TDWVDAPostInvocationParameters(TRATrustLevel value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TRATrustLevel>.Enumerate_TDWVDAPostInvocationParameters(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TRATrustLevel'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TRATrustLevel>.ConvertTo_TDWVDARevocationListEntryParm(TRATrustLevel value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TRATrustLevel>.Enumerate_TDWVDARevocationListEntryParm(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TRATrustLevel'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TRATrustLevel>.ConvertTo_TDWVDAServiceEndpointEntryParm(TRATrustLevel value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TRATrustLevel>.Enumerate_TDWVDAServiceEndpointEntryParm(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'TRATrustLevel'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TRATrustLevel>.ConvertTo_TDWVDASmartContractEntryClaims(TRATrustLevel value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<TRATrustLevel>.Enumerate_TDWVDASmartContractEntryClaims(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'TRATrustLevel'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<TRATrustLevel>.ConvertTo_TDWVDASmartContractEntryContent(TRATrustLevel value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<TRATrustLevel>.Enumerate_TDWVDASmartContractEntryContent(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'TRATrustLevel'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TRATrustLevel>.ConvertTo_TDWVDASmartContractEntryEnvelope(TRATrustLevel value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<TRATrustLevel>.Enumerate_TDWVDASmartContractEntryEnvelope(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TRATrustLevel'.");
                
            }
            TRAClaim ITypeConverter<TRATrustLevel>.ConvertTo_TRAClaim(TRATrustLevel value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TRATrustLevel>.Enumerate_TRAClaim(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TRACredentialContent(TRACredentialContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent' to 'TRATrustLevel'.");
                
            }
            TRACredentialContent ITypeConverter<TRATrustLevel>.ConvertTo_TRACredentialContent(TRATrustLevel value)
            {
                return TypeConverter<TRACredentialContent>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TRACredentialContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent> ITypeConverter<TRATrustLevel>.Enumerate_TRACredentialContent(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TRACredentialEnvelope(TRACredentialEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelope' to 'TRATrustLevel'.");
                
            }
            TRACredentialEnvelope ITypeConverter<TRATrustLevel>.ConvertTo_TRACredentialEnvelope(TRATrustLevel value)
            {
                return TypeConverter<TRACredentialEnvelope>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TRACredentialEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelope> ITypeConverter<TRATrustLevel>.Enumerate_TRACredentialEnvelope(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TRACredentialEnvelopeSeal(TRACredentialEnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelopeSeal' to 'TRATrustLevel'.");
                
            }
            TRACredentialEnvelopeSeal ITypeConverter<TRATrustLevel>.ConvertTo_TRACredentialEnvelopeSeal(TRATrustLevel value)
            {
                return TypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TRACredentialEnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelopeSeal> ITypeConverter<TRATrustLevel>.Enumerate_TRACredentialEnvelopeSeal(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TRACredentialMetadata(TRACredentialMetadata value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialMetadata' to 'TRATrustLevel'.");
                
            }
            TRACredentialMetadata ITypeConverter<TRATrustLevel>.ConvertTo_TRACredentialMetadata(TRATrustLevel value)
            {
                return TypeConverter<TRACredentialMetadata>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TRACredentialMetadata()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialMetadata> ITypeConverter<TRATrustLevel>.Enumerate_TRACredentialMetadata(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TRATrustLevel'.");
                
            }
            TRAKeyValuePair ITypeConverter<TRATrustLevel>.ConvertTo_TRAKeyValuePair(TRATrustLevel value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TRATrustLevel>.Enumerate_TRAKeyValuePair(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TRATrustLevel'.");
                
            }
            TRACredentialType ITypeConverter<TRATrustLevel>.ConvertTo_TRACredentialType(TRATrustLevel value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TRATrustLevel>.Enumerate_TRACredentialType(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TRATrustLevel'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TRATrustLevel>.ConvertTo_TRAEncryptionFlag(TRATrustLevel value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TRATrustLevel>.Enumerate_TRAEncryptionFlag(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TRATrustLevel'.");
                
            }
            TRAServiceType ITypeConverter<TRATrustLevel>.ConvertTo_TRAServiceType(TRATrustLevel value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TRATrustLevel>.Enumerate_TRAServiceType(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                return (TRATrustLevel)value;
                
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertTo_TRATrustLevel(TRATrustLevel value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TRATrustLevel>.Enumerate_TRATrustLevel(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TRATrustLevel'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TRATrustLevel>.ConvertTo_List_List_TRAKeyValuePair(TRATrustLevel value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TRATrustLevel>.Enumerate_List_List_TRAKeyValuePair(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'TRATrustLevel'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<TRATrustLevel>.ConvertTo_TDWVDAAccountEntryContent_nullable(TRATrustLevel value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<TRATrustLevel>.Enumerate_TDWVDAAccountEntryContent_nullable(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'TRATrustLevel'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TRATrustLevel>.ConvertTo_TDWVDASmartContractEntryContent_nullable(TRATrustLevel value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<TRATrustLevel>.Enumerate_TDWVDASmartContractEntryContent_nullable(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TRACredentialContent_nullable(TRACredentialContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent?' to 'TRATrustLevel'.");
                
            }
            TRACredentialContent? ITypeConverter<TRATrustLevel>.ConvertTo_TRACredentialContent_nullable(TRATrustLevel value)
            {
                return TypeConverter<TRACredentialContent?>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TRACredentialContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent?> ITypeConverter<TRATrustLevel>.Enumerate_TRACredentialContent_nullable(TRATrustLevel value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            bool ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_bool(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<bool>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_bool(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            long ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_long(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<long>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_long(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    List<List<TRAKeyValuePair>> intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = ExternalParser.TryParse_List_List_TRAKeyValuePair(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        try
                        {
                            List<TRAKeyValuePair> element = TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_string(value);
                            intermediate_result = new List<List<TRAKeyValuePair>>();
                            intermediate_result.Add(element);
                        }
                        catch
                        {
                            throw new ArgumentException("Cannot parse \"" + value + "\" into either 'List<List<TRAKeyValuePair>>' or 'List<TRAKeyValuePair>'.");
                        }
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_string(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<string>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_string(List<List<TRAKeyValuePair>> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<string>.ConvertFrom_List_TRAKeyValuePair(element);
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_List_string(List<string> value)
            {
                
                {
                    List<List<TRAKeyValuePair>> intermediate_result = new List<List<TRAKeyValuePair>>();
                    foreach (var element in value)
                    {
                        intermediate_result.Add(TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_string(element));
                    }
                    return intermediate_result;
                }
                
            }
            List<string> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_List_string(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<List<string>>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_CONVERTLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_List_string(List<List<TRAKeyValuePair>> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<List<string>>.ConvertFrom_List_TRAKeyValuePair(element);
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            List<TRAClaim> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_List_TRAClaim(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_List_TRAClaim(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                {
                    List<List<TRAKeyValuePair>> intermediate_result = new List<List<TRAKeyValuePair>>();
                    foreach (var element in value)
                    {
                        intermediate_result.Add(TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRAKeyValuePair(element));
                    }
                    return intermediate_result;
                }
                
            }
            List<TRAKeyValuePair> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_List_TRAKeyValuePair(element);
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TDWVDAAccountEntryClaims(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TDWVDAAccountEntryClaims(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TDWVDAAccountEntryContent(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TDWVDAAccountEntryContent(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TDWVDAAccountEntryEnvelope(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TDWVDAAccountEntryEnvelope(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TDWVDAIdentityRegistryEntryParm(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TDWVDAIdentityRegistryEntryParm(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TDWVDAPostInvocationParameters(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TDWVDAPostInvocationParameters(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TDWVDARevocationListEntryParm(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TDWVDARevocationListEntryParm(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TDWVDAServiceEndpointEntryParm(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TDWVDAServiceEndpointEntryParm(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TDWVDASmartContractEntryClaims(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TDWVDASmartContractEntryClaims(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TDWVDASmartContractEntryContent(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TDWVDASmartContractEntryContent(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TDWVDASmartContractEntryEnvelope(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TDWVDASmartContractEntryEnvelope(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TRAClaim ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TRAClaim(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TRAClaim(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRACredentialContent(TRACredentialContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TRACredentialContent ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TRACredentialContent(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TRACredentialContent>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TRACredentialContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TRACredentialContent(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRACredentialEnvelope(TRACredentialEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelope' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TRACredentialEnvelope ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TRACredentialEnvelope(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TRACredentialEnvelope>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TRACredentialEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelope> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TRACredentialEnvelope(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRACredentialEnvelopeSeal(TRACredentialEnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelopeSeal' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TRACredentialEnvelopeSeal ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TRACredentialEnvelopeSeal(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TRACredentialEnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelopeSeal> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TRACredentialEnvelopeSeal(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRACredentialMetadata(TRACredentialMetadata value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialMetadata' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TRACredentialMetadata ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TRACredentialMetadata(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TRACredentialMetadata>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TRACredentialMetadata()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialMetadata> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TRACredentialMetadata(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                {
                    List<List<TRAKeyValuePair>> intermediate_result = new List<List<TRAKeyValuePair>>();
                    intermediate_result.Add(TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRAKeyValuePair(value));
                    return intermediate_result;
                }
                
            }
            TRAKeyValuePair ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TRACredentialType ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TRACredentialType(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TRACredentialType(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TRAEncryptionFlag ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TRAEncryptionFlag(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TRAEncryptionFlag(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TRAServiceType ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TRAServiceType(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TRAServiceType(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TRATrustLevel ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TRATrustLevel(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TRATrustLevel(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                return (List<List<TRAKeyValuePair>>)value;
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_List_TRAKeyValuePair(element);
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TDWVDAAccountEntryContent_nullable(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TDWVDAAccountEntryContent_nullable(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TDWVDASmartContractEntryContent_nullable(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TDWVDASmartContractEntryContent_nullable(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRACredentialContent_nullable(TRACredentialContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent?' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TRACredentialContent? ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TRACredentialContent_nullable(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TRACredentialContent?>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TRACredentialContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent?> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TRACredentialContent_nullable(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TDWVDAAccountEntryContent?'.");
                
            }
            bool ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_bool(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<bool>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_bool(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TDWVDAAccountEntryContent?'.");
                
            }
            long ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_long(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<long>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_long(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TDWVDAAccountEntryContent? intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = ExternalParser.TryParse_TDWVDAAccountEntryContent_nullable(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TDWVDAAccountEntryContent?");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_string(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<string>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_string(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TDWVDAAccountEntryContent?'.");
                
            }
            List<string> ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_List_string(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_List_string(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TDWVDAAccountEntryContent?'.");
                
            }
            List<TRAClaim> ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_List_TRAClaim(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_List_TRAClaim(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TDWVDAAccountEntryContent?'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_List_TRAKeyValuePair(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_List_TRAKeyValuePair(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'TDWVDAAccountEntryContent?'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_TDWVDAAccountEntryClaims(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_TDWVDAAccountEntryClaims(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                return (TDWVDAAccountEntryContent?)value;
                
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_EXTRACTNULLABLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'TDWVDAAccountEntryContent?'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TDWVDAAccountEntryContent?'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_TDWVDAIdentityRegistryEntryParm(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TDWVDAAccountEntryContent?'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_TDWVDAPostInvocationParameters(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_TDWVDAPostInvocationParameters(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TDWVDAAccountEntryContent?'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_TDWVDARevocationListEntryParm(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_TDWVDARevocationListEntryParm(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TDWVDAAccountEntryContent?'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_TDWVDAServiceEndpointEntryParm(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_TDWVDAServiceEndpointEntryParm(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'TDWVDAAccountEntryContent?'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_TDWVDASmartContractEntryClaims(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_TDWVDASmartContractEntryClaims(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'TDWVDAAccountEntryContent?'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_TDWVDASmartContractEntryContent(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_TDWVDASmartContractEntryContent(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'TDWVDAAccountEntryContent?'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_TDWVDASmartContractEntryEnvelope(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_TDWVDASmartContractEntryEnvelope(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TDWVDAAccountEntryContent?'.");
                
            }
            TRAClaim ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_TRAClaim(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_TRAClaim(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TRACredentialContent(TRACredentialContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent' to 'TDWVDAAccountEntryContent?'.");
                
            }
            TRACredentialContent ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_TRACredentialContent(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<TRACredentialContent>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_TRACredentialContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_TRACredentialContent(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TRACredentialEnvelope(TRACredentialEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelope' to 'TDWVDAAccountEntryContent?'.");
                
            }
            TRACredentialEnvelope ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_TRACredentialEnvelope(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<TRACredentialEnvelope>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_TRACredentialEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelope> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_TRACredentialEnvelope(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TRACredentialEnvelopeSeal(TRACredentialEnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelopeSeal' to 'TDWVDAAccountEntryContent?'.");
                
            }
            TRACredentialEnvelopeSeal ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_TRACredentialEnvelopeSeal(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_TRACredentialEnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelopeSeal> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_TRACredentialEnvelopeSeal(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TRACredentialMetadata(TRACredentialMetadata value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialMetadata' to 'TDWVDAAccountEntryContent?'.");
                
            }
            TRACredentialMetadata ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_TRACredentialMetadata(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<TRACredentialMetadata>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_TRACredentialMetadata()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialMetadata> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_TRACredentialMetadata(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TDWVDAAccountEntryContent?'.");
                
            }
            TRAKeyValuePair ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_TRAKeyValuePair(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_TRAKeyValuePair(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TDWVDAAccountEntryContent?'.");
                
            }
            TRACredentialType ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_TRACredentialType(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_TRACredentialType(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TDWVDAAccountEntryContent?'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_TRAEncryptionFlag(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_TRAEncryptionFlag(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TDWVDAAccountEntryContent?'.");
                
            }
            TRAServiceType ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_TRAServiceType(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_TRAServiceType(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TDWVDAAccountEntryContent?'.");
                
            }
            TRATrustLevel ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_TRATrustLevel(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_TRATrustLevel(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TDWVDAAccountEntryContent?'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_List_List_TRAKeyValuePair(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_List_List_TRAKeyValuePair(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                return (TDWVDAAccountEntryContent?)value;
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'TDWVDAAccountEntryContent?'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_TDWVDASmartContractEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_TDWVDASmartContractEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TRACredentialContent_nullable(TRACredentialContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent?' to 'TDWVDAAccountEntryContent?'.");
                
            }
            TRACredentialContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_TRACredentialContent_nullable(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<TRACredentialContent?>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_TRACredentialContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent?> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_TRACredentialContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            bool ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_bool(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<bool>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_bool(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            long ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_long(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<long>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_long(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TDWVDASmartContractEntryContent? intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = ExternalParser.TryParse_TDWVDASmartContractEntryContent_nullable(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TDWVDASmartContractEntryContent?");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_string(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<string>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_string(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            List<string> ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_List_string(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_List_string(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            List<TRAClaim> ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_List_TRAClaim(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_List_TRAClaim(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_List_TRAKeyValuePair(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_List_TRAKeyValuePair(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_TDWVDAAccountEntryClaims(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_TDWVDAAccountEntryClaims(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_TDWVDAAccountEntryContent(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_TDWVDAAccountEntryContent(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_TDWVDAAccountEntryEnvelope(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_TDWVDAAccountEntryEnvelope(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_TDWVDAIdentityRegistryEntryParm(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_TDWVDAPostInvocationParameters(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_TDWVDAPostInvocationParameters(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_TDWVDARevocationListEntryParm(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_TDWVDARevocationListEntryParm(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_TDWVDAServiceEndpointEntryParm(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_TDWVDAServiceEndpointEntryParm(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                return (TDWVDASmartContractEntryContent?)value;
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_EXTRACTNULLABLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            TRAClaim ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_TRAClaim(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_TRAClaim(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TRACredentialContent(TRACredentialContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            TRACredentialContent ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_TRACredentialContent(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<TRACredentialContent>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_TRACredentialContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_TRACredentialContent(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TRACredentialEnvelope(TRACredentialEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelope' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            TRACredentialEnvelope ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_TRACredentialEnvelope(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<TRACredentialEnvelope>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_TRACredentialEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelope> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_TRACredentialEnvelope(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TRACredentialEnvelopeSeal(TRACredentialEnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelopeSeal' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            TRACredentialEnvelopeSeal ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_TRACredentialEnvelopeSeal(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_TRACredentialEnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelopeSeal> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_TRACredentialEnvelopeSeal(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TRACredentialMetadata(TRACredentialMetadata value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialMetadata' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            TRACredentialMetadata ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_TRACredentialMetadata(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<TRACredentialMetadata>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_TRACredentialMetadata()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialMetadata> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_TRACredentialMetadata(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            TRAKeyValuePair ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_TRAKeyValuePair(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_TRAKeyValuePair(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            TRACredentialType ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_TRACredentialType(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_TRACredentialType(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_TRAEncryptionFlag(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_TRAEncryptionFlag(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            TRAServiceType ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_TRAServiceType(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_TRAServiceType(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            TRATrustLevel ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_TRATrustLevel(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_TRATrustLevel(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_List_List_TRAKeyValuePair(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_List_List_TRAKeyValuePair(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_TDWVDAAccountEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_TDWVDAAccountEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                return (TDWVDASmartContractEntryContent?)value;
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TRACredentialContent_nullable(TRACredentialContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialContent?' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            TRACredentialContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_TRACredentialContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<TRACredentialContent?>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_TRACredentialContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent?> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_TRACredentialContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TRACredentialContent? ITypeConverter<TRACredentialContent?>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TRACredentialContent?'.");
                
            }
            bool ITypeConverter<TRACredentialContent?>.ConvertTo_bool(TRACredentialContent? value)
            {
                return TypeConverter<bool>.ConvertFrom_TRACredentialContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent?>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TRACredentialContent?>.Enumerate_bool(TRACredentialContent? value)
            {
                
                yield break;
            }
            TRACredentialContent? ITypeConverter<TRACredentialContent?>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TRACredentialContent?'.");
                
            }
            long ITypeConverter<TRACredentialContent?>.ConvertTo_long(TRACredentialContent? value)
            {
                return TypeConverter<long>.ConvertFrom_TRACredentialContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent?>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TRACredentialContent?>.Enumerate_long(TRACredentialContent? value)
            {
                
                yield break;
            }
            TRACredentialContent? ITypeConverter<TRACredentialContent?>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TRACredentialContent? intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = ExternalParser.TryParse_TRACredentialContent_nullable(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TRACredentialContent?");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TRACredentialContent?>.ConvertTo_string(TRACredentialContent? value)
            {
                return TypeConverter<string>.ConvertFrom_TRACredentialContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent?>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TRACredentialContent?>.Enumerate_string(TRACredentialContent? value)
            {
                
                yield break;
            }
            TRACredentialContent? ITypeConverter<TRACredentialContent?>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TRACredentialContent?'.");
                
            }
            List<string> ITypeConverter<TRACredentialContent?>.ConvertTo_List_string(TRACredentialContent? value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TRACredentialContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent?>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TRACredentialContent?>.Enumerate_List_string(TRACredentialContent? value)
            {
                
                yield break;
            }
            TRACredentialContent? ITypeConverter<TRACredentialContent?>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TRACredentialContent?'.");
                
            }
            List<TRAClaim> ITypeConverter<TRACredentialContent?>.ConvertTo_List_TRAClaim(TRACredentialContent? value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TRACredentialContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent?>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TRACredentialContent?>.Enumerate_List_TRAClaim(TRACredentialContent? value)
            {
                
                yield break;
            }
            TRACredentialContent? ITypeConverter<TRACredentialContent?>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TRACredentialContent?'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TRACredentialContent?>.ConvertTo_List_TRAKeyValuePair(TRACredentialContent? value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRACredentialContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent?>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TRACredentialContent?>.Enumerate_List_TRAKeyValuePair(TRACredentialContent? value)
            {
                
                yield break;
            }
            TRACredentialContent? ITypeConverter<TRACredentialContent?>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'TRACredentialContent?'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<TRACredentialContent?>.ConvertTo_TDWVDAAccountEntryClaims(TRACredentialContent? value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TRACredentialContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent?>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<TRACredentialContent?>.Enumerate_TDWVDAAccountEntryClaims(TRACredentialContent? value)
            {
                
                yield break;
            }
            TRACredentialContent? ITypeConverter<TRACredentialContent?>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'TRACredentialContent?'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<TRACredentialContent?>.ConvertTo_TDWVDAAccountEntryContent(TRACredentialContent? value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TRACredentialContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent?>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<TRACredentialContent?>.Enumerate_TDWVDAAccountEntryContent(TRACredentialContent? value)
            {
                
                yield break;
            }
            TRACredentialContent? ITypeConverter<TRACredentialContent?>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'TRACredentialContent?'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TRACredentialContent?>.ConvertTo_TDWVDAAccountEntryEnvelope(TRACredentialContent? value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TRACredentialContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent?>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<TRACredentialContent?>.Enumerate_TDWVDAAccountEntryEnvelope(TRACredentialContent? value)
            {
                
                yield break;
            }
            TRACredentialContent? ITypeConverter<TRACredentialContent?>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TRACredentialContent?'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TRACredentialContent?>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TRACredentialContent? value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRACredentialContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent?>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TRACredentialContent?>.Enumerate_TDWVDAIdentityRegistryEntryParm(TRACredentialContent? value)
            {
                
                yield break;
            }
            TRACredentialContent? ITypeConverter<TRACredentialContent?>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TRACredentialContent?'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TRACredentialContent?>.ConvertTo_TDWVDAPostInvocationParameters(TRACredentialContent? value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRACredentialContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent?>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TRACredentialContent?>.Enumerate_TDWVDAPostInvocationParameters(TRACredentialContent? value)
            {
                
                yield break;
            }
            TRACredentialContent? ITypeConverter<TRACredentialContent?>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TRACredentialContent?'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TRACredentialContent?>.ConvertTo_TDWVDARevocationListEntryParm(TRACredentialContent? value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRACredentialContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent?>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TRACredentialContent?>.Enumerate_TDWVDARevocationListEntryParm(TRACredentialContent? value)
            {
                
                yield break;
            }
            TRACredentialContent? ITypeConverter<TRACredentialContent?>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TRACredentialContent?'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TRACredentialContent?>.ConvertTo_TDWVDAServiceEndpointEntryParm(TRACredentialContent? value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRACredentialContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent?>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TRACredentialContent?>.Enumerate_TDWVDAServiceEndpointEntryParm(TRACredentialContent? value)
            {
                
                yield break;
            }
            TRACredentialContent? ITypeConverter<TRACredentialContent?>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'TRACredentialContent?'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TRACredentialContent?>.ConvertTo_TDWVDASmartContractEntryClaims(TRACredentialContent? value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TRACredentialContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent?>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<TRACredentialContent?>.Enumerate_TDWVDASmartContractEntryClaims(TRACredentialContent? value)
            {
                
                yield break;
            }
            TRACredentialContent? ITypeConverter<TRACredentialContent?>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'TRACredentialContent?'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<TRACredentialContent?>.ConvertTo_TDWVDASmartContractEntryContent(TRACredentialContent? value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TRACredentialContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent?>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<TRACredentialContent?>.Enumerate_TDWVDASmartContractEntryContent(TRACredentialContent? value)
            {
                
                yield break;
            }
            TRACredentialContent? ITypeConverter<TRACredentialContent?>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'TRACredentialContent?'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TRACredentialContent?>.ConvertTo_TDWVDASmartContractEntryEnvelope(TRACredentialContent? value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TRACredentialContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent?>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<TRACredentialContent?>.Enumerate_TDWVDASmartContractEntryEnvelope(TRACredentialContent? value)
            {
                
                yield break;
            }
            TRACredentialContent? ITypeConverter<TRACredentialContent?>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TRACredentialContent?'.");
                
            }
            TRAClaim ITypeConverter<TRACredentialContent?>.ConvertTo_TRAClaim(TRACredentialContent? value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TRACredentialContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent?>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TRACredentialContent?>.Enumerate_TRAClaim(TRACredentialContent? value)
            {
                
                yield break;
            }
            TRACredentialContent? ITypeConverter<TRACredentialContent?>.ConvertFrom_TRACredentialContent(TRACredentialContent value)
            {
                
                return (TRACredentialContent?)value;
                
            }
            TRACredentialContent ITypeConverter<TRACredentialContent?>.ConvertTo_TRACredentialContent(TRACredentialContent? value)
            {
                return TypeConverter<TRACredentialContent>.ConvertFrom_TRACredentialContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent?>.GetConversionActionTo_TRACredentialContent()
            {
                
                return TypeConversionAction.TC_EXTRACTNULLABLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent> ITypeConverter<TRACredentialContent?>.Enumerate_TRACredentialContent(TRACredentialContent? value)
            {
                
                yield break;
            }
            TRACredentialContent? ITypeConverter<TRACredentialContent?>.ConvertFrom_TRACredentialEnvelope(TRACredentialEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelope' to 'TRACredentialContent?'.");
                
            }
            TRACredentialEnvelope ITypeConverter<TRACredentialContent?>.ConvertTo_TRACredentialEnvelope(TRACredentialContent? value)
            {
                return TypeConverter<TRACredentialEnvelope>.ConvertFrom_TRACredentialContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent?>.GetConversionActionTo_TRACredentialEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelope> ITypeConverter<TRACredentialContent?>.Enumerate_TRACredentialEnvelope(TRACredentialContent? value)
            {
                
                yield break;
            }
            TRACredentialContent? ITypeConverter<TRACredentialContent?>.ConvertFrom_TRACredentialEnvelopeSeal(TRACredentialEnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialEnvelopeSeal' to 'TRACredentialContent?'.");
                
            }
            TRACredentialEnvelopeSeal ITypeConverter<TRACredentialContent?>.ConvertTo_TRACredentialEnvelopeSeal(TRACredentialContent? value)
            {
                return TypeConverter<TRACredentialEnvelopeSeal>.ConvertFrom_TRACredentialContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent?>.GetConversionActionTo_TRACredentialEnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialEnvelopeSeal> ITypeConverter<TRACredentialContent?>.Enumerate_TRACredentialEnvelopeSeal(TRACredentialContent? value)
            {
                
                yield break;
            }
            TRACredentialContent? ITypeConverter<TRACredentialContent?>.ConvertFrom_TRACredentialMetadata(TRACredentialMetadata value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialMetadata' to 'TRACredentialContent?'.");
                
            }
            TRACredentialMetadata ITypeConverter<TRACredentialContent?>.ConvertTo_TRACredentialMetadata(TRACredentialContent? value)
            {
                return TypeConverter<TRACredentialMetadata>.ConvertFrom_TRACredentialContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent?>.GetConversionActionTo_TRACredentialMetadata()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialMetadata> ITypeConverter<TRACredentialContent?>.Enumerate_TRACredentialMetadata(TRACredentialContent? value)
            {
                
                yield break;
            }
            TRACredentialContent? ITypeConverter<TRACredentialContent?>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TRACredentialContent?'.");
                
            }
            TRAKeyValuePair ITypeConverter<TRACredentialContent?>.ConvertTo_TRAKeyValuePair(TRACredentialContent? value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TRACredentialContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent?>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TRACredentialContent?>.Enumerate_TRAKeyValuePair(TRACredentialContent? value)
            {
                
                yield break;
            }
            TRACredentialContent? ITypeConverter<TRACredentialContent?>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TRACredentialContent?'.");
                
            }
            TRACredentialType ITypeConverter<TRACredentialContent?>.ConvertTo_TRACredentialType(TRACredentialContent? value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TRACredentialContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent?>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TRACredentialContent?>.Enumerate_TRACredentialType(TRACredentialContent? value)
            {
                
                yield break;
            }
            TRACredentialContent? ITypeConverter<TRACredentialContent?>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TRACredentialContent?'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TRACredentialContent?>.ConvertTo_TRAEncryptionFlag(TRACredentialContent? value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TRACredentialContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent?>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TRACredentialContent?>.Enumerate_TRAEncryptionFlag(TRACredentialContent? value)
            {
                
                yield break;
            }
            TRACredentialContent? ITypeConverter<TRACredentialContent?>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TRACredentialContent?'.");
                
            }
            TRAServiceType ITypeConverter<TRACredentialContent?>.ConvertTo_TRAServiceType(TRACredentialContent? value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TRACredentialContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent?>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TRACredentialContent?>.Enumerate_TRAServiceType(TRACredentialContent? value)
            {
                
                yield break;
            }
            TRACredentialContent? ITypeConverter<TRACredentialContent?>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TRACredentialContent?'.");
                
            }
            TRATrustLevel ITypeConverter<TRACredentialContent?>.ConvertTo_TRATrustLevel(TRACredentialContent? value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TRACredentialContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent?>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TRACredentialContent?>.Enumerate_TRATrustLevel(TRACredentialContent? value)
            {
                
                yield break;
            }
            TRACredentialContent? ITypeConverter<TRACredentialContent?>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TRACredentialContent?'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TRACredentialContent?>.ConvertTo_List_List_TRAKeyValuePair(TRACredentialContent? value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRACredentialContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent?>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TRACredentialContent?>.Enumerate_List_List_TRAKeyValuePair(TRACredentialContent? value)
            {
                
                yield break;
            }
            TRACredentialContent? ITypeConverter<TRACredentialContent?>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'TRACredentialContent?'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<TRACredentialContent?>.ConvertTo_TDWVDAAccountEntryContent_nullable(TRACredentialContent? value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TRACredentialContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent?>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<TRACredentialContent?>.Enumerate_TDWVDAAccountEntryContent_nullable(TRACredentialContent? value)
            {
                
                yield break;
            }
            TRACredentialContent? ITypeConverter<TRACredentialContent?>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'TRACredentialContent?'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TRACredentialContent?>.ConvertTo_TDWVDASmartContractEntryContent_nullable(TRACredentialContent? value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TRACredentialContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent?>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<TRACredentialContent?>.Enumerate_TDWVDASmartContractEntryContent_nullable(TRACredentialContent? value)
            {
                
                yield break;
            }
            TRACredentialContent? ITypeConverter<TRACredentialContent?>.ConvertFrom_TRACredentialContent_nullable(TRACredentialContent? value)
            {
                
                return (TRACredentialContent?)value;
                
            }
            TRACredentialContent? ITypeConverter<TRACredentialContent?>.ConvertTo_TRACredentialContent_nullable(TRACredentialContent? value)
            {
                return TypeConverter<TRACredentialContent?>.ConvertFrom_TRACredentialContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialContent?>.GetConversionActionTo_TRACredentialContent_nullable()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialContent?> ITypeConverter<TRACredentialContent?>.Enumerate_TRACredentialContent_nullable(TRACredentialContent? value)
            {
                
                yield break;
            }
            
            object ITypeConverter<object>.ConvertFrom_bool(bool value)
            {
                return value;
            }
            bool ITypeConverter<object>.ConvertTo_bool(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_bool()
            {
                throw new NotImplementedException();
            }
            IEnumerable<bool> ITypeConverter<object>.Enumerate_bool(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_long(long value)
            {
                return value;
            }
            long ITypeConverter<object>.ConvertTo_long(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_long()
            {
                throw new NotImplementedException();
            }
            IEnumerable<long> ITypeConverter<object>.Enumerate_long(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_string(string value)
            {
                return value;
            }
            string ITypeConverter<object>.ConvertTo_string(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_string()
            {
                throw new NotImplementedException();
            }
            IEnumerable<string> ITypeConverter<object>.Enumerate_string(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_List_string(List<string> value)
            {
                return value;
            }
            List<string> ITypeConverter<object>.ConvertTo_List_string(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_List_string()
            {
                throw new NotImplementedException();
            }
            IEnumerable<List<string>> ITypeConverter<object>.Enumerate_List_string(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                return value;
            }
            List<TRAClaim> ITypeConverter<object>.ConvertTo_List_TRAClaim(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_List_TRAClaim()
            {
                throw new NotImplementedException();
            }
            IEnumerable<List<TRAClaim>> ITypeConverter<object>.Enumerate_List_TRAClaim(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                return value;
            }
            List<TRAKeyValuePair> ITypeConverter<object>.ConvertTo_List_TRAKeyValuePair(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                throw new NotImplementedException();
            }
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<object>.Enumerate_List_TRAKeyValuePair(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                return value;
            }
            TDWVDAAccountEntryClaims ITypeConverter<object>.ConvertTo_TDWVDAAccountEntryClaims(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<object>.Enumerate_TDWVDAAccountEntryClaims(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                return value;
            }
            TDWVDAAccountEntryContent ITypeConverter<object>.ConvertTo_TDWVDAAccountEntryContent(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<object>.Enumerate_TDWVDAAccountEntryContent(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                return value;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<object>.ConvertTo_TDWVDAAccountEntryEnvelope(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<object>.Enumerate_TDWVDAAccountEntryEnvelope(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                return value;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<object>.ConvertTo_TDWVDAIdentityRegistryEntryParm(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<object>.Enumerate_TDWVDAIdentityRegistryEntryParm(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                return value;
            }
            TDWVDAPostInvocationParameters ITypeConverter<object>.ConvertTo_TDWVDAPostInvocationParameters(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<object>.Enumerate_TDWVDAPostInvocationParameters(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                return value;
            }
            TDWVDARevocationListEntryParm ITypeConverter<object>.ConvertTo_TDWVDARevocationListEntryParm(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<object>.Enumerate_TDWVDARevocationListEntryParm(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                return value;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<object>.ConvertTo_TDWVDAServiceEndpointEntryParm(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<object>.Enumerate_TDWVDAServiceEndpointEntryParm(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                return value;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<object>.ConvertTo_TDWVDASmartContractEntryClaims(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<object>.Enumerate_TDWVDASmartContractEntryClaims(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                return value;
            }
            TDWVDASmartContractEntryContent ITypeConverter<object>.ConvertTo_TDWVDASmartContractEntryContent(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<object>.Enumerate_TDWVDASmartContractEntryContent(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                return value;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<object>.ConvertTo_TDWVDASmartContractEntryEnvelope(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<object>.Enumerate_TDWVDASmartContractEntryEnvelope(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                return value;
            }
            TRAClaim ITypeConverter<object>.ConvertTo_TRAClaim(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TRAClaim()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TRAClaim> ITypeConverter<object>.Enumerate_TRAClaim(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TRACredentialContent(TRACredentialContent value)
            {
                return value;
            }
            TRACredentialContent ITypeConverter<object>.ConvertTo_TRACredentialContent(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TRACredentialContent()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TRACredentialContent> ITypeConverter<object>.Enumerate_TRACredentialContent(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TRACredentialEnvelope(TRACredentialEnvelope value)
            {
                return value;
            }
            TRACredentialEnvelope ITypeConverter<object>.ConvertTo_TRACredentialEnvelope(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TRACredentialEnvelope()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TRACredentialEnvelope> ITypeConverter<object>.Enumerate_TRACredentialEnvelope(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TRACredentialEnvelopeSeal(TRACredentialEnvelopeSeal value)
            {
                return value;
            }
            TRACredentialEnvelopeSeal ITypeConverter<object>.ConvertTo_TRACredentialEnvelopeSeal(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TRACredentialEnvelopeSeal()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TRACredentialEnvelopeSeal> ITypeConverter<object>.Enumerate_TRACredentialEnvelopeSeal(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TRACredentialMetadata(TRACredentialMetadata value)
            {
                return value;
            }
            TRACredentialMetadata ITypeConverter<object>.ConvertTo_TRACredentialMetadata(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TRACredentialMetadata()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TRACredentialMetadata> ITypeConverter<object>.Enumerate_TRACredentialMetadata(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                return value;
            }
            TRAKeyValuePair ITypeConverter<object>.ConvertTo_TRAKeyValuePair(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TRAKeyValuePair()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TRAKeyValuePair> ITypeConverter<object>.Enumerate_TRAKeyValuePair(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                return value;
            }
            TRACredentialType ITypeConverter<object>.ConvertTo_TRACredentialType(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TRACredentialType()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TRACredentialType> ITypeConverter<object>.Enumerate_TRACredentialType(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                return value;
            }
            TRAEncryptionFlag ITypeConverter<object>.ConvertTo_TRAEncryptionFlag(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TRAEncryptionFlag()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TRAEncryptionFlag> ITypeConverter<object>.Enumerate_TRAEncryptionFlag(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                return value;
            }
            TRAServiceType ITypeConverter<object>.ConvertTo_TRAServiceType(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TRAServiceType()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TRAServiceType> ITypeConverter<object>.Enumerate_TRAServiceType(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                return value;
            }
            TRATrustLevel ITypeConverter<object>.ConvertTo_TRATrustLevel(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TRATrustLevel()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TRATrustLevel> ITypeConverter<object>.Enumerate_TRATrustLevel(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                return value;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<object>.ConvertTo_List_List_TRAKeyValuePair(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                throw new NotImplementedException();
            }
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<object>.Enumerate_List_List_TRAKeyValuePair(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                return value;
            }
            TDWVDAAccountEntryContent? ITypeConverter<object>.ConvertTo_TDWVDAAccountEntryContent_nullable(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<object>.Enumerate_TDWVDAAccountEntryContent_nullable(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                return value;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<object>.ConvertTo_TDWVDASmartContractEntryContent_nullable(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<object>.Enumerate_TDWVDASmartContractEntryContent_nullable(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TRACredentialContent_nullable(TRACredentialContent? value)
            {
                return value;
            }
            TRACredentialContent? ITypeConverter<object>.ConvertTo_TRACredentialContent_nullable(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TRACredentialContent_nullable()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TRACredentialContent?> ITypeConverter<object>.Enumerate_TRACredentialContent_nullable(object value)
            {
                throw new NotImplementedException();
            }
            
        }
        internal static readonly ITypeConverter<T> s_type_converter = new _TypeConverterImpl() as ITypeConverter<T> ?? new TypeConverter<T>();
        #region Default implementation
        
        T ITypeConverter<T>.ConvertFrom_bool(bool value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        bool ITypeConverter<T>.ConvertTo_bool(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_bool()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<bool> ITypeConverter<T>.Enumerate_bool(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_long(long value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        long ITypeConverter<T>.ConvertTo_long(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_long()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<long> ITypeConverter<T>.Enumerate_long(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_string(string value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        string ITypeConverter<T>.ConvertTo_string(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_string()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<string> ITypeConverter<T>.Enumerate_string(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_List_string(List<string> value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        List<string> ITypeConverter<T>.ConvertTo_List_string(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_List_string()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<List<string>> ITypeConverter<T>.Enumerate_List_string(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        List<TRAClaim> ITypeConverter<T>.ConvertTo_List_TRAClaim(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_List_TRAClaim()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<List<TRAClaim>> ITypeConverter<T>.Enumerate_List_TRAClaim(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        List<TRAKeyValuePair> ITypeConverter<T>.ConvertTo_List_TRAKeyValuePair(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_List_TRAKeyValuePair()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<List<TRAKeyValuePair>> ITypeConverter<T>.Enumerate_List_TRAKeyValuePair(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TDWVDAAccountEntryClaims ITypeConverter<T>.ConvertTo_TDWVDAAccountEntryClaims(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TDWVDAAccountEntryClaims()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<T>.Enumerate_TDWVDAAccountEntryClaims(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TDWVDAAccountEntryContent ITypeConverter<T>.ConvertTo_TDWVDAAccountEntryContent(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TDWVDAAccountEntryContent()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<T>.Enumerate_TDWVDAAccountEntryContent(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TDWVDAAccountEntryEnvelope ITypeConverter<T>.ConvertTo_TDWVDAAccountEntryEnvelope(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<T>.Enumerate_TDWVDAAccountEntryEnvelope(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TDWVDAIdentityRegistryEntryParm ITypeConverter<T>.ConvertTo_TDWVDAIdentityRegistryEntryParm(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<T>.Enumerate_TDWVDAIdentityRegistryEntryParm(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TDWVDAPostInvocationParameters ITypeConverter<T>.ConvertTo_TDWVDAPostInvocationParameters(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TDWVDAPostInvocationParameters()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<T>.Enumerate_TDWVDAPostInvocationParameters(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TDWVDARevocationListEntryParm ITypeConverter<T>.ConvertTo_TDWVDARevocationListEntryParm(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TDWVDARevocationListEntryParm()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<T>.Enumerate_TDWVDARevocationListEntryParm(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TDWVDAServiceEndpointEntryParm ITypeConverter<T>.ConvertTo_TDWVDAServiceEndpointEntryParm(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<T>.Enumerate_TDWVDAServiceEndpointEntryParm(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TDWVDASmartContractEntryClaims ITypeConverter<T>.ConvertTo_TDWVDASmartContractEntryClaims(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<T>.Enumerate_TDWVDASmartContractEntryClaims(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TDWVDASmartContractEntryContent ITypeConverter<T>.ConvertTo_TDWVDASmartContractEntryContent(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TDWVDASmartContractEntryContent()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<T>.Enumerate_TDWVDASmartContractEntryContent(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TDWVDASmartContractEntryEnvelope ITypeConverter<T>.ConvertTo_TDWVDASmartContractEntryEnvelope(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<T>.Enumerate_TDWVDASmartContractEntryEnvelope(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TRAClaim(TRAClaim value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TRAClaim ITypeConverter<T>.ConvertTo_TRAClaim(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TRAClaim()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TRAClaim> ITypeConverter<T>.Enumerate_TRAClaim(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TRACredentialContent(TRACredentialContent value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TRACredentialContent ITypeConverter<T>.ConvertTo_TRACredentialContent(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TRACredentialContent()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TRACredentialContent> ITypeConverter<T>.Enumerate_TRACredentialContent(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TRACredentialEnvelope(TRACredentialEnvelope value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TRACredentialEnvelope ITypeConverter<T>.ConvertTo_TRACredentialEnvelope(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TRACredentialEnvelope()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TRACredentialEnvelope> ITypeConverter<T>.Enumerate_TRACredentialEnvelope(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TRACredentialEnvelopeSeal(TRACredentialEnvelopeSeal value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TRACredentialEnvelopeSeal ITypeConverter<T>.ConvertTo_TRACredentialEnvelopeSeal(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TRACredentialEnvelopeSeal()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TRACredentialEnvelopeSeal> ITypeConverter<T>.Enumerate_TRACredentialEnvelopeSeal(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TRACredentialMetadata(TRACredentialMetadata value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TRACredentialMetadata ITypeConverter<T>.ConvertTo_TRACredentialMetadata(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TRACredentialMetadata()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TRACredentialMetadata> ITypeConverter<T>.Enumerate_TRACredentialMetadata(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TRAKeyValuePair ITypeConverter<T>.ConvertTo_TRAKeyValuePair(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TRAKeyValuePair()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TRAKeyValuePair> ITypeConverter<T>.Enumerate_TRAKeyValuePair(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TRACredentialType(TRACredentialType value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TRACredentialType ITypeConverter<T>.ConvertTo_TRACredentialType(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TRACredentialType()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TRACredentialType> ITypeConverter<T>.Enumerate_TRACredentialType(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TRAEncryptionFlag ITypeConverter<T>.ConvertTo_TRAEncryptionFlag(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TRAEncryptionFlag()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TRAEncryptionFlag> ITypeConverter<T>.Enumerate_TRAEncryptionFlag(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TRAServiceType(TRAServiceType value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TRAServiceType ITypeConverter<T>.ConvertTo_TRAServiceType(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TRAServiceType()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TRAServiceType> ITypeConverter<T>.Enumerate_TRAServiceType(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TRATrustLevel ITypeConverter<T>.ConvertTo_TRATrustLevel(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TRATrustLevel()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TRATrustLevel> ITypeConverter<T>.Enumerate_TRATrustLevel(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        List<List<TRAKeyValuePair>> ITypeConverter<T>.ConvertTo_List_List_TRAKeyValuePair(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_List_List_TRAKeyValuePair()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<T>.Enumerate_List_List_TRAKeyValuePair(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TDWVDAAccountEntryContent? ITypeConverter<T>.ConvertTo_TDWVDAAccountEntryContent_nullable(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<T>.Enumerate_TDWVDAAccountEntryContent_nullable(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TDWVDASmartContractEntryContent? ITypeConverter<T>.ConvertTo_TDWVDASmartContractEntryContent_nullable(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<T>.Enumerate_TDWVDASmartContractEntryContent_nullable(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TRACredentialContent_nullable(TRACredentialContent? value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TRACredentialContent? ITypeConverter<T>.ConvertTo_TRACredentialContent_nullable(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TRACredentialContent_nullable()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TRACredentialContent?> ITypeConverter<T>.Enumerate_TRACredentialContent_nullable(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        #endregion
        internal static readonly uint type_id = TypeSystem.GetTypeID(typeof(T));
        
        internal static T ConvertFrom_bool(bool value)
        {
            return s_type_converter.ConvertFrom_bool(value);
        }
        internal static bool ConvertTo_bool(T value)
        {
            return s_type_converter.ConvertTo_bool(value);
        }
        internal static TypeConversionAction GetConversionActionTo_bool()
        {
            return s_type_converter.GetConversionActionTo_bool();
        }
        internal static IEnumerable<bool> Enumerate_bool(T value)
        {
            return s_type_converter.Enumerate_bool(value);
        }
        
        internal static T ConvertFrom_long(long value)
        {
            return s_type_converter.ConvertFrom_long(value);
        }
        internal static long ConvertTo_long(T value)
        {
            return s_type_converter.ConvertTo_long(value);
        }
        internal static TypeConversionAction GetConversionActionTo_long()
        {
            return s_type_converter.GetConversionActionTo_long();
        }
        internal static IEnumerable<long> Enumerate_long(T value)
        {
            return s_type_converter.Enumerate_long(value);
        }
        
        internal static T ConvertFrom_string(string value)
        {
            return s_type_converter.ConvertFrom_string(value);
        }
        internal static string ConvertTo_string(T value)
        {
            return s_type_converter.ConvertTo_string(value);
        }
        internal static TypeConversionAction GetConversionActionTo_string()
        {
            return s_type_converter.GetConversionActionTo_string();
        }
        internal static IEnumerable<string> Enumerate_string(T value)
        {
            return s_type_converter.Enumerate_string(value);
        }
        
        internal static T ConvertFrom_List_string(List<string> value)
        {
            return s_type_converter.ConvertFrom_List_string(value);
        }
        internal static List<string> ConvertTo_List_string(T value)
        {
            return s_type_converter.ConvertTo_List_string(value);
        }
        internal static TypeConversionAction GetConversionActionTo_List_string()
        {
            return s_type_converter.GetConversionActionTo_List_string();
        }
        internal static IEnumerable<List<string>> Enumerate_List_string(T value)
        {
            return s_type_converter.Enumerate_List_string(value);
        }
        
        internal static T ConvertFrom_List_TRAClaim(List<TRAClaim> value)
        {
            return s_type_converter.ConvertFrom_List_TRAClaim(value);
        }
        internal static List<TRAClaim> ConvertTo_List_TRAClaim(T value)
        {
            return s_type_converter.ConvertTo_List_TRAClaim(value);
        }
        internal static TypeConversionAction GetConversionActionTo_List_TRAClaim()
        {
            return s_type_converter.GetConversionActionTo_List_TRAClaim();
        }
        internal static IEnumerable<List<TRAClaim>> Enumerate_List_TRAClaim(T value)
        {
            return s_type_converter.Enumerate_List_TRAClaim(value);
        }
        
        internal static T ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
        {
            return s_type_converter.ConvertFrom_List_TRAKeyValuePair(value);
        }
        internal static List<TRAKeyValuePair> ConvertTo_List_TRAKeyValuePair(T value)
        {
            return s_type_converter.ConvertTo_List_TRAKeyValuePair(value);
        }
        internal static TypeConversionAction GetConversionActionTo_List_TRAKeyValuePair()
        {
            return s_type_converter.GetConversionActionTo_List_TRAKeyValuePair();
        }
        internal static IEnumerable<List<TRAKeyValuePair>> Enumerate_List_TRAKeyValuePair(T value)
        {
            return s_type_converter.Enumerate_List_TRAKeyValuePair(value);
        }
        
        internal static T ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
        {
            return s_type_converter.ConvertFrom_TDWVDAAccountEntryClaims(value);
        }
        internal static TDWVDAAccountEntryClaims ConvertTo_TDWVDAAccountEntryClaims(T value)
        {
            return s_type_converter.ConvertTo_TDWVDAAccountEntryClaims(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TDWVDAAccountEntryClaims()
        {
            return s_type_converter.GetConversionActionTo_TDWVDAAccountEntryClaims();
        }
        internal static IEnumerable<TDWVDAAccountEntryClaims> Enumerate_TDWVDAAccountEntryClaims(T value)
        {
            return s_type_converter.Enumerate_TDWVDAAccountEntryClaims(value);
        }
        
        internal static T ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
        {
            return s_type_converter.ConvertFrom_TDWVDAAccountEntryContent(value);
        }
        internal static TDWVDAAccountEntryContent ConvertTo_TDWVDAAccountEntryContent(T value)
        {
            return s_type_converter.ConvertTo_TDWVDAAccountEntryContent(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TDWVDAAccountEntryContent()
        {
            return s_type_converter.GetConversionActionTo_TDWVDAAccountEntryContent();
        }
        internal static IEnumerable<TDWVDAAccountEntryContent> Enumerate_TDWVDAAccountEntryContent(T value)
        {
            return s_type_converter.Enumerate_TDWVDAAccountEntryContent(value);
        }
        
        internal static T ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
        {
            return s_type_converter.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
        }
        internal static TDWVDAAccountEntryEnvelope ConvertTo_TDWVDAAccountEntryEnvelope(T value)
        {
            return s_type_converter.ConvertTo_TDWVDAAccountEntryEnvelope(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TDWVDAAccountEntryEnvelope()
        {
            return s_type_converter.GetConversionActionTo_TDWVDAAccountEntryEnvelope();
        }
        internal static IEnumerable<TDWVDAAccountEntryEnvelope> Enumerate_TDWVDAAccountEntryEnvelope(T value)
        {
            return s_type_converter.Enumerate_TDWVDAAccountEntryEnvelope(value);
        }
        
        internal static T ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
        {
            return s_type_converter.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
        }
        internal static TDWVDAIdentityRegistryEntryParm ConvertTo_TDWVDAIdentityRegistryEntryParm(T value)
        {
            return s_type_converter.ConvertTo_TDWVDAIdentityRegistryEntryParm(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
        {
            return s_type_converter.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm();
        }
        internal static IEnumerable<TDWVDAIdentityRegistryEntryParm> Enumerate_TDWVDAIdentityRegistryEntryParm(T value)
        {
            return s_type_converter.Enumerate_TDWVDAIdentityRegistryEntryParm(value);
        }
        
        internal static T ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
        {
            return s_type_converter.ConvertFrom_TDWVDAPostInvocationParameters(value);
        }
        internal static TDWVDAPostInvocationParameters ConvertTo_TDWVDAPostInvocationParameters(T value)
        {
            return s_type_converter.ConvertTo_TDWVDAPostInvocationParameters(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TDWVDAPostInvocationParameters()
        {
            return s_type_converter.GetConversionActionTo_TDWVDAPostInvocationParameters();
        }
        internal static IEnumerable<TDWVDAPostInvocationParameters> Enumerate_TDWVDAPostInvocationParameters(T value)
        {
            return s_type_converter.Enumerate_TDWVDAPostInvocationParameters(value);
        }
        
        internal static T ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
        {
            return s_type_converter.ConvertFrom_TDWVDARevocationListEntryParm(value);
        }
        internal static TDWVDARevocationListEntryParm ConvertTo_TDWVDARevocationListEntryParm(T value)
        {
            return s_type_converter.ConvertTo_TDWVDARevocationListEntryParm(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TDWVDARevocationListEntryParm()
        {
            return s_type_converter.GetConversionActionTo_TDWVDARevocationListEntryParm();
        }
        internal static IEnumerable<TDWVDARevocationListEntryParm> Enumerate_TDWVDARevocationListEntryParm(T value)
        {
            return s_type_converter.Enumerate_TDWVDARevocationListEntryParm(value);
        }
        
        internal static T ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
        {
            return s_type_converter.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
        }
        internal static TDWVDAServiceEndpointEntryParm ConvertTo_TDWVDAServiceEndpointEntryParm(T value)
        {
            return s_type_converter.ConvertTo_TDWVDAServiceEndpointEntryParm(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
        {
            return s_type_converter.GetConversionActionTo_TDWVDAServiceEndpointEntryParm();
        }
        internal static IEnumerable<TDWVDAServiceEndpointEntryParm> Enumerate_TDWVDAServiceEndpointEntryParm(T value)
        {
            return s_type_converter.Enumerate_TDWVDAServiceEndpointEntryParm(value);
        }
        
        internal static T ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
        {
            return s_type_converter.ConvertFrom_TDWVDASmartContractEntryClaims(value);
        }
        internal static TDWVDASmartContractEntryClaims ConvertTo_TDWVDASmartContractEntryClaims(T value)
        {
            return s_type_converter.ConvertTo_TDWVDASmartContractEntryClaims(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TDWVDASmartContractEntryClaims()
        {
            return s_type_converter.GetConversionActionTo_TDWVDASmartContractEntryClaims();
        }
        internal static IEnumerable<TDWVDASmartContractEntryClaims> Enumerate_TDWVDASmartContractEntryClaims(T value)
        {
            return s_type_converter.Enumerate_TDWVDASmartContractEntryClaims(value);
        }
        
        internal static T ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
        {
            return s_type_converter.ConvertFrom_TDWVDASmartContractEntryContent(value);
        }
        internal static TDWVDASmartContractEntryContent ConvertTo_TDWVDASmartContractEntryContent(T value)
        {
            return s_type_converter.ConvertTo_TDWVDASmartContractEntryContent(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TDWVDASmartContractEntryContent()
        {
            return s_type_converter.GetConversionActionTo_TDWVDASmartContractEntryContent();
        }
        internal static IEnumerable<TDWVDASmartContractEntryContent> Enumerate_TDWVDASmartContractEntryContent(T value)
        {
            return s_type_converter.Enumerate_TDWVDASmartContractEntryContent(value);
        }
        
        internal static T ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
        {
            return s_type_converter.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
        }
        internal static TDWVDASmartContractEntryEnvelope ConvertTo_TDWVDASmartContractEntryEnvelope(T value)
        {
            return s_type_converter.ConvertTo_TDWVDASmartContractEntryEnvelope(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
        {
            return s_type_converter.GetConversionActionTo_TDWVDASmartContractEntryEnvelope();
        }
        internal static IEnumerable<TDWVDASmartContractEntryEnvelope> Enumerate_TDWVDASmartContractEntryEnvelope(T value)
        {
            return s_type_converter.Enumerate_TDWVDASmartContractEntryEnvelope(value);
        }
        
        internal static T ConvertFrom_TRAClaim(TRAClaim value)
        {
            return s_type_converter.ConvertFrom_TRAClaim(value);
        }
        internal static TRAClaim ConvertTo_TRAClaim(T value)
        {
            return s_type_converter.ConvertTo_TRAClaim(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TRAClaim()
        {
            return s_type_converter.GetConversionActionTo_TRAClaim();
        }
        internal static IEnumerable<TRAClaim> Enumerate_TRAClaim(T value)
        {
            return s_type_converter.Enumerate_TRAClaim(value);
        }
        
        internal static T ConvertFrom_TRACredentialContent(TRACredentialContent value)
        {
            return s_type_converter.ConvertFrom_TRACredentialContent(value);
        }
        internal static TRACredentialContent ConvertTo_TRACredentialContent(T value)
        {
            return s_type_converter.ConvertTo_TRACredentialContent(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TRACredentialContent()
        {
            return s_type_converter.GetConversionActionTo_TRACredentialContent();
        }
        internal static IEnumerable<TRACredentialContent> Enumerate_TRACredentialContent(T value)
        {
            return s_type_converter.Enumerate_TRACredentialContent(value);
        }
        
        internal static T ConvertFrom_TRACredentialEnvelope(TRACredentialEnvelope value)
        {
            return s_type_converter.ConvertFrom_TRACredentialEnvelope(value);
        }
        internal static TRACredentialEnvelope ConvertTo_TRACredentialEnvelope(T value)
        {
            return s_type_converter.ConvertTo_TRACredentialEnvelope(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TRACredentialEnvelope()
        {
            return s_type_converter.GetConversionActionTo_TRACredentialEnvelope();
        }
        internal static IEnumerable<TRACredentialEnvelope> Enumerate_TRACredentialEnvelope(T value)
        {
            return s_type_converter.Enumerate_TRACredentialEnvelope(value);
        }
        
        internal static T ConvertFrom_TRACredentialEnvelopeSeal(TRACredentialEnvelopeSeal value)
        {
            return s_type_converter.ConvertFrom_TRACredentialEnvelopeSeal(value);
        }
        internal static TRACredentialEnvelopeSeal ConvertTo_TRACredentialEnvelopeSeal(T value)
        {
            return s_type_converter.ConvertTo_TRACredentialEnvelopeSeal(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TRACredentialEnvelopeSeal()
        {
            return s_type_converter.GetConversionActionTo_TRACredentialEnvelopeSeal();
        }
        internal static IEnumerable<TRACredentialEnvelopeSeal> Enumerate_TRACredentialEnvelopeSeal(T value)
        {
            return s_type_converter.Enumerate_TRACredentialEnvelopeSeal(value);
        }
        
        internal static T ConvertFrom_TRACredentialMetadata(TRACredentialMetadata value)
        {
            return s_type_converter.ConvertFrom_TRACredentialMetadata(value);
        }
        internal static TRACredentialMetadata ConvertTo_TRACredentialMetadata(T value)
        {
            return s_type_converter.ConvertTo_TRACredentialMetadata(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TRACredentialMetadata()
        {
            return s_type_converter.GetConversionActionTo_TRACredentialMetadata();
        }
        internal static IEnumerable<TRACredentialMetadata> Enumerate_TRACredentialMetadata(T value)
        {
            return s_type_converter.Enumerate_TRACredentialMetadata(value);
        }
        
        internal static T ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
        {
            return s_type_converter.ConvertFrom_TRAKeyValuePair(value);
        }
        internal static TRAKeyValuePair ConvertTo_TRAKeyValuePair(T value)
        {
            return s_type_converter.ConvertTo_TRAKeyValuePair(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TRAKeyValuePair()
        {
            return s_type_converter.GetConversionActionTo_TRAKeyValuePair();
        }
        internal static IEnumerable<TRAKeyValuePair> Enumerate_TRAKeyValuePair(T value)
        {
            return s_type_converter.Enumerate_TRAKeyValuePair(value);
        }
        
        internal static T ConvertFrom_TRACredentialType(TRACredentialType value)
        {
            return s_type_converter.ConvertFrom_TRACredentialType(value);
        }
        internal static TRACredentialType ConvertTo_TRACredentialType(T value)
        {
            return s_type_converter.ConvertTo_TRACredentialType(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TRACredentialType()
        {
            return s_type_converter.GetConversionActionTo_TRACredentialType();
        }
        internal static IEnumerable<TRACredentialType> Enumerate_TRACredentialType(T value)
        {
            return s_type_converter.Enumerate_TRACredentialType(value);
        }
        
        internal static T ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
        {
            return s_type_converter.ConvertFrom_TRAEncryptionFlag(value);
        }
        internal static TRAEncryptionFlag ConvertTo_TRAEncryptionFlag(T value)
        {
            return s_type_converter.ConvertTo_TRAEncryptionFlag(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TRAEncryptionFlag()
        {
            return s_type_converter.GetConversionActionTo_TRAEncryptionFlag();
        }
        internal static IEnumerable<TRAEncryptionFlag> Enumerate_TRAEncryptionFlag(T value)
        {
            return s_type_converter.Enumerate_TRAEncryptionFlag(value);
        }
        
        internal static T ConvertFrom_TRAServiceType(TRAServiceType value)
        {
            return s_type_converter.ConvertFrom_TRAServiceType(value);
        }
        internal static TRAServiceType ConvertTo_TRAServiceType(T value)
        {
            return s_type_converter.ConvertTo_TRAServiceType(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TRAServiceType()
        {
            return s_type_converter.GetConversionActionTo_TRAServiceType();
        }
        internal static IEnumerable<TRAServiceType> Enumerate_TRAServiceType(T value)
        {
            return s_type_converter.Enumerate_TRAServiceType(value);
        }
        
        internal static T ConvertFrom_TRATrustLevel(TRATrustLevel value)
        {
            return s_type_converter.ConvertFrom_TRATrustLevel(value);
        }
        internal static TRATrustLevel ConvertTo_TRATrustLevel(T value)
        {
            return s_type_converter.ConvertTo_TRATrustLevel(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TRATrustLevel()
        {
            return s_type_converter.GetConversionActionTo_TRATrustLevel();
        }
        internal static IEnumerable<TRATrustLevel> Enumerate_TRATrustLevel(T value)
        {
            return s_type_converter.Enumerate_TRATrustLevel(value);
        }
        
        internal static T ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
        {
            return s_type_converter.ConvertFrom_List_List_TRAKeyValuePair(value);
        }
        internal static List<List<TRAKeyValuePair>> ConvertTo_List_List_TRAKeyValuePair(T value)
        {
            return s_type_converter.ConvertTo_List_List_TRAKeyValuePair(value);
        }
        internal static TypeConversionAction GetConversionActionTo_List_List_TRAKeyValuePair()
        {
            return s_type_converter.GetConversionActionTo_List_List_TRAKeyValuePair();
        }
        internal static IEnumerable<List<List<TRAKeyValuePair>>> Enumerate_List_List_TRAKeyValuePair(T value)
        {
            return s_type_converter.Enumerate_List_List_TRAKeyValuePair(value);
        }
        
        internal static T ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
        {
            return s_type_converter.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
        }
        internal static TDWVDAAccountEntryContent? ConvertTo_TDWVDAAccountEntryContent_nullable(T value)
        {
            return s_type_converter.ConvertTo_TDWVDAAccountEntryContent_nullable(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
        {
            return s_type_converter.GetConversionActionTo_TDWVDAAccountEntryContent_nullable();
        }
        internal static IEnumerable<TDWVDAAccountEntryContent?> Enumerate_TDWVDAAccountEntryContent_nullable(T value)
        {
            return s_type_converter.Enumerate_TDWVDAAccountEntryContent_nullable(value);
        }
        
        internal static T ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
        {
            return s_type_converter.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
        }
        internal static TDWVDASmartContractEntryContent? ConvertTo_TDWVDASmartContractEntryContent_nullable(T value)
        {
            return s_type_converter.ConvertTo_TDWVDASmartContractEntryContent_nullable(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
        {
            return s_type_converter.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable();
        }
        internal static IEnumerable<TDWVDASmartContractEntryContent?> Enumerate_TDWVDASmartContractEntryContent_nullable(T value)
        {
            return s_type_converter.Enumerate_TDWVDASmartContractEntryContent_nullable(value);
        }
        
        internal static T ConvertFrom_TRACredentialContent_nullable(TRACredentialContent? value)
        {
            return s_type_converter.ConvertFrom_TRACredentialContent_nullable(value);
        }
        internal static TRACredentialContent? ConvertTo_TRACredentialContent_nullable(T value)
        {
            return s_type_converter.ConvertTo_TRACredentialContent_nullable(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TRACredentialContent_nullable()
        {
            return s_type_converter.GetConversionActionTo_TRACredentialContent_nullable();
        }
        internal static IEnumerable<TRACredentialContent?> Enumerate_TRACredentialContent_nullable(T value)
        {
            return s_type_converter.Enumerate_TRACredentialContent_nullable(value);
        }
        
    }
}

#pragma warning restore 162,168,649,660,661,1522
