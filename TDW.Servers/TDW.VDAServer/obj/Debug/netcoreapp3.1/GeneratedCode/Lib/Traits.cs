#pragma warning disable 162,168,649,660,661,1522

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Trinity.TSL;
using Trinity.TSL.Lib;
namespace TDW.VDAServer
{
    internal class TypeSystem
    {
        #region TypeID lookup table
        private static Dictionary<Type, uint> TypeIDLookupTable = new Dictionary<Type, uint>()
        {
            
            { typeof(bool), 0 }
            ,
            { typeof(long), 1 }
            ,
            { typeof(string), 2 }
            ,
            { typeof(List<string>), 3 }
            ,
            { typeof(List<TRAClaim>), 4 }
            ,
            { typeof(List<TRAKeyValuePair>), 5 }
            ,
            { typeof(TDWVDAAccountEntryClaims), 6 }
            ,
            { typeof(TDWVDAAccountEntryContent), 7 }
            ,
            { typeof(TDWVDAAccountEntryEnvelope), 8 }
            ,
            { typeof(TDWVDAIdentityRegistryEntryParm), 9 }
            ,
            { typeof(TDWVDAPostInvocationParameters), 10 }
            ,
            { typeof(TDWVDARevocationListEntryParm), 11 }
            ,
            { typeof(TDWVDAServiceEndpointEntryParm), 12 }
            ,
            { typeof(TDWVDASmartContractEntryClaims), 13 }
            ,
            { typeof(TDWVDASmartContractEntryContent), 14 }
            ,
            { typeof(TDWVDASmartContractEntryEnvelope), 15 }
            ,
            { typeof(TRAClaim), 16 }
            ,
            { typeof(TRACredential_Content), 17 }
            ,
            { typeof(TRACredential_Envelope), 18 }
            ,
            { typeof(TRACredential_EnvelopeSeal), 19 }
            ,
            { typeof(TRACredential_Label), 20 }
            ,
            { typeof(TRAKeyValuePair), 21 }
            ,
            { typeof(TRACredentialType), 22 }
            ,
            { typeof(TRAEncryptionFlag), 23 }
            ,
            { typeof(TRAServiceType), 24 }
            ,
            { typeof(TRATrustLevel), 25 }
            ,
            { typeof(List<List<TRAKeyValuePair>>), 27 }
            ,
            { typeof(TDWVDAAccountEntryContent?), 29 }
            ,
            { typeof(TDWVDASmartContractEntryContent?), 30 }
            ,
            { typeof(TRACredential_Content?), 31 }
            ,
        };
        #endregion
        #region CellTypeID lookup table
        private static Dictionary<Type, uint> CellTypeIDLookupTable = new Dictionary<Type, uint>()
        {
            
            { typeof(TRACredential_Cell), 0 }
            ,
            { typeof(TDWVDAAccountEntryCell), 1 }
            ,
            { typeof(TDWVDASmartContractEntryCell), 2 }
            
        };
        #endregion
        internal static uint GetTypeID(Type t)
        {
            uint type_id;
            if (!TypeIDLookupTable.TryGetValue(t, out type_id))
                type_id = uint.MaxValue;
            return type_id;
        }
        internal static uint GetCellTypeID(Type t)
        {
            uint type_id;
            if (!CellTypeIDLookupTable.TryGetValue(t, out type_id))
                throw new Exception("Type " + t.ToString() + " is not a cell.");
            return type_id;
        }
    }
    internal enum TypeConversionAction
    {
        TC_NONCONVERTIBLE = 0,
        TC_ASSIGN,
        TC_TOSTRING,
        TC_PARSESTRING,
        TC_TOBOOL,
        TC_CONVERTLIST,
        TC_WRAPINLIST,
        TC_ARRAYTOLIST,
        TC_EXTRACTNULLABLE,
    }
    internal interface ITypeConverter<T>
    {
        
        T ConvertFrom_bool(bool value);
        bool ConvertTo_bool(T value);
        TypeConversionAction GetConversionActionTo_bool();
        IEnumerable<bool> Enumerate_bool(T value);
        
        T ConvertFrom_long(long value);
        long ConvertTo_long(T value);
        TypeConversionAction GetConversionActionTo_long();
        IEnumerable<long> Enumerate_long(T value);
        
        T ConvertFrom_string(string value);
        string ConvertTo_string(T value);
        TypeConversionAction GetConversionActionTo_string();
        IEnumerable<string> Enumerate_string(T value);
        
        T ConvertFrom_List_string(List<string> value);
        List<string> ConvertTo_List_string(T value);
        TypeConversionAction GetConversionActionTo_List_string();
        IEnumerable<List<string>> Enumerate_List_string(T value);
        
        T ConvertFrom_List_TRAClaim(List<TRAClaim> value);
        List<TRAClaim> ConvertTo_List_TRAClaim(T value);
        TypeConversionAction GetConversionActionTo_List_TRAClaim();
        IEnumerable<List<TRAClaim>> Enumerate_List_TRAClaim(T value);
        
        T ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value);
        List<TRAKeyValuePair> ConvertTo_List_TRAKeyValuePair(T value);
        TypeConversionAction GetConversionActionTo_List_TRAKeyValuePair();
        IEnumerable<List<TRAKeyValuePair>> Enumerate_List_TRAKeyValuePair(T value);
        
        T ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value);
        TDWVDAAccountEntryClaims ConvertTo_TDWVDAAccountEntryClaims(T value);
        TypeConversionAction GetConversionActionTo_TDWVDAAccountEntryClaims();
        IEnumerable<TDWVDAAccountEntryClaims> Enumerate_TDWVDAAccountEntryClaims(T value);
        
        T ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value);
        TDWVDAAccountEntryContent ConvertTo_TDWVDAAccountEntryContent(T value);
        TypeConversionAction GetConversionActionTo_TDWVDAAccountEntryContent();
        IEnumerable<TDWVDAAccountEntryContent> Enumerate_TDWVDAAccountEntryContent(T value);
        
        T ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value);
        TDWVDAAccountEntryEnvelope ConvertTo_TDWVDAAccountEntryEnvelope(T value);
        TypeConversionAction GetConversionActionTo_TDWVDAAccountEntryEnvelope();
        IEnumerable<TDWVDAAccountEntryEnvelope> Enumerate_TDWVDAAccountEntryEnvelope(T value);
        
        T ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value);
        TDWVDAIdentityRegistryEntryParm ConvertTo_TDWVDAIdentityRegistryEntryParm(T value);
        TypeConversionAction GetConversionActionTo_TDWVDAIdentityRegistryEntryParm();
        IEnumerable<TDWVDAIdentityRegistryEntryParm> Enumerate_TDWVDAIdentityRegistryEntryParm(T value);
        
        T ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value);
        TDWVDAPostInvocationParameters ConvertTo_TDWVDAPostInvocationParameters(T value);
        TypeConversionAction GetConversionActionTo_TDWVDAPostInvocationParameters();
        IEnumerable<TDWVDAPostInvocationParameters> Enumerate_TDWVDAPostInvocationParameters(T value);
        
        T ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value);
        TDWVDARevocationListEntryParm ConvertTo_TDWVDARevocationListEntryParm(T value);
        TypeConversionAction GetConversionActionTo_TDWVDARevocationListEntryParm();
        IEnumerable<TDWVDARevocationListEntryParm> Enumerate_TDWVDARevocationListEntryParm(T value);
        
        T ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value);
        TDWVDAServiceEndpointEntryParm ConvertTo_TDWVDAServiceEndpointEntryParm(T value);
        TypeConversionAction GetConversionActionTo_TDWVDAServiceEndpointEntryParm();
        IEnumerable<TDWVDAServiceEndpointEntryParm> Enumerate_TDWVDAServiceEndpointEntryParm(T value);
        
        T ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value);
        TDWVDASmartContractEntryClaims ConvertTo_TDWVDASmartContractEntryClaims(T value);
        TypeConversionAction GetConversionActionTo_TDWVDASmartContractEntryClaims();
        IEnumerable<TDWVDASmartContractEntryClaims> Enumerate_TDWVDASmartContractEntryClaims(T value);
        
        T ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value);
        TDWVDASmartContractEntryContent ConvertTo_TDWVDASmartContractEntryContent(T value);
        TypeConversionAction GetConversionActionTo_TDWVDASmartContractEntryContent();
        IEnumerable<TDWVDASmartContractEntryContent> Enumerate_TDWVDASmartContractEntryContent(T value);
        
        T ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value);
        TDWVDASmartContractEntryEnvelope ConvertTo_TDWVDASmartContractEntryEnvelope(T value);
        TypeConversionAction GetConversionActionTo_TDWVDASmartContractEntryEnvelope();
        IEnumerable<TDWVDASmartContractEntryEnvelope> Enumerate_TDWVDASmartContractEntryEnvelope(T value);
        
        T ConvertFrom_TRAClaim(TRAClaim value);
        TRAClaim ConvertTo_TRAClaim(T value);
        TypeConversionAction GetConversionActionTo_TRAClaim();
        IEnumerable<TRAClaim> Enumerate_TRAClaim(T value);
        
        T ConvertFrom_TRACredential_Content(TRACredential_Content value);
        TRACredential_Content ConvertTo_TRACredential_Content(T value);
        TypeConversionAction GetConversionActionTo_TRACredential_Content();
        IEnumerable<TRACredential_Content> Enumerate_TRACredential_Content(T value);
        
        T ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value);
        TRACredential_Envelope ConvertTo_TRACredential_Envelope(T value);
        TypeConversionAction GetConversionActionTo_TRACredential_Envelope();
        IEnumerable<TRACredential_Envelope> Enumerate_TRACredential_Envelope(T value);
        
        T ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value);
        TRACredential_EnvelopeSeal ConvertTo_TRACredential_EnvelopeSeal(T value);
        TypeConversionAction GetConversionActionTo_TRACredential_EnvelopeSeal();
        IEnumerable<TRACredential_EnvelopeSeal> Enumerate_TRACredential_EnvelopeSeal(T value);
        
        T ConvertFrom_TRACredential_Label(TRACredential_Label value);
        TRACredential_Label ConvertTo_TRACredential_Label(T value);
        TypeConversionAction GetConversionActionTo_TRACredential_Label();
        IEnumerable<TRACredential_Label> Enumerate_TRACredential_Label(T value);
        
        T ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value);
        TRAKeyValuePair ConvertTo_TRAKeyValuePair(T value);
        TypeConversionAction GetConversionActionTo_TRAKeyValuePair();
        IEnumerable<TRAKeyValuePair> Enumerate_TRAKeyValuePair(T value);
        
        T ConvertFrom_TRACredentialType(TRACredentialType value);
        TRACredentialType ConvertTo_TRACredentialType(T value);
        TypeConversionAction GetConversionActionTo_TRACredentialType();
        IEnumerable<TRACredentialType> Enumerate_TRACredentialType(T value);
        
        T ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value);
        TRAEncryptionFlag ConvertTo_TRAEncryptionFlag(T value);
        TypeConversionAction GetConversionActionTo_TRAEncryptionFlag();
        IEnumerable<TRAEncryptionFlag> Enumerate_TRAEncryptionFlag(T value);
        
        T ConvertFrom_TRAServiceType(TRAServiceType value);
        TRAServiceType ConvertTo_TRAServiceType(T value);
        TypeConversionAction GetConversionActionTo_TRAServiceType();
        IEnumerable<TRAServiceType> Enumerate_TRAServiceType(T value);
        
        T ConvertFrom_TRATrustLevel(TRATrustLevel value);
        TRATrustLevel ConvertTo_TRATrustLevel(T value);
        TypeConversionAction GetConversionActionTo_TRATrustLevel();
        IEnumerable<TRATrustLevel> Enumerate_TRATrustLevel(T value);
        
        T ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value);
        List<List<TRAKeyValuePair>> ConvertTo_List_List_TRAKeyValuePair(T value);
        TypeConversionAction GetConversionActionTo_List_List_TRAKeyValuePair();
        IEnumerable<List<List<TRAKeyValuePair>>> Enumerate_List_List_TRAKeyValuePair(T value);
        
        T ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value);
        TDWVDAAccountEntryContent? ConvertTo_TDWVDAAccountEntryContent_nullable(T value);
        TypeConversionAction GetConversionActionTo_TDWVDAAccountEntryContent_nullable();
        IEnumerable<TDWVDAAccountEntryContent?> Enumerate_TDWVDAAccountEntryContent_nullable(T value);
        
        T ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value);
        TDWVDASmartContractEntryContent? ConvertTo_TDWVDASmartContractEntryContent_nullable(T value);
        TypeConversionAction GetConversionActionTo_TDWVDASmartContractEntryContent_nullable();
        IEnumerable<TDWVDASmartContractEntryContent?> Enumerate_TDWVDASmartContractEntryContent_nullable(T value);
        
        T ConvertFrom_TRACredential_Content_nullable(TRACredential_Content? value);
        TRACredential_Content? ConvertTo_TRACredential_Content_nullable(T value);
        TypeConversionAction GetConversionActionTo_TRACredential_Content_nullable();
        IEnumerable<TRACredential_Content?> Enumerate_TRACredential_Content_nullable(T value);
        
    }
    internal class TypeConverter<T> : ITypeConverter<T>
    {
        internal class _TypeConverterImpl : ITypeConverter<object>
            
            , ITypeConverter<bool>
        
            , ITypeConverter<long>
        
            , ITypeConverter<string>
        
            , ITypeConverter<List<string>>
        
            , ITypeConverter<List<TRAClaim>>
        
            , ITypeConverter<List<TRAKeyValuePair>>
        
            , ITypeConverter<TDWVDAAccountEntryClaims>
        
            , ITypeConverter<TDWVDAAccountEntryContent>
        
            , ITypeConverter<TDWVDAAccountEntryEnvelope>
        
            , ITypeConverter<TDWVDAIdentityRegistryEntryParm>
        
            , ITypeConverter<TDWVDAPostInvocationParameters>
        
            , ITypeConverter<TDWVDARevocationListEntryParm>
        
            , ITypeConverter<TDWVDAServiceEndpointEntryParm>
        
            , ITypeConverter<TDWVDASmartContractEntryClaims>
        
            , ITypeConverter<TDWVDASmartContractEntryContent>
        
            , ITypeConverter<TDWVDASmartContractEntryEnvelope>
        
            , ITypeConverter<TRAClaim>
        
            , ITypeConverter<TRACredential_Content>
        
            , ITypeConverter<TRACredential_Envelope>
        
            , ITypeConverter<TRACredential_EnvelopeSeal>
        
            , ITypeConverter<TRACredential_Label>
        
            , ITypeConverter<TRAKeyValuePair>
        
            , ITypeConverter<TRACredentialType>
        
            , ITypeConverter<TRAEncryptionFlag>
        
            , ITypeConverter<TRAServiceType>
        
            , ITypeConverter<TRATrustLevel>
        
            , ITypeConverter<List<List<TRAKeyValuePair>>>
        
            , ITypeConverter<TDWVDAAccountEntryContent?>
        
            , ITypeConverter<TDWVDASmartContractEntryContent?>
        
            , ITypeConverter<TRACredential_Content?>
        
        {
            bool ITypeConverter<bool>.ConvertFrom_bool(bool value)
            {
                
                return (bool)value;
                
            }
            bool ITypeConverter<bool>.ConvertTo_bool(bool value)
            {
                return TypeConverter<bool>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<bool>.Enumerate_bool(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_long(long value)
            {
                
                return (value != 0);
                
            }
            long ITypeConverter<bool>.ConvertTo_long(bool value)
            {
                return TypeConverter<long>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<bool>.Enumerate_long(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    bool intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = ExternalParser.TryParse_bool(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "bool");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<bool>.ConvertTo_string(bool value)
            {
                return TypeConverter<string>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<bool>.Enumerate_string(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'bool'.");
                
            }
            List<string> ITypeConverter<bool>.ConvertTo_List_string(bool value)
            {
                return TypeConverter<List<string>>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<bool>.Enumerate_List_string(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'bool'.");
                
            }
            List<TRAClaim> ITypeConverter<bool>.ConvertTo_List_TRAClaim(bool value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<bool>.Enumerate_List_TRAClaim(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'bool'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<bool>.ConvertTo_List_TRAKeyValuePair(bool value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<bool>.Enumerate_List_TRAKeyValuePair(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'bool'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<bool>.ConvertTo_TDWVDAAccountEntryClaims(bool value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<bool>.Enumerate_TDWVDAAccountEntryClaims(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'bool'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<bool>.ConvertTo_TDWVDAAccountEntryContent(bool value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<bool>.Enumerate_TDWVDAAccountEntryContent(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'bool'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<bool>.ConvertTo_TDWVDAAccountEntryEnvelope(bool value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<bool>.Enumerate_TDWVDAAccountEntryEnvelope(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'bool'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<bool>.ConvertTo_TDWVDAIdentityRegistryEntryParm(bool value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<bool>.Enumerate_TDWVDAIdentityRegistryEntryParm(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'bool'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<bool>.ConvertTo_TDWVDAPostInvocationParameters(bool value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<bool>.Enumerate_TDWVDAPostInvocationParameters(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'bool'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<bool>.ConvertTo_TDWVDARevocationListEntryParm(bool value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<bool>.Enumerate_TDWVDARevocationListEntryParm(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'bool'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<bool>.ConvertTo_TDWVDAServiceEndpointEntryParm(bool value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<bool>.Enumerate_TDWVDAServiceEndpointEntryParm(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'bool'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<bool>.ConvertTo_TDWVDASmartContractEntryClaims(bool value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<bool>.Enumerate_TDWVDASmartContractEntryClaims(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'bool'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<bool>.ConvertTo_TDWVDASmartContractEntryContent(bool value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<bool>.Enumerate_TDWVDASmartContractEntryContent(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'bool'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<bool>.ConvertTo_TDWVDASmartContractEntryEnvelope(bool value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<bool>.Enumerate_TDWVDASmartContractEntryEnvelope(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'bool'.");
                
            }
            TRAClaim ITypeConverter<bool>.ConvertTo_TRAClaim(bool value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<bool>.Enumerate_TRAClaim(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TRACredential_Content(TRACredential_Content value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content' to 'bool'.");
                
            }
            TRACredential_Content ITypeConverter<bool>.ConvertTo_TRACredential_Content(bool value)
            {
                return TypeConverter<TRACredential_Content>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TRACredential_Content()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content> ITypeConverter<bool>.Enumerate_TRACredential_Content(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'bool'.");
                
            }
            TRACredential_Envelope ITypeConverter<bool>.ConvertTo_TRACredential_Envelope(bool value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<bool>.Enumerate_TRACredential_Envelope(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'bool'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<bool>.ConvertTo_TRACredential_EnvelopeSeal(bool value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<bool>.Enumerate_TRACredential_EnvelopeSeal(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TRACredential_Label(TRACredential_Label value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Label' to 'bool'.");
                
            }
            TRACredential_Label ITypeConverter<bool>.ConvertTo_TRACredential_Label(bool value)
            {
                return TypeConverter<TRACredential_Label>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TRACredential_Label()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Label> ITypeConverter<bool>.Enumerate_TRACredential_Label(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'bool'.");
                
            }
            TRAKeyValuePair ITypeConverter<bool>.ConvertTo_TRAKeyValuePair(bool value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<bool>.Enumerate_TRAKeyValuePair(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'bool'.");
                
            }
            TRACredentialType ITypeConverter<bool>.ConvertTo_TRACredentialType(bool value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<bool>.Enumerate_TRACredentialType(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'bool'.");
                
            }
            TRAEncryptionFlag ITypeConverter<bool>.ConvertTo_TRAEncryptionFlag(bool value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<bool>.Enumerate_TRAEncryptionFlag(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'bool'.");
                
            }
            TRAServiceType ITypeConverter<bool>.ConvertTo_TRAServiceType(bool value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<bool>.Enumerate_TRAServiceType(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'bool'.");
                
            }
            TRATrustLevel ITypeConverter<bool>.ConvertTo_TRATrustLevel(bool value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<bool>.Enumerate_TRATrustLevel(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'bool'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<bool>.ConvertTo_List_List_TRAKeyValuePair(bool value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<bool>.Enumerate_List_List_TRAKeyValuePair(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'bool'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<bool>.ConvertTo_TDWVDAAccountEntryContent_nullable(bool value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<bool>.Enumerate_TDWVDAAccountEntryContent_nullable(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'bool'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<bool>.ConvertTo_TDWVDASmartContractEntryContent_nullable(bool value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<bool>.Enumerate_TDWVDASmartContractEntryContent_nullable(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TRACredential_Content_nullable(TRACredential_Content? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content?' to 'bool'.");
                
            }
            TRACredential_Content? ITypeConverter<bool>.ConvertTo_TRACredential_Content_nullable(bool value)
            {
                return TypeConverter<TRACredential_Content?>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TRACredential_Content_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content?> ITypeConverter<bool>.Enumerate_TRACredential_Content_nullable(bool value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'long'.");
                
            }
            bool ITypeConverter<long>.ConvertTo_bool(long value)
            {
                return TypeConverter<bool>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_TOBOOL;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<long>.Enumerate_bool(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_long(long value)
            {
                
                return (long)value;
                
            }
            long ITypeConverter<long>.ConvertTo_long(long value)
            {
                return TypeConverter<long>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<long>.Enumerate_long(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    long intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = long.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "long");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<long>.ConvertTo_string(long value)
            {
                return TypeConverter<string>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<long>.Enumerate_string(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'long'.");
                
            }
            List<string> ITypeConverter<long>.ConvertTo_List_string(long value)
            {
                return TypeConverter<List<string>>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<long>.Enumerate_List_string(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'long'.");
                
            }
            List<TRAClaim> ITypeConverter<long>.ConvertTo_List_TRAClaim(long value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<long>.Enumerate_List_TRAClaim(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'long'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<long>.ConvertTo_List_TRAKeyValuePair(long value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<long>.Enumerate_List_TRAKeyValuePair(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'long'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<long>.ConvertTo_TDWVDAAccountEntryClaims(long value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<long>.Enumerate_TDWVDAAccountEntryClaims(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'long'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<long>.ConvertTo_TDWVDAAccountEntryContent(long value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<long>.Enumerate_TDWVDAAccountEntryContent(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'long'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<long>.ConvertTo_TDWVDAAccountEntryEnvelope(long value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<long>.Enumerate_TDWVDAAccountEntryEnvelope(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'long'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<long>.ConvertTo_TDWVDAIdentityRegistryEntryParm(long value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<long>.Enumerate_TDWVDAIdentityRegistryEntryParm(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'long'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<long>.ConvertTo_TDWVDAPostInvocationParameters(long value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<long>.Enumerate_TDWVDAPostInvocationParameters(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'long'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<long>.ConvertTo_TDWVDARevocationListEntryParm(long value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<long>.Enumerate_TDWVDARevocationListEntryParm(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'long'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<long>.ConvertTo_TDWVDAServiceEndpointEntryParm(long value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<long>.Enumerate_TDWVDAServiceEndpointEntryParm(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'long'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<long>.ConvertTo_TDWVDASmartContractEntryClaims(long value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<long>.Enumerate_TDWVDASmartContractEntryClaims(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'long'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<long>.ConvertTo_TDWVDASmartContractEntryContent(long value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<long>.Enumerate_TDWVDASmartContractEntryContent(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'long'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<long>.ConvertTo_TDWVDASmartContractEntryEnvelope(long value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<long>.Enumerate_TDWVDASmartContractEntryEnvelope(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'long'.");
                
            }
            TRAClaim ITypeConverter<long>.ConvertTo_TRAClaim(long value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<long>.Enumerate_TRAClaim(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TRACredential_Content(TRACredential_Content value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content' to 'long'.");
                
            }
            TRACredential_Content ITypeConverter<long>.ConvertTo_TRACredential_Content(long value)
            {
                return TypeConverter<TRACredential_Content>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TRACredential_Content()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content> ITypeConverter<long>.Enumerate_TRACredential_Content(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'long'.");
                
            }
            TRACredential_Envelope ITypeConverter<long>.ConvertTo_TRACredential_Envelope(long value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<long>.Enumerate_TRACredential_Envelope(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'long'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<long>.ConvertTo_TRACredential_EnvelopeSeal(long value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<long>.Enumerate_TRACredential_EnvelopeSeal(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TRACredential_Label(TRACredential_Label value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Label' to 'long'.");
                
            }
            TRACredential_Label ITypeConverter<long>.ConvertTo_TRACredential_Label(long value)
            {
                return TypeConverter<TRACredential_Label>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TRACredential_Label()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Label> ITypeConverter<long>.Enumerate_TRACredential_Label(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'long'.");
                
            }
            TRAKeyValuePair ITypeConverter<long>.ConvertTo_TRAKeyValuePair(long value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<long>.Enumerate_TRAKeyValuePair(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'long'.");
                
            }
            TRACredentialType ITypeConverter<long>.ConvertTo_TRACredentialType(long value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<long>.Enumerate_TRACredentialType(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'long'.");
                
            }
            TRAEncryptionFlag ITypeConverter<long>.ConvertTo_TRAEncryptionFlag(long value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<long>.Enumerate_TRAEncryptionFlag(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'long'.");
                
            }
            TRAServiceType ITypeConverter<long>.ConvertTo_TRAServiceType(long value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<long>.Enumerate_TRAServiceType(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'long'.");
                
            }
            TRATrustLevel ITypeConverter<long>.ConvertTo_TRATrustLevel(long value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<long>.Enumerate_TRATrustLevel(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'long'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<long>.ConvertTo_List_List_TRAKeyValuePair(long value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<long>.Enumerate_List_List_TRAKeyValuePair(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'long'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<long>.ConvertTo_TDWVDAAccountEntryContent_nullable(long value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<long>.Enumerate_TDWVDAAccountEntryContent_nullable(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'long'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<long>.ConvertTo_TDWVDASmartContractEntryContent_nullable(long value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<long>.Enumerate_TDWVDASmartContractEntryContent_nullable(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TRACredential_Content_nullable(TRACredential_Content? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content?' to 'long'.");
                
            }
            TRACredential_Content? ITypeConverter<long>.ConvertTo_TRACredential_Content_nullable(long value)
            {
                return TypeConverter<TRACredential_Content?>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TRACredential_Content_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content?> ITypeConverter<long>.Enumerate_TRACredential_Content_nullable(long value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_bool(bool value)
            {
                
                return Serializer.ToString(value);
                
            }
            bool ITypeConverter<string>.ConvertTo_bool(string value)
            {
                return TypeConverter<bool>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<string>.Enumerate_bool(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_long(long value)
            {
                
                return Serializer.ToString(value);
                
            }
            long ITypeConverter<string>.ConvertTo_long(string value)
            {
                return TypeConverter<long>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<string>.Enumerate_long(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_string(string value)
            {
                
                return (string)value;
                
            }
            string ITypeConverter<string>.ConvertTo_string(string value)
            {
                return TypeConverter<string>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<string>.Enumerate_string(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_List_string(List<string> value)
            {
                
                return Serializer.ToString(value);
                
            }
            List<string> ITypeConverter<string>.ConvertTo_List_string(string value)
            {
                return TypeConverter<List<string>>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<string>.Enumerate_List_string(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                return Serializer.ToString(value);
                
            }
            List<TRAClaim> ITypeConverter<string>.ConvertTo_List_TRAClaim(string value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<string>.Enumerate_List_TRAClaim(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                return Serializer.ToString(value);
                
            }
            List<TRAKeyValuePair> ITypeConverter<string>.ConvertTo_List_TRAKeyValuePair(string value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<string>.Enumerate_List_TRAKeyValuePair(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                return Serializer.ToString(value);
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<string>.ConvertTo_TDWVDAAccountEntryClaims(string value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<string>.Enumerate_TDWVDAAccountEntryClaims(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                return Serializer.ToString(value);
                
            }
            TDWVDAAccountEntryContent ITypeConverter<string>.ConvertTo_TDWVDAAccountEntryContent(string value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<string>.Enumerate_TDWVDAAccountEntryContent(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                return Serializer.ToString(value);
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<string>.ConvertTo_TDWVDAAccountEntryEnvelope(string value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<string>.Enumerate_TDWVDAAccountEntryEnvelope(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                return Serializer.ToString(value);
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<string>.ConvertTo_TDWVDAIdentityRegistryEntryParm(string value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<string>.Enumerate_TDWVDAIdentityRegistryEntryParm(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                return Serializer.ToString(value);
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<string>.ConvertTo_TDWVDAPostInvocationParameters(string value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<string>.Enumerate_TDWVDAPostInvocationParameters(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                return Serializer.ToString(value);
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<string>.ConvertTo_TDWVDARevocationListEntryParm(string value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<string>.Enumerate_TDWVDARevocationListEntryParm(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                return Serializer.ToString(value);
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<string>.ConvertTo_TDWVDAServiceEndpointEntryParm(string value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<string>.Enumerate_TDWVDAServiceEndpointEntryParm(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                return Serializer.ToString(value);
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<string>.ConvertTo_TDWVDASmartContractEntryClaims(string value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<string>.Enumerate_TDWVDASmartContractEntryClaims(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                return Serializer.ToString(value);
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<string>.ConvertTo_TDWVDASmartContractEntryContent(string value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<string>.Enumerate_TDWVDASmartContractEntryContent(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                return Serializer.ToString(value);
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<string>.ConvertTo_TDWVDASmartContractEntryEnvelope(string value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<string>.Enumerate_TDWVDASmartContractEntryEnvelope(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                return Serializer.ToString(value);
                
            }
            TRAClaim ITypeConverter<string>.ConvertTo_TRAClaim(string value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<string>.Enumerate_TRAClaim(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TRACredential_Content(TRACredential_Content value)
            {
                
                return Serializer.ToString(value);
                
            }
            TRACredential_Content ITypeConverter<string>.ConvertTo_TRACredential_Content(string value)
            {
                return TypeConverter<TRACredential_Content>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TRACredential_Content()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content> ITypeConverter<string>.Enumerate_TRACredential_Content(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                return Serializer.ToString(value);
                
            }
            TRACredential_Envelope ITypeConverter<string>.ConvertTo_TRACredential_Envelope(string value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<string>.Enumerate_TRACredential_Envelope(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                return Serializer.ToString(value);
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<string>.ConvertTo_TRACredential_EnvelopeSeal(string value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<string>.Enumerate_TRACredential_EnvelopeSeal(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TRACredential_Label(TRACredential_Label value)
            {
                
                return Serializer.ToString(value);
                
            }
            TRACredential_Label ITypeConverter<string>.ConvertTo_TRACredential_Label(string value)
            {
                return TypeConverter<TRACredential_Label>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TRACredential_Label()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Label> ITypeConverter<string>.Enumerate_TRACredential_Label(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                return Serializer.ToString(value);
                
            }
            TRAKeyValuePair ITypeConverter<string>.ConvertTo_TRAKeyValuePair(string value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<string>.Enumerate_TRAKeyValuePair(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                return Serializer.ToString(value);
                
            }
            TRACredentialType ITypeConverter<string>.ConvertTo_TRACredentialType(string value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<string>.Enumerate_TRACredentialType(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                return Serializer.ToString(value);
                
            }
            TRAEncryptionFlag ITypeConverter<string>.ConvertTo_TRAEncryptionFlag(string value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<string>.Enumerate_TRAEncryptionFlag(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                return Serializer.ToString(value);
                
            }
            TRAServiceType ITypeConverter<string>.ConvertTo_TRAServiceType(string value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<string>.Enumerate_TRAServiceType(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                return Serializer.ToString(value);
                
            }
            TRATrustLevel ITypeConverter<string>.ConvertTo_TRATrustLevel(string value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<string>.Enumerate_TRATrustLevel(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                return Serializer.ToString(value);
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<string>.ConvertTo_List_List_TRAKeyValuePair(string value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<string>.Enumerate_List_List_TRAKeyValuePair(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                return Serializer.ToString(value);
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<string>.ConvertTo_TDWVDAAccountEntryContent_nullable(string value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<string>.Enumerate_TDWVDAAccountEntryContent_nullable(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                return Serializer.ToString(value);
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<string>.ConvertTo_TDWVDASmartContractEntryContent_nullable(string value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<string>.Enumerate_TDWVDASmartContractEntryContent_nullable(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TRACredential_Content_nullable(TRACredential_Content? value)
            {
                
                return Serializer.ToString(value);
                
            }
            TRACredential_Content? ITypeConverter<string>.ConvertTo_TRACredential_Content_nullable(string value)
            {
                return TypeConverter<TRACredential_Content?>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TRACredential_Content_nullable()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content?> ITypeConverter<string>.Enumerate_TRACredential_Content_nullable(string value)
            {
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_bool(bool value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_bool(value));
                    return intermediate_result;
                }
                
            }
            bool ITypeConverter<List<string>>.ConvertTo_bool(List<string> value)
            {
                return TypeConverter<bool>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<List<string>>.Enumerate_bool(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<bool>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_long(long value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_long(value));
                    return intermediate_result;
                }
                
            }
            long ITypeConverter<List<string>>.ConvertTo_long(List<string> value)
            {
                return TypeConverter<long>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<List<string>>.Enumerate_long(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<long>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    List<string> intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = ExternalParser.TryParse_List_string(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        try
                        {
                            string element = TypeConverter<string>.ConvertFrom_string(value);
                            intermediate_result = new List<string>();
                            intermediate_result.Add(element);
                        }
                        catch
                        {
                            throw new ArgumentException("Cannot parse \"" + value + "\" into either 'List<string>' or 'string'.");
                        }
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<List<string>>.ConvertTo_string(List<string> value)
            {
                return TypeConverter<string>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<List<string>>.Enumerate_string(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<string>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_List_string(List<string> value)
            {
                
                return (List<string>)value;
                
            }
            List<string> ITypeConverter<List<string>>.ConvertTo_List_string(List<string> value)
            {
                return TypeConverter<List<string>>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<List<string>>.Enumerate_List_string(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<List<string>>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    foreach (var element in value)
                    {
                        intermediate_result.Add(TypeConverter<string>.ConvertFrom_TRAClaim(element));
                    }
                    return intermediate_result;
                }
                
            }
            List<TRAClaim> ITypeConverter<List<string>>.ConvertTo_List_TRAClaim(List<string> value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_CONVERTLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<List<string>>.Enumerate_List_TRAClaim(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<List<TRAClaim>>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    foreach (var element in value)
                    {
                        intermediate_result.Add(TypeConverter<string>.ConvertFrom_TRAKeyValuePair(element));
                    }
                    return intermediate_result;
                }
                
            }
            List<TRAKeyValuePair> ITypeConverter<List<string>>.ConvertTo_List_TRAKeyValuePair(List<string> value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_CONVERTLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<List<string>>.Enumerate_List_TRAKeyValuePair(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TDWVDAAccountEntryClaims(value));
                    return intermediate_result;
                }
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<List<string>>.ConvertTo_TDWVDAAccountEntryClaims(List<string> value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<List<string>>.Enumerate_TDWVDAAccountEntryClaims(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TDWVDAAccountEntryContent(value));
                    return intermediate_result;
                }
                
            }
            TDWVDAAccountEntryContent ITypeConverter<List<string>>.ConvertTo_TDWVDAAccountEntryContent(List<string> value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<List<string>>.Enumerate_TDWVDAAccountEntryContent(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TDWVDAAccountEntryEnvelope(value));
                    return intermediate_result;
                }
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<List<string>>.ConvertTo_TDWVDAAccountEntryEnvelope(List<string> value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<List<string>>.Enumerate_TDWVDAAccountEntryEnvelope(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value));
                    return intermediate_result;
                }
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<List<string>>.ConvertTo_TDWVDAIdentityRegistryEntryParm(List<string> value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<List<string>>.Enumerate_TDWVDAIdentityRegistryEntryParm(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TDWVDAPostInvocationParameters(value));
                    return intermediate_result;
                }
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<List<string>>.ConvertTo_TDWVDAPostInvocationParameters(List<string> value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<List<string>>.Enumerate_TDWVDAPostInvocationParameters(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TDWVDARevocationListEntryParm(value));
                    return intermediate_result;
                }
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<List<string>>.ConvertTo_TDWVDARevocationListEntryParm(List<string> value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<List<string>>.Enumerate_TDWVDARevocationListEntryParm(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value));
                    return intermediate_result;
                }
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<List<string>>.ConvertTo_TDWVDAServiceEndpointEntryParm(List<string> value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<List<string>>.Enumerate_TDWVDAServiceEndpointEntryParm(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TDWVDASmartContractEntryClaims(value));
                    return intermediate_result;
                }
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<List<string>>.ConvertTo_TDWVDASmartContractEntryClaims(List<string> value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<List<string>>.Enumerate_TDWVDASmartContractEntryClaims(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TDWVDASmartContractEntryContent(value));
                    return intermediate_result;
                }
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<List<string>>.ConvertTo_TDWVDASmartContractEntryContent(List<string> value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<List<string>>.Enumerate_TDWVDASmartContractEntryContent(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value));
                    return intermediate_result;
                }
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<List<string>>.ConvertTo_TDWVDASmartContractEntryEnvelope(List<string> value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<List<string>>.Enumerate_TDWVDASmartContractEntryEnvelope(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TRAClaim(value));
                    return intermediate_result;
                }
                
            }
            TRAClaim ITypeConverter<List<string>>.ConvertTo_TRAClaim(List<string> value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<List<string>>.Enumerate_TRAClaim(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TRAClaim>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TRACredential_Content(TRACredential_Content value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TRACredential_Content(value));
                    return intermediate_result;
                }
                
            }
            TRACredential_Content ITypeConverter<List<string>>.ConvertTo_TRACredential_Content(List<string> value)
            {
                return TypeConverter<TRACredential_Content>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TRACredential_Content()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content> ITypeConverter<List<string>>.Enumerate_TRACredential_Content(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TRACredential_Content>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TRACredential_Envelope(value));
                    return intermediate_result;
                }
                
            }
            TRACredential_Envelope ITypeConverter<List<string>>.ConvertTo_TRACredential_Envelope(List<string> value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<List<string>>.Enumerate_TRACredential_Envelope(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TRACredential_Envelope>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TRACredential_EnvelopeSeal(value));
                    return intermediate_result;
                }
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<List<string>>.ConvertTo_TRACredential_EnvelopeSeal(List<string> value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<List<string>>.Enumerate_TRACredential_EnvelopeSeal(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TRACredential_Label(TRACredential_Label value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TRACredential_Label(value));
                    return intermediate_result;
                }
                
            }
            TRACredential_Label ITypeConverter<List<string>>.ConvertTo_TRACredential_Label(List<string> value)
            {
                return TypeConverter<TRACredential_Label>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TRACredential_Label()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Label> ITypeConverter<List<string>>.Enumerate_TRACredential_Label(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TRACredential_Label>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TRAKeyValuePair(value));
                    return intermediate_result;
                }
                
            }
            TRAKeyValuePair ITypeConverter<List<string>>.ConvertTo_TRAKeyValuePair(List<string> value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<List<string>>.Enumerate_TRAKeyValuePair(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TRAKeyValuePair>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TRACredentialType(value));
                    return intermediate_result;
                }
                
            }
            TRACredentialType ITypeConverter<List<string>>.ConvertTo_TRACredentialType(List<string> value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<List<string>>.Enumerate_TRACredentialType(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TRACredentialType>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TRAEncryptionFlag(value));
                    return intermediate_result;
                }
                
            }
            TRAEncryptionFlag ITypeConverter<List<string>>.ConvertTo_TRAEncryptionFlag(List<string> value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<List<string>>.Enumerate_TRAEncryptionFlag(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TRAEncryptionFlag>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TRAServiceType(value));
                    return intermediate_result;
                }
                
            }
            TRAServiceType ITypeConverter<List<string>>.ConvertTo_TRAServiceType(List<string> value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<List<string>>.Enumerate_TRAServiceType(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TRAServiceType>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TRATrustLevel(value));
                    return intermediate_result;
                }
                
            }
            TRATrustLevel ITypeConverter<List<string>>.ConvertTo_TRATrustLevel(List<string> value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<List<string>>.Enumerate_TRATrustLevel(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TRATrustLevel>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    foreach (var element in value)
                    {
                        intermediate_result.Add(TypeConverter<string>.ConvertFrom_List_TRAKeyValuePair(element));
                    }
                    return intermediate_result;
                }
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<string>>.ConvertTo_List_List_TRAKeyValuePair(List<string> value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_CONVERTLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<List<string>>.Enumerate_List_List_TRAKeyValuePair(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value));
                    return intermediate_result;
                }
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<List<string>>.ConvertTo_TDWVDAAccountEntryContent_nullable(List<string> value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<List<string>>.Enumerate_TDWVDAAccountEntryContent_nullable(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value));
                    return intermediate_result;
                }
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<List<string>>.ConvertTo_TDWVDASmartContractEntryContent_nullable(List<string> value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<List<string>>.Enumerate_TDWVDASmartContractEntryContent_nullable(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TRACredential_Content_nullable(TRACredential_Content? value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TRACredential_Content_nullable(value));
                    return intermediate_result;
                }
                
            }
            TRACredential_Content? ITypeConverter<List<string>>.ConvertTo_TRACredential_Content_nullable(List<string> value)
            {
                return TypeConverter<TRACredential_Content?>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TRACredential_Content_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content?> ITypeConverter<List<string>>.Enumerate_TRACredential_Content_nullable(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TRACredential_Content?>.ConvertFrom_string(element);
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'List<TRAClaim>'.");
                
            }
            bool ITypeConverter<List<TRAClaim>>.ConvertTo_bool(List<TRAClaim> value)
            {
                return TypeConverter<bool>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<List<TRAClaim>>.Enumerate_bool(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'List<TRAClaim>'.");
                
            }
            long ITypeConverter<List<TRAClaim>>.ConvertTo_long(List<TRAClaim> value)
            {
                return TypeConverter<long>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<List<TRAClaim>>.Enumerate_long(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    List<TRAClaim> intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = ExternalParser.TryParse_List_TRAClaim(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        try
                        {
                            TRAClaim element = TypeConverter<TRAClaim>.ConvertFrom_string(value);
                            intermediate_result = new List<TRAClaim>();
                            intermediate_result.Add(element);
                        }
                        catch
                        {
                            throw new ArgumentException("Cannot parse \"" + value + "\" into either 'List<TRAClaim>' or 'TRAClaim'.");
                        }
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<List<TRAClaim>>.ConvertTo_string(List<TRAClaim> value)
            {
                return TypeConverter<string>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<List<TRAClaim>>.Enumerate_string(List<TRAClaim> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<string>.ConvertFrom_TRAClaim(element);
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_List_string(List<string> value)
            {
                
                {
                    List<TRAClaim> intermediate_result = new List<TRAClaim>();
                    foreach (var element in value)
                    {
                        intermediate_result.Add(TypeConverter<TRAClaim>.ConvertFrom_string(element));
                    }
                    return intermediate_result;
                }
                
            }
            List<string> ITypeConverter<List<TRAClaim>>.ConvertTo_List_string(List<TRAClaim> value)
            {
                return TypeConverter<List<string>>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_CONVERTLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<List<TRAClaim>>.Enumerate_List_string(List<TRAClaim> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<List<string>>.ConvertFrom_TRAClaim(element);
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                return (List<TRAClaim>)value;
                
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertTo_List_TRAClaim(List<TRAClaim> value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<List<TRAClaim>>.Enumerate_List_TRAClaim(List<TRAClaim> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<List<TRAClaim>>.ConvertFrom_TRAClaim(element);
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'List<TRAClaim>'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAClaim>>.ConvertTo_List_TRAKeyValuePair(List<TRAClaim> value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<List<TRAClaim>>.Enumerate_List_TRAKeyValuePair(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'List<TRAClaim>'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<List<TRAClaim>>.ConvertTo_TDWVDAAccountEntryClaims(List<TRAClaim> value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<List<TRAClaim>>.Enumerate_TDWVDAAccountEntryClaims(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'List<TRAClaim>'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<List<TRAClaim>>.ConvertTo_TDWVDAAccountEntryContent(List<TRAClaim> value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<List<TRAClaim>>.Enumerate_TDWVDAAccountEntryContent(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'List<TRAClaim>'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<List<TRAClaim>>.ConvertTo_TDWVDAAccountEntryEnvelope(List<TRAClaim> value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<List<TRAClaim>>.Enumerate_TDWVDAAccountEntryEnvelope(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'List<TRAClaim>'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<List<TRAClaim>>.ConvertTo_TDWVDAIdentityRegistryEntryParm(List<TRAClaim> value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<List<TRAClaim>>.Enumerate_TDWVDAIdentityRegistryEntryParm(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'List<TRAClaim>'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<List<TRAClaim>>.ConvertTo_TDWVDAPostInvocationParameters(List<TRAClaim> value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<List<TRAClaim>>.Enumerate_TDWVDAPostInvocationParameters(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'List<TRAClaim>'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<List<TRAClaim>>.ConvertTo_TDWVDARevocationListEntryParm(List<TRAClaim> value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<List<TRAClaim>>.Enumerate_TDWVDARevocationListEntryParm(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'List<TRAClaim>'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<List<TRAClaim>>.ConvertTo_TDWVDAServiceEndpointEntryParm(List<TRAClaim> value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<List<TRAClaim>>.Enumerate_TDWVDAServiceEndpointEntryParm(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'List<TRAClaim>'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<List<TRAClaim>>.ConvertTo_TDWVDASmartContractEntryClaims(List<TRAClaim> value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<List<TRAClaim>>.Enumerate_TDWVDASmartContractEntryClaims(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'List<TRAClaim>'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<List<TRAClaim>>.ConvertTo_TDWVDASmartContractEntryContent(List<TRAClaim> value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<List<TRAClaim>>.Enumerate_TDWVDASmartContractEntryContent(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'List<TRAClaim>'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<List<TRAClaim>>.ConvertTo_TDWVDASmartContractEntryEnvelope(List<TRAClaim> value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<List<TRAClaim>>.Enumerate_TDWVDASmartContractEntryEnvelope(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                {
                    List<TRAClaim> intermediate_result = new List<TRAClaim>();
                    intermediate_result.Add(TypeConverter<TRAClaim>.ConvertFrom_TRAClaim(value));
                    return intermediate_result;
                }
                
            }
            TRAClaim ITypeConverter<List<TRAClaim>>.ConvertTo_TRAClaim(List<TRAClaim> value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<List<TRAClaim>>.Enumerate_TRAClaim(List<TRAClaim> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TRAClaim>.ConvertFrom_TRAClaim(element);
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TRACredential_Content(TRACredential_Content value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content' to 'List<TRAClaim>'.");
                
            }
            TRACredential_Content ITypeConverter<List<TRAClaim>>.ConvertTo_TRACredential_Content(List<TRAClaim> value)
            {
                return TypeConverter<TRACredential_Content>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TRACredential_Content()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content> ITypeConverter<List<TRAClaim>>.Enumerate_TRACredential_Content(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'List<TRAClaim>'.");
                
            }
            TRACredential_Envelope ITypeConverter<List<TRAClaim>>.ConvertTo_TRACredential_Envelope(List<TRAClaim> value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<List<TRAClaim>>.Enumerate_TRACredential_Envelope(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'List<TRAClaim>'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<List<TRAClaim>>.ConvertTo_TRACredential_EnvelopeSeal(List<TRAClaim> value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<List<TRAClaim>>.Enumerate_TRACredential_EnvelopeSeal(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TRACredential_Label(TRACredential_Label value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Label' to 'List<TRAClaim>'.");
                
            }
            TRACredential_Label ITypeConverter<List<TRAClaim>>.ConvertTo_TRACredential_Label(List<TRAClaim> value)
            {
                return TypeConverter<TRACredential_Label>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TRACredential_Label()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Label> ITypeConverter<List<TRAClaim>>.Enumerate_TRACredential_Label(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'List<TRAClaim>'.");
                
            }
            TRAKeyValuePair ITypeConverter<List<TRAClaim>>.ConvertTo_TRAKeyValuePair(List<TRAClaim> value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<List<TRAClaim>>.Enumerate_TRAKeyValuePair(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'List<TRAClaim>'.");
                
            }
            TRACredentialType ITypeConverter<List<TRAClaim>>.ConvertTo_TRACredentialType(List<TRAClaim> value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<List<TRAClaim>>.Enumerate_TRACredentialType(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'List<TRAClaim>'.");
                
            }
            TRAEncryptionFlag ITypeConverter<List<TRAClaim>>.ConvertTo_TRAEncryptionFlag(List<TRAClaim> value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<List<TRAClaim>>.Enumerate_TRAEncryptionFlag(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'List<TRAClaim>'.");
                
            }
            TRAServiceType ITypeConverter<List<TRAClaim>>.ConvertTo_TRAServiceType(List<TRAClaim> value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<List<TRAClaim>>.Enumerate_TRAServiceType(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'List<TRAClaim>'.");
                
            }
            TRATrustLevel ITypeConverter<List<TRAClaim>>.ConvertTo_TRATrustLevel(List<TRAClaim> value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<List<TRAClaim>>.Enumerate_TRATrustLevel(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'List<TRAClaim>'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<TRAClaim>>.ConvertTo_List_List_TRAKeyValuePair(List<TRAClaim> value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<List<TRAClaim>>.Enumerate_List_List_TRAKeyValuePair(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'List<TRAClaim>'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<List<TRAClaim>>.ConvertTo_TDWVDAAccountEntryContent_nullable(List<TRAClaim> value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<List<TRAClaim>>.Enumerate_TDWVDAAccountEntryContent_nullable(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'List<TRAClaim>'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<List<TRAClaim>>.ConvertTo_TDWVDASmartContractEntryContent_nullable(List<TRAClaim> value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<List<TRAClaim>>.Enumerate_TDWVDASmartContractEntryContent_nullable(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TRACredential_Content_nullable(TRACredential_Content? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content?' to 'List<TRAClaim>'.");
                
            }
            TRACredential_Content? ITypeConverter<List<TRAClaim>>.ConvertTo_TRACredential_Content_nullable(List<TRAClaim> value)
            {
                return TypeConverter<TRACredential_Content?>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TRACredential_Content_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content?> ITypeConverter<List<TRAClaim>>.Enumerate_TRACredential_Content_nullable(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'List<TRAKeyValuePair>'.");
                
            }
            bool ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_bool(List<TRAKeyValuePair> value)
            {
                return TypeConverter<bool>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_bool(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'List<TRAKeyValuePair>'.");
                
            }
            long ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_long(List<TRAKeyValuePair> value)
            {
                return TypeConverter<long>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_long(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    List<TRAKeyValuePair> intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = ExternalParser.TryParse_List_TRAKeyValuePair(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        try
                        {
                            TRAKeyValuePair element = TypeConverter<TRAKeyValuePair>.ConvertFrom_string(value);
                            intermediate_result = new List<TRAKeyValuePair>();
                            intermediate_result.Add(element);
                        }
                        catch
                        {
                            throw new ArgumentException("Cannot parse \"" + value + "\" into either 'List<TRAKeyValuePair>' or 'TRAKeyValuePair'.");
                        }
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_string(List<TRAKeyValuePair> value)
            {
                return TypeConverter<string>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_string(List<TRAKeyValuePair> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<string>.ConvertFrom_TRAKeyValuePair(element);
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_List_string(List<string> value)
            {
                
                {
                    List<TRAKeyValuePair> intermediate_result = new List<TRAKeyValuePair>();
                    foreach (var element in value)
                    {
                        intermediate_result.Add(TypeConverter<TRAKeyValuePair>.ConvertFrom_string(element));
                    }
                    return intermediate_result;
                }
                
            }
            List<string> ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_List_string(List<TRAKeyValuePair> value)
            {
                return TypeConverter<List<string>>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_CONVERTLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_List_string(List<TRAKeyValuePair> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<List<string>>.ConvertFrom_TRAKeyValuePair(element);
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'List<TRAKeyValuePair>'.");
                
            }
            List<TRAClaim> ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_List_TRAClaim(List<TRAKeyValuePair> value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_List_TRAClaim(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                return (List<TRAKeyValuePair>)value;
                
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRAKeyValuePair(element);
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'List<TRAKeyValuePair>'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TDWVDAAccountEntryClaims(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TDWVDAAccountEntryClaims(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'List<TRAKeyValuePair>'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TDWVDAAccountEntryContent(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TDWVDAAccountEntryContent(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'List<TRAKeyValuePair>'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TDWVDAAccountEntryEnvelope(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TDWVDAAccountEntryEnvelope(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'List<TRAKeyValuePair>'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TDWVDAIdentityRegistryEntryParm(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TDWVDAIdentityRegistryEntryParm(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'List<TRAKeyValuePair>'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TDWVDAPostInvocationParameters(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TDWVDAPostInvocationParameters(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'List<TRAKeyValuePair>'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TDWVDARevocationListEntryParm(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TDWVDARevocationListEntryParm(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'List<TRAKeyValuePair>'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TDWVDAServiceEndpointEntryParm(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TDWVDAServiceEndpointEntryParm(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'List<TRAKeyValuePair>'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TDWVDASmartContractEntryClaims(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TDWVDASmartContractEntryClaims(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'List<TRAKeyValuePair>'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TDWVDASmartContractEntryContent(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TDWVDASmartContractEntryContent(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'List<TRAKeyValuePair>'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TDWVDASmartContractEntryEnvelope(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TDWVDASmartContractEntryEnvelope(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'List<TRAKeyValuePair>'.");
                
            }
            TRAClaim ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TRAClaim(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TRAClaim(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRACredential_Content(TRACredential_Content value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content' to 'List<TRAKeyValuePair>'.");
                
            }
            TRACredential_Content ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TRACredential_Content(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TRACredential_Content>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TRACredential_Content()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TRACredential_Content(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'List<TRAKeyValuePair>'.");
                
            }
            TRACredential_Envelope ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TRACredential_Envelope(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TRACredential_Envelope(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'List<TRAKeyValuePair>'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TRACredential_EnvelopeSeal(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TRACredential_EnvelopeSeal(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRACredential_Label(TRACredential_Label value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Label' to 'List<TRAKeyValuePair>'.");
                
            }
            TRACredential_Label ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TRACredential_Label(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TRACredential_Label>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TRACredential_Label()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Label> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TRACredential_Label(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                {
                    List<TRAKeyValuePair> intermediate_result = new List<TRAKeyValuePair>();
                    intermediate_result.Add(TypeConverter<TRAKeyValuePair>.ConvertFrom_TRAKeyValuePair(value));
                    return intermediate_result;
                }
                
            }
            TRAKeyValuePair ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TRAKeyValuePair>.ConvertFrom_TRAKeyValuePair(element);
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'List<TRAKeyValuePair>'.");
                
            }
            TRACredentialType ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TRACredentialType(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TRACredentialType(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'List<TRAKeyValuePair>'.");
                
            }
            TRAEncryptionFlag ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TRAEncryptionFlag(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TRAEncryptionFlag(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'List<TRAKeyValuePair>'.");
                
            }
            TRAServiceType ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TRAServiceType(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TRAServiceType(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'List<TRAKeyValuePair>'.");
                
            }
            TRATrustLevel ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TRATrustLevel(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TRATrustLevel(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'List<TRAKeyValuePair>'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_List_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_CONVERTLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_List_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRAKeyValuePair(element);
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'List<TRAKeyValuePair>'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TDWVDAAccountEntryContent_nullable(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TDWVDAAccountEntryContent_nullable(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'List<TRAKeyValuePair>'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TDWVDASmartContractEntryContent_nullable(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TDWVDASmartContractEntryContent_nullable(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRACredential_Content_nullable(TRACredential_Content? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content?' to 'List<TRAKeyValuePair>'.");
                
            }
            TRACredential_Content? ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TRACredential_Content_nullable(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TRACredential_Content?>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TRACredential_Content_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content?> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TRACredential_Content_nullable(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TDWVDAAccountEntryClaims'.");
                
            }
            bool ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_bool(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<bool>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_bool(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TDWVDAAccountEntryClaims'.");
                
            }
            long ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_long(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<long>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_long(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TDWVDAAccountEntryClaims intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TDWVDAAccountEntryClaims.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TDWVDAAccountEntryClaims");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_string(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<string>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_string(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TDWVDAAccountEntryClaims'.");
                
            }
            List<string> ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_List_string(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_List_string(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TDWVDAAccountEntryClaims'.");
                
            }
            List<TRAClaim> ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_List_TRAClaim(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_List_TRAClaim(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TDWVDAAccountEntryClaims'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_List_TRAKeyValuePair(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_List_TRAKeyValuePair(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                return (TDWVDAAccountEntryClaims)value;
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'TDWVDAAccountEntryClaims'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_TDWVDAAccountEntryContent(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_TDWVDAAccountEntryContent(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'TDWVDAAccountEntryClaims'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TDWVDAAccountEntryClaims'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_TDWVDAIdentityRegistryEntryParm(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TDWVDAAccountEntryClaims'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_TDWVDAPostInvocationParameters(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_TDWVDAPostInvocationParameters(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TDWVDAAccountEntryClaims'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_TDWVDARevocationListEntryParm(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_TDWVDARevocationListEntryParm(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TDWVDAAccountEntryClaims'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_TDWVDAServiceEndpointEntryParm(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_TDWVDAServiceEndpointEntryParm(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'TDWVDAAccountEntryClaims'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_TDWVDASmartContractEntryClaims(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_TDWVDASmartContractEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'TDWVDAAccountEntryClaims'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_TDWVDASmartContractEntryContent(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_TDWVDASmartContractEntryContent(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'TDWVDAAccountEntryClaims'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_TDWVDASmartContractEntryEnvelope(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_TDWVDASmartContractEntryEnvelope(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TDWVDAAccountEntryClaims'.");
                
            }
            TRAClaim ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_TRAClaim(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_TRAClaim(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TRACredential_Content(TRACredential_Content value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content' to 'TDWVDAAccountEntryClaims'.");
                
            }
            TRACredential_Content ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_TRACredential_Content(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<TRACredential_Content>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_TRACredential_Content()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_TRACredential_Content(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'TDWVDAAccountEntryClaims'.");
                
            }
            TRACredential_Envelope ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_TRACredential_Envelope(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_TRACredential_Envelope(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'TDWVDAAccountEntryClaims'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_TRACredential_EnvelopeSeal(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_TRACredential_EnvelopeSeal(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TRACredential_Label(TRACredential_Label value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Label' to 'TDWVDAAccountEntryClaims'.");
                
            }
            TRACredential_Label ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_TRACredential_Label(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<TRACredential_Label>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_TRACredential_Label()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Label> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_TRACredential_Label(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TDWVDAAccountEntryClaims'.");
                
            }
            TRAKeyValuePair ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_TRAKeyValuePair(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_TRAKeyValuePair(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TDWVDAAccountEntryClaims'.");
                
            }
            TRACredentialType ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_TRACredentialType(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_TRACredentialType(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TDWVDAAccountEntryClaims'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_TRAEncryptionFlag(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_TRAEncryptionFlag(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TDWVDAAccountEntryClaims'.");
                
            }
            TRAServiceType ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_TRAServiceType(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_TRAServiceType(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TDWVDAAccountEntryClaims'.");
                
            }
            TRATrustLevel ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_TRATrustLevel(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_TRATrustLevel(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TDWVDAAccountEntryClaims'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_List_List_TRAKeyValuePair(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_List_List_TRAKeyValuePair(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'TDWVDAAccountEntryClaims'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'TDWVDAAccountEntryClaims'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_TDWVDASmartContractEntryContent_nullable(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_TDWVDASmartContractEntryContent_nullable(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TRACredential_Content_nullable(TRACredential_Content? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content?' to 'TDWVDAAccountEntryClaims'.");
                
            }
            TRACredential_Content? ITypeConverter<TDWVDAAccountEntryClaims>.ConvertTo_TRACredential_Content_nullable(TDWVDAAccountEntryClaims value)
            {
                return TypeConverter<TRACredential_Content?>.ConvertFrom_TDWVDAAccountEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryClaims>.GetConversionActionTo_TRACredential_Content_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content?> ITypeConverter<TDWVDAAccountEntryClaims>.Enumerate_TRACredential_Content_nullable(TDWVDAAccountEntryClaims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TDWVDAAccountEntryContent'.");
                
            }
            bool ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_bool(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<bool>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_bool(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TDWVDAAccountEntryContent'.");
                
            }
            long ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_long(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<long>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_long(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TDWVDAAccountEntryContent intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TDWVDAAccountEntryContent.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TDWVDAAccountEntryContent");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_string(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<string>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_string(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TDWVDAAccountEntryContent'.");
                
            }
            List<string> ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_List_string(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_List_string(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TDWVDAAccountEntryContent'.");
                
            }
            List<TRAClaim> ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_List_TRAClaim(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_List_TRAClaim(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TDWVDAAccountEntryContent'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_List_TRAKeyValuePair(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_List_TRAKeyValuePair(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'TDWVDAAccountEntryContent'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_TDWVDAAccountEntryClaims(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_TDWVDAAccountEntryClaims(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                return (TDWVDAAccountEntryContent)value;
                
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'TDWVDAAccountEntryContent'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TDWVDAAccountEntryContent'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_TDWVDAIdentityRegistryEntryParm(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TDWVDAAccountEntryContent'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_TDWVDAPostInvocationParameters(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_TDWVDAPostInvocationParameters(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TDWVDAAccountEntryContent'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_TDWVDARevocationListEntryParm(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_TDWVDARevocationListEntryParm(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TDWVDAAccountEntryContent'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_TDWVDAServiceEndpointEntryParm(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_TDWVDAServiceEndpointEntryParm(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'TDWVDAAccountEntryContent'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_TDWVDASmartContractEntryClaims(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_TDWVDASmartContractEntryClaims(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'TDWVDAAccountEntryContent'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_TDWVDASmartContractEntryContent(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_TDWVDASmartContractEntryContent(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'TDWVDAAccountEntryContent'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_TDWVDASmartContractEntryEnvelope(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_TDWVDASmartContractEntryEnvelope(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TDWVDAAccountEntryContent'.");
                
            }
            TRAClaim ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_TRAClaim(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_TRAClaim(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TRACredential_Content(TRACredential_Content value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content' to 'TDWVDAAccountEntryContent'.");
                
            }
            TRACredential_Content ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_TRACredential_Content(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<TRACredential_Content>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_TRACredential_Content()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_TRACredential_Content(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'TDWVDAAccountEntryContent'.");
                
            }
            TRACredential_Envelope ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_TRACredential_Envelope(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_TRACredential_Envelope(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'TDWVDAAccountEntryContent'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_TRACredential_EnvelopeSeal(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_TRACredential_EnvelopeSeal(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TRACredential_Label(TRACredential_Label value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Label' to 'TDWVDAAccountEntryContent'.");
                
            }
            TRACredential_Label ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_TRACredential_Label(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<TRACredential_Label>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_TRACredential_Label()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Label> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_TRACredential_Label(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TDWVDAAccountEntryContent'.");
                
            }
            TRAKeyValuePair ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_TRAKeyValuePair(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_TRAKeyValuePair(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TDWVDAAccountEntryContent'.");
                
            }
            TRACredentialType ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_TRACredentialType(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_TRACredentialType(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TDWVDAAccountEntryContent'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_TRAEncryptionFlag(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_TRAEncryptionFlag(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TDWVDAAccountEntryContent'.");
                
            }
            TRAServiceType ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_TRAServiceType(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_TRAServiceType(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TDWVDAAccountEntryContent'.");
                
            }
            TRATrustLevel ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_TRATrustLevel(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_TRATrustLevel(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TDWVDAAccountEntryContent'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_List_List_TRAKeyValuePair(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_List_List_TRAKeyValuePair(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TDWVDAAccountEntryContent(value.Value);
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'TDWVDAAccountEntryContent'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_TDWVDASmartContractEntryContent_nullable(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_TDWVDASmartContractEntryContent_nullable(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TRACredential_Content_nullable(TRACredential_Content? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content?' to 'TDWVDAAccountEntryContent'.");
                
            }
            TRACredential_Content? ITypeConverter<TDWVDAAccountEntryContent>.ConvertTo_TRACredential_Content_nullable(TDWVDAAccountEntryContent value)
            {
                return TypeConverter<TRACredential_Content?>.ConvertFrom_TDWVDAAccountEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent>.GetConversionActionTo_TRACredential_Content_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content?> ITypeConverter<TDWVDAAccountEntryContent>.Enumerate_TRACredential_Content_nullable(TDWVDAAccountEntryContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            bool ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_bool(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<bool>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_bool(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            long ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_long(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<long>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_long(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TDWVDAAccountEntryEnvelope intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TDWVDAAccountEntryEnvelope.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TDWVDAAccountEntryEnvelope");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_string(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<string>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_string(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            List<string> ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_List_string(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_List_string(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            List<TRAClaim> ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_List_TRAClaim(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_List_TRAClaim(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_List_TRAKeyValuePair(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_List_TRAKeyValuePair(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_TDWVDAAccountEntryClaims(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_TDWVDAAccountEntryClaims(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_TDWVDAAccountEntryContent(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_TDWVDAAccountEntryContent(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                return (TDWVDAAccountEntryEnvelope)value;
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_TDWVDAIdentityRegistryEntryParm(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_TDWVDAPostInvocationParameters(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_TDWVDAPostInvocationParameters(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_TDWVDARevocationListEntryParm(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_TDWVDARevocationListEntryParm(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_TDWVDAServiceEndpointEntryParm(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_TDWVDAServiceEndpointEntryParm(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_TDWVDASmartContractEntryClaims(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_TDWVDASmartContractEntryClaims(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_TDWVDASmartContractEntryContent(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_TDWVDASmartContractEntryContent(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_TDWVDASmartContractEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_TDWVDASmartContractEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            TRAClaim ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_TRAClaim(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_TRAClaim(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TRACredential_Content(TRACredential_Content value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            TRACredential_Content ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_TRACredential_Content(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<TRACredential_Content>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_TRACredential_Content()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_TRACredential_Content(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            TRACredential_Envelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_TRACredential_Envelope(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_TRACredential_Envelope(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_TRACredential_EnvelopeSeal(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_TRACredential_EnvelopeSeal(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TRACredential_Label(TRACredential_Label value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Label' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            TRACredential_Label ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_TRACredential_Label(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<TRACredential_Label>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_TRACredential_Label()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Label> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_TRACredential_Label(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            TRAKeyValuePair ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_TRAKeyValuePair(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_TRAKeyValuePair(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            TRACredentialType ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_TRACredentialType(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_TRACredentialType(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_TRAEncryptionFlag(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_TRAEncryptionFlag(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            TRAServiceType ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_TRAServiceType(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_TRAServiceType(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            TRATrustLevel ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_TRATrustLevel(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_TRATrustLevel(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_List_List_TRAKeyValuePair(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_List_List_TRAKeyValuePair(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_TDWVDASmartContractEntryContent_nullable(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_TDWVDASmartContractEntryContent_nullable(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TRACredential_Content_nullable(TRACredential_Content? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content?' to 'TDWVDAAccountEntryEnvelope'.");
                
            }
            TRACredential_Content? ITypeConverter<TDWVDAAccountEntryEnvelope>.ConvertTo_TRACredential_Content_nullable(TDWVDAAccountEntryEnvelope value)
            {
                return TypeConverter<TRACredential_Content?>.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryEnvelope>.GetConversionActionTo_TRACredential_Content_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content?> ITypeConverter<TDWVDAAccountEntryEnvelope>.Enumerate_TRACredential_Content_nullable(TDWVDAAccountEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            bool ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_bool(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<bool>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_bool(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            long ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_long(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<long>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_long(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TDWVDAIdentityRegistryEntryParm intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TDWVDAIdentityRegistryEntryParm.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TDWVDAIdentityRegistryEntryParm");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_string(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<string>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_string(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            List<string> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_List_string(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_List_string(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            List<TRAClaim> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_List_TRAClaim(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_List_TRAClaim(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_List_TRAKeyValuePair(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_List_TRAKeyValuePair(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TDWVDAAccountEntryClaims(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TDWVDAAccountEntryClaims(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TDWVDAAccountEntryContent(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TDWVDAAccountEntryContent(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TDWVDAAccountEntryEnvelope(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TDWVDAAccountEntryEnvelope(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                return (TDWVDAIdentityRegistryEntryParm)value;
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TDWVDAPostInvocationParameters(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TDWVDAPostInvocationParameters(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TDWVDARevocationListEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TDWVDARevocationListEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TDWVDAServiceEndpointEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TDWVDAServiceEndpointEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TDWVDASmartContractEntryClaims(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TDWVDASmartContractEntryClaims(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TDWVDASmartContractEntryContent(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TDWVDASmartContractEntryContent(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TDWVDASmartContractEntryEnvelope(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TDWVDASmartContractEntryEnvelope(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TRAClaim ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TRAClaim(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TRAClaim(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRACredential_Content(TRACredential_Content value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TRACredential_Content ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TRACredential_Content(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TRACredential_Content>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TRACredential_Content()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TRACredential_Content(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TRACredential_Envelope ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TRACredential_Envelope(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TRACredential_Envelope(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TRACredential_EnvelopeSeal(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TRACredential_EnvelopeSeal(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRACredential_Label(TRACredential_Label value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Label' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TRACredential_Label ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TRACredential_Label(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TRACredential_Label>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TRACredential_Label()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Label> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TRACredential_Label(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TRAKeyValuePair ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TRAKeyValuePair(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TRAKeyValuePair(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TRACredentialType ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TRACredentialType(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TRACredentialType(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TRAEncryptionFlag(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TRAEncryptionFlag(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TRAServiceType ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TRAServiceType(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TRAServiceType(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TRATrustLevel ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TRATrustLevel(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TRATrustLevel(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_List_List_TRAKeyValuePair(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_List_List_TRAKeyValuePair(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TDWVDAAccountEntryContent_nullable(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TDWVDAAccountEntryContent_nullable(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TDWVDASmartContractEntryContent_nullable(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TDWVDASmartContractEntryContent_nullable(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRACredential_Content_nullable(TRACredential_Content? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content?' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TRACredential_Content? ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TRACredential_Content_nullable(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TRACredential_Content?>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TRACredential_Content_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content?> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TRACredential_Content_nullable(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TDWVDAPostInvocationParameters'.");
                
            }
            bool ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_bool(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<bool>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_bool(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TDWVDAPostInvocationParameters'.");
                
            }
            long ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_long(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<long>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_long(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TDWVDAPostInvocationParameters intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TDWVDAPostInvocationParameters.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TDWVDAPostInvocationParameters");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_string(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<string>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_string(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TDWVDAPostInvocationParameters'.");
                
            }
            List<string> ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_List_string(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_List_string(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TDWVDAPostInvocationParameters'.");
                
            }
            List<TRAClaim> ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_List_TRAClaim(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_List_TRAClaim(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TDWVDAPostInvocationParameters'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_List_TRAKeyValuePair(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_List_TRAKeyValuePair(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TDWVDAAccountEntryClaims(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TDWVDAAccountEntryClaims(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TDWVDAAccountEntryContent(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TDWVDAAccountEntryContent(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TDWVDAAccountEntryEnvelope(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TDWVDAAccountEntryEnvelope(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TDWVDAIdentityRegistryEntryParm(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                return (TDWVDAPostInvocationParameters)value;
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TDWVDARevocationListEntryParm(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TDWVDARevocationListEntryParm(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TDWVDAServiceEndpointEntryParm(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TDWVDAServiceEndpointEntryParm(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TDWVDASmartContractEntryClaims(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TDWVDASmartContractEntryClaims(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TDWVDASmartContractEntryContent(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TDWVDASmartContractEntryContent(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TDWVDASmartContractEntryEnvelope(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TDWVDASmartContractEntryEnvelope(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TRAClaim ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TRAClaim(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TRAClaim(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRACredential_Content(TRACredential_Content value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TRACredential_Content ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TRACredential_Content(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TRACredential_Content>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TRACredential_Content()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TRACredential_Content(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TRACredential_Envelope ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TRACredential_Envelope(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TRACredential_Envelope(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TRACredential_EnvelopeSeal(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TRACredential_EnvelopeSeal(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRACredential_Label(TRACredential_Label value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Label' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TRACredential_Label ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TRACredential_Label(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TRACredential_Label>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TRACredential_Label()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Label> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TRACredential_Label(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TRAKeyValuePair ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TRAKeyValuePair(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TRAKeyValuePair(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TRACredentialType ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TRACredentialType(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TRACredentialType(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TRAEncryptionFlag(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TRAEncryptionFlag(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TRAServiceType ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TRAServiceType(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TRAServiceType(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TRATrustLevel ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TRATrustLevel(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TRATrustLevel(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TDWVDAPostInvocationParameters'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_List_List_TRAKeyValuePair(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_List_List_TRAKeyValuePair(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TDWVDAAccountEntryContent_nullable(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TDWVDAAccountEntryContent_nullable(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TDWVDASmartContractEntryContent_nullable(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TDWVDASmartContractEntryContent_nullable(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRACredential_Content_nullable(TRACredential_Content? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content?' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TRACredential_Content? ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TRACredential_Content_nullable(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TRACredential_Content?>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TRACredential_Content_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content?> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TRACredential_Content_nullable(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TDWVDARevocationListEntryParm'.");
                
            }
            bool ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_bool(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<bool>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_bool(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TDWVDARevocationListEntryParm'.");
                
            }
            long ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_long(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<long>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_long(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TDWVDARevocationListEntryParm intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TDWVDARevocationListEntryParm.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TDWVDARevocationListEntryParm");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_string(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<string>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_string(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TDWVDARevocationListEntryParm'.");
                
            }
            List<string> ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_List_string(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_List_string(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TDWVDARevocationListEntryParm'.");
                
            }
            List<TRAClaim> ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_List_TRAClaim(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_List_TRAClaim(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TDWVDARevocationListEntryParm'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_List_TRAKeyValuePair(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_List_TRAKeyValuePair(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TDWVDAAccountEntryClaims(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TDWVDAAccountEntryClaims(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TDWVDAAccountEntryContent(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TDWVDAAccountEntryContent(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TDWVDAAccountEntryEnvelope(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TDWVDAAccountEntryEnvelope(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TDWVDAIdentityRegistryEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TDWVDAPostInvocationParameters(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TDWVDAPostInvocationParameters(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                return (TDWVDARevocationListEntryParm)value;
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TDWVDAServiceEndpointEntryParm(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TDWVDAServiceEndpointEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TDWVDASmartContractEntryClaims(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TDWVDASmartContractEntryClaims(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TDWVDASmartContractEntryContent(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TDWVDASmartContractEntryContent(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TDWVDASmartContractEntryEnvelope(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TDWVDASmartContractEntryEnvelope(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TRAClaim ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TRAClaim(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TRAClaim(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRACredential_Content(TRACredential_Content value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TRACredential_Content ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TRACredential_Content(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TRACredential_Content>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TRACredential_Content()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TRACredential_Content(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TRACredential_Envelope ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TRACredential_Envelope(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TRACredential_Envelope(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TRACredential_EnvelopeSeal(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TRACredential_EnvelopeSeal(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRACredential_Label(TRACredential_Label value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Label' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TRACredential_Label ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TRACredential_Label(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TRACredential_Label>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TRACredential_Label()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Label> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TRACredential_Label(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TRAKeyValuePair ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TRAKeyValuePair(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TRAKeyValuePair(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TRACredentialType ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TRACredentialType(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TRACredentialType(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TRAEncryptionFlag(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TRAEncryptionFlag(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TRAServiceType ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TRAServiceType(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TRAServiceType(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TRATrustLevel ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TRATrustLevel(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TRATrustLevel(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TDWVDARevocationListEntryParm'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_List_List_TRAKeyValuePair(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_List_List_TRAKeyValuePair(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TDWVDAAccountEntryContent_nullable(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TDWVDAAccountEntryContent_nullable(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TDWVDASmartContractEntryContent_nullable(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TDWVDASmartContractEntryContent_nullable(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRACredential_Content_nullable(TRACredential_Content? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content?' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TRACredential_Content? ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TRACredential_Content_nullable(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TRACredential_Content?>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TRACredential_Content_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content?> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TRACredential_Content_nullable(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            bool ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_bool(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<bool>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_bool(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            long ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_long(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<long>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_long(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TDWVDAServiceEndpointEntryParm intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TDWVDAServiceEndpointEntryParm.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TDWVDAServiceEndpointEntryParm");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_string(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<string>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_string(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            List<string> ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_List_string(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_List_string(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            List<TRAClaim> ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_List_TRAClaim(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_List_TRAClaim(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_List_TRAKeyValuePair(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_List_TRAKeyValuePair(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TDWVDAAccountEntryClaims(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TDWVDAAccountEntryClaims(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TDWVDAAccountEntryContent(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TDWVDAAccountEntryContent(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TDWVDAAccountEntryEnvelope(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TDWVDAAccountEntryEnvelope(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TDWVDAIdentityRegistryEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TDWVDAPostInvocationParameters(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TDWVDAPostInvocationParameters(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TDWVDARevocationListEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TDWVDARevocationListEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                return (TDWVDAServiceEndpointEntryParm)value;
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TDWVDASmartContractEntryClaims(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TDWVDASmartContractEntryClaims(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TDWVDASmartContractEntryContent(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TDWVDASmartContractEntryContent(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TDWVDASmartContractEntryEnvelope(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TDWVDASmartContractEntryEnvelope(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TRAClaim ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TRAClaim(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TRAClaim(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRACredential_Content(TRACredential_Content value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TRACredential_Content ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TRACredential_Content(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TRACredential_Content>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TRACredential_Content()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TRACredential_Content(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TRACredential_Envelope ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TRACredential_Envelope(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TRACredential_Envelope(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TRACredential_EnvelopeSeal(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TRACredential_EnvelopeSeal(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRACredential_Label(TRACredential_Label value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Label' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TRACredential_Label ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TRACredential_Label(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TRACredential_Label>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TRACredential_Label()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Label> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TRACredential_Label(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TRAKeyValuePair ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TRAKeyValuePair(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TRAKeyValuePair(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TRACredentialType ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TRACredentialType(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TRACredentialType(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TRAEncryptionFlag(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TRAEncryptionFlag(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TRAServiceType ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TRAServiceType(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TRAServiceType(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TRATrustLevel ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TRATrustLevel(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TRATrustLevel(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_List_List_TRAKeyValuePair(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_List_List_TRAKeyValuePair(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TDWVDAAccountEntryContent_nullable(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TDWVDAAccountEntryContent_nullable(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TDWVDASmartContractEntryContent_nullable(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TDWVDASmartContractEntryContent_nullable(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRACredential_Content_nullable(TRACredential_Content? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content?' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TRACredential_Content? ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TRACredential_Content_nullable(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TRACredential_Content?>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TRACredential_Content_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content?> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TRACredential_Content_nullable(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            bool ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_bool(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<bool>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_bool(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            long ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_long(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<long>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_long(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TDWVDASmartContractEntryClaims intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TDWVDASmartContractEntryClaims.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TDWVDASmartContractEntryClaims");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_string(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<string>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_string(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            List<string> ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_List_string(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_List_string(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            List<TRAClaim> ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_List_TRAClaim(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_List_TRAClaim(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_List_TRAKeyValuePair(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_List_TRAKeyValuePair(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_TDWVDAAccountEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_TDWVDAAccountEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_TDWVDAAccountEntryContent(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_TDWVDAAccountEntryContent(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_TDWVDAAccountEntryEnvelope(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_TDWVDAAccountEntryEnvelope(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_TDWVDAIdentityRegistryEntryParm(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_TDWVDAPostInvocationParameters(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_TDWVDAPostInvocationParameters(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_TDWVDARevocationListEntryParm(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_TDWVDARevocationListEntryParm(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_TDWVDAServiceEndpointEntryParm(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_TDWVDAServiceEndpointEntryParm(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                return (TDWVDASmartContractEntryClaims)value;
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            TRAClaim ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_TRAClaim(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_TRAClaim(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TRACredential_Content(TRACredential_Content value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            TRACredential_Content ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_TRACredential_Content(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<TRACredential_Content>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_TRACredential_Content()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_TRACredential_Content(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            TRACredential_Envelope ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_TRACredential_Envelope(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_TRACredential_Envelope(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_TRACredential_EnvelopeSeal(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_TRACredential_EnvelopeSeal(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TRACredential_Label(TRACredential_Label value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Label' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            TRACredential_Label ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_TRACredential_Label(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<TRACredential_Label>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_TRACredential_Label()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Label> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_TRACredential_Label(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            TRAKeyValuePair ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_TRAKeyValuePair(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_TRAKeyValuePair(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            TRACredentialType ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_TRACredentialType(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_TRACredentialType(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_TRAEncryptionFlag(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_TRAEncryptionFlag(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            TRAServiceType ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_TRAServiceType(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_TRAServiceType(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            TRATrustLevel ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_TRATrustLevel(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_TRATrustLevel(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_List_List_TRAKeyValuePair(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_List_List_TRAKeyValuePair(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_TDWVDAAccountEntryContent_nullable(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_TDWVDAAccountEntryContent_nullable(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TRACredential_Content_nullable(TRACredential_Content? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content?' to 'TDWVDASmartContractEntryClaims'.");
                
            }
            TRACredential_Content? ITypeConverter<TDWVDASmartContractEntryClaims>.ConvertTo_TRACredential_Content_nullable(TDWVDASmartContractEntryClaims value)
            {
                return TypeConverter<TRACredential_Content?>.ConvertFrom_TDWVDASmartContractEntryClaims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryClaims>.GetConversionActionTo_TRACredential_Content_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content?> ITypeConverter<TDWVDASmartContractEntryClaims>.Enumerate_TRACredential_Content_nullable(TDWVDASmartContractEntryClaims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TDWVDASmartContractEntryContent'.");
                
            }
            bool ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_bool(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<bool>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_bool(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TDWVDASmartContractEntryContent'.");
                
            }
            long ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_long(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<long>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_long(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TDWVDASmartContractEntryContent intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TDWVDASmartContractEntryContent.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TDWVDASmartContractEntryContent");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_string(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<string>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_string(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TDWVDASmartContractEntryContent'.");
                
            }
            List<string> ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_List_string(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_List_string(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TDWVDASmartContractEntryContent'.");
                
            }
            List<TRAClaim> ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_List_TRAClaim(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_List_TRAClaim(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TDWVDASmartContractEntryContent'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_List_TRAKeyValuePair(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_List_TRAKeyValuePair(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'TDWVDASmartContractEntryContent'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_TDWVDAAccountEntryClaims(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_TDWVDAAccountEntryClaims(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'TDWVDASmartContractEntryContent'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_TDWVDAAccountEntryContent(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_TDWVDAAccountEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'TDWVDASmartContractEntryContent'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_TDWVDAAccountEntryEnvelope(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_TDWVDAAccountEntryEnvelope(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TDWVDASmartContractEntryContent'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_TDWVDAIdentityRegistryEntryParm(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TDWVDASmartContractEntryContent'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_TDWVDAPostInvocationParameters(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_TDWVDAPostInvocationParameters(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TDWVDASmartContractEntryContent'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_TDWVDARevocationListEntryParm(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_TDWVDARevocationListEntryParm(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TDWVDASmartContractEntryContent'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_TDWVDAServiceEndpointEntryParm(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_TDWVDAServiceEndpointEntryParm(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'TDWVDASmartContractEntryContent'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                return (TDWVDASmartContractEntryContent)value;
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'TDWVDASmartContractEntryContent'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TDWVDASmartContractEntryContent'.");
                
            }
            TRAClaim ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_TRAClaim(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_TRAClaim(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TRACredential_Content(TRACredential_Content value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content' to 'TDWVDASmartContractEntryContent'.");
                
            }
            TRACredential_Content ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_TRACredential_Content(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<TRACredential_Content>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_TRACredential_Content()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_TRACredential_Content(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'TDWVDASmartContractEntryContent'.");
                
            }
            TRACredential_Envelope ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_TRACredential_Envelope(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_TRACredential_Envelope(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'TDWVDASmartContractEntryContent'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_TRACredential_EnvelopeSeal(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_TRACredential_EnvelopeSeal(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TRACredential_Label(TRACredential_Label value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Label' to 'TDWVDASmartContractEntryContent'.");
                
            }
            TRACredential_Label ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_TRACredential_Label(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<TRACredential_Label>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_TRACredential_Label()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Label> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_TRACredential_Label(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TDWVDASmartContractEntryContent'.");
                
            }
            TRAKeyValuePair ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_TRAKeyValuePair(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_TRAKeyValuePair(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TDWVDASmartContractEntryContent'.");
                
            }
            TRACredentialType ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_TRACredentialType(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_TRACredentialType(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TDWVDASmartContractEntryContent'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_TRAEncryptionFlag(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_TRAEncryptionFlag(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TDWVDASmartContractEntryContent'.");
                
            }
            TRAServiceType ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_TRAServiceType(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_TRAServiceType(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TDWVDASmartContractEntryContent'.");
                
            }
            TRATrustLevel ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_TRATrustLevel(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_TRATrustLevel(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TDWVDASmartContractEntryContent'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_List_List_TRAKeyValuePair(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_List_List_TRAKeyValuePair(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'TDWVDASmartContractEntryContent'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_TDWVDAAccountEntryContent_nullable(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_TDWVDAAccountEntryContent_nullable(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TDWVDASmartContractEntryContent(value.Value);
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TRACredential_Content_nullable(TRACredential_Content? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content?' to 'TDWVDASmartContractEntryContent'.");
                
            }
            TRACredential_Content? ITypeConverter<TDWVDASmartContractEntryContent>.ConvertTo_TRACredential_Content_nullable(TDWVDASmartContractEntryContent value)
            {
                return TypeConverter<TRACredential_Content?>.ConvertFrom_TDWVDASmartContractEntryContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent>.GetConversionActionTo_TRACredential_Content_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content?> ITypeConverter<TDWVDASmartContractEntryContent>.Enumerate_TRACredential_Content_nullable(TDWVDASmartContractEntryContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            bool ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_bool(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<bool>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_bool(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            long ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_long(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<long>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_long(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TDWVDASmartContractEntryEnvelope intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TDWVDASmartContractEntryEnvelope.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TDWVDASmartContractEntryEnvelope");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_string(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<string>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_string(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            List<string> ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_List_string(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_List_string(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            List<TRAClaim> ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_List_TRAClaim(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_List_TRAClaim(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_List_TRAKeyValuePair(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_List_TRAKeyValuePair(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_TDWVDAAccountEntryClaims(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_TDWVDAAccountEntryClaims(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_TDWVDAAccountEntryContent(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_TDWVDAAccountEntryContent(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_TDWVDAAccountEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_TDWVDAAccountEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_TDWVDAIdentityRegistryEntryParm(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_TDWVDAPostInvocationParameters(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_TDWVDAPostInvocationParameters(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_TDWVDARevocationListEntryParm(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_TDWVDARevocationListEntryParm(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_TDWVDAServiceEndpointEntryParm(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_TDWVDAServiceEndpointEntryParm(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                return (TDWVDASmartContractEntryEnvelope)value;
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            TRAClaim ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_TRAClaim(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_TRAClaim(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TRACredential_Content(TRACredential_Content value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            TRACredential_Content ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_TRACredential_Content(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<TRACredential_Content>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_TRACredential_Content()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_TRACredential_Content(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            TRACredential_Envelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_TRACredential_Envelope(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_TRACredential_Envelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_TRACredential_EnvelopeSeal(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_TRACredential_EnvelopeSeal(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TRACredential_Label(TRACredential_Label value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Label' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            TRACredential_Label ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_TRACredential_Label(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<TRACredential_Label>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_TRACredential_Label()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Label> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_TRACredential_Label(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            TRAKeyValuePair ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_TRAKeyValuePair(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_TRAKeyValuePair(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            TRACredentialType ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_TRACredentialType(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_TRACredentialType(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_TRAEncryptionFlag(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_TRAEncryptionFlag(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            TRAServiceType ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_TRAServiceType(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_TRAServiceType(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            TRATrustLevel ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_TRATrustLevel(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_TRATrustLevel(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_List_List_TRAKeyValuePair(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_List_List_TRAKeyValuePair(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_TDWVDAAccountEntryContent_nullable(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_TDWVDAAccountEntryContent_nullable(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TRACredential_Content_nullable(TRACredential_Content? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content?' to 'TDWVDASmartContractEntryEnvelope'.");
                
            }
            TRACredential_Content? ITypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertTo_TRACredential_Content_nullable(TDWVDASmartContractEntryEnvelope value)
            {
                return TypeConverter<TRACredential_Content?>.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryEnvelope>.GetConversionActionTo_TRACredential_Content_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content?> ITypeConverter<TDWVDASmartContractEntryEnvelope>.Enumerate_TRACredential_Content_nullable(TDWVDASmartContractEntryEnvelope value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TRAClaim'.");
                
            }
            bool ITypeConverter<TRAClaim>.ConvertTo_bool(TRAClaim value)
            {
                return TypeConverter<bool>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TRAClaim>.Enumerate_bool(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TRAClaim'.");
                
            }
            long ITypeConverter<TRAClaim>.ConvertTo_long(TRAClaim value)
            {
                return TypeConverter<long>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TRAClaim>.Enumerate_long(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TRAClaim intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TRAClaim.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TRAClaim");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TRAClaim>.ConvertTo_string(TRAClaim value)
            {
                return TypeConverter<string>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TRAClaim>.Enumerate_string(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TRAClaim'.");
                
            }
            List<string> ITypeConverter<TRAClaim>.ConvertTo_List_string(TRAClaim value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TRAClaim>.Enumerate_List_string(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TRAClaim'.");
                
            }
            List<TRAClaim> ITypeConverter<TRAClaim>.ConvertTo_List_TRAClaim(TRAClaim value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TRAClaim>.Enumerate_List_TRAClaim(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TRAClaim'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TRAClaim>.ConvertTo_List_TRAKeyValuePair(TRAClaim value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TRAClaim>.Enumerate_List_TRAKeyValuePair(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'TRAClaim'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<TRAClaim>.ConvertTo_TDWVDAAccountEntryClaims(TRAClaim value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<TRAClaim>.Enumerate_TDWVDAAccountEntryClaims(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'TRAClaim'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<TRAClaim>.ConvertTo_TDWVDAAccountEntryContent(TRAClaim value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<TRAClaim>.Enumerate_TDWVDAAccountEntryContent(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'TRAClaim'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TRAClaim>.ConvertTo_TDWVDAAccountEntryEnvelope(TRAClaim value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<TRAClaim>.Enumerate_TDWVDAAccountEntryEnvelope(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TRAClaim'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TRAClaim>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TRAClaim value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TRAClaim>.Enumerate_TDWVDAIdentityRegistryEntryParm(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TRAClaim'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TRAClaim>.ConvertTo_TDWVDAPostInvocationParameters(TRAClaim value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TRAClaim>.Enumerate_TDWVDAPostInvocationParameters(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TRAClaim'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TRAClaim>.ConvertTo_TDWVDARevocationListEntryParm(TRAClaim value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TRAClaim>.Enumerate_TDWVDARevocationListEntryParm(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TRAClaim'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TRAClaim>.ConvertTo_TDWVDAServiceEndpointEntryParm(TRAClaim value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TRAClaim>.Enumerate_TDWVDAServiceEndpointEntryParm(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'TRAClaim'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TRAClaim>.ConvertTo_TDWVDASmartContractEntryClaims(TRAClaim value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<TRAClaim>.Enumerate_TDWVDASmartContractEntryClaims(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'TRAClaim'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<TRAClaim>.ConvertTo_TDWVDASmartContractEntryContent(TRAClaim value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<TRAClaim>.Enumerate_TDWVDASmartContractEntryContent(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'TRAClaim'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TRAClaim>.ConvertTo_TDWVDASmartContractEntryEnvelope(TRAClaim value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<TRAClaim>.Enumerate_TDWVDASmartContractEntryEnvelope(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                return (TRAClaim)value;
                
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertTo_TRAClaim(TRAClaim value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TRAClaim>.Enumerate_TRAClaim(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TRACredential_Content(TRACredential_Content value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content' to 'TRAClaim'.");
                
            }
            TRACredential_Content ITypeConverter<TRAClaim>.ConvertTo_TRACredential_Content(TRAClaim value)
            {
                return TypeConverter<TRACredential_Content>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TRACredential_Content()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content> ITypeConverter<TRAClaim>.Enumerate_TRACredential_Content(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'TRAClaim'.");
                
            }
            TRACredential_Envelope ITypeConverter<TRAClaim>.ConvertTo_TRACredential_Envelope(TRAClaim value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<TRAClaim>.Enumerate_TRACredential_Envelope(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'TRAClaim'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRAClaim>.ConvertTo_TRACredential_EnvelopeSeal(TRAClaim value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<TRAClaim>.Enumerate_TRACredential_EnvelopeSeal(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TRACredential_Label(TRACredential_Label value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Label' to 'TRAClaim'.");
                
            }
            TRACredential_Label ITypeConverter<TRAClaim>.ConvertTo_TRACredential_Label(TRAClaim value)
            {
                return TypeConverter<TRACredential_Label>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TRACredential_Label()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Label> ITypeConverter<TRAClaim>.Enumerate_TRACredential_Label(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TRAClaim'.");
                
            }
            TRAKeyValuePair ITypeConverter<TRAClaim>.ConvertTo_TRAKeyValuePair(TRAClaim value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TRAClaim>.Enumerate_TRAKeyValuePair(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TRAClaim'.");
                
            }
            TRACredentialType ITypeConverter<TRAClaim>.ConvertTo_TRACredentialType(TRAClaim value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TRAClaim>.Enumerate_TRACredentialType(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TRAClaim'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TRAClaim>.ConvertTo_TRAEncryptionFlag(TRAClaim value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TRAClaim>.Enumerate_TRAEncryptionFlag(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TRAClaim'.");
                
            }
            TRAServiceType ITypeConverter<TRAClaim>.ConvertTo_TRAServiceType(TRAClaim value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TRAClaim>.Enumerate_TRAServiceType(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TRAClaim'.");
                
            }
            TRATrustLevel ITypeConverter<TRAClaim>.ConvertTo_TRATrustLevel(TRAClaim value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TRAClaim>.Enumerate_TRATrustLevel(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TRAClaim'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TRAClaim>.ConvertTo_List_List_TRAKeyValuePair(TRAClaim value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TRAClaim>.Enumerate_List_List_TRAKeyValuePair(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'TRAClaim'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<TRAClaim>.ConvertTo_TDWVDAAccountEntryContent_nullable(TRAClaim value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<TRAClaim>.Enumerate_TDWVDAAccountEntryContent_nullable(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'TRAClaim'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TRAClaim>.ConvertTo_TDWVDASmartContractEntryContent_nullable(TRAClaim value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<TRAClaim>.Enumerate_TDWVDASmartContractEntryContent_nullable(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TRACredential_Content_nullable(TRACredential_Content? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content?' to 'TRAClaim'.");
                
            }
            TRACredential_Content? ITypeConverter<TRAClaim>.ConvertTo_TRACredential_Content_nullable(TRAClaim value)
            {
                return TypeConverter<TRACredential_Content?>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TRACredential_Content_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content?> ITypeConverter<TRAClaim>.Enumerate_TRACredential_Content_nullable(TRAClaim value)
            {
                
                yield break;
            }
            TRACredential_Content ITypeConverter<TRACredential_Content>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TRACredential_Content'.");
                
            }
            bool ITypeConverter<TRACredential_Content>.ConvertTo_bool(TRACredential_Content value)
            {
                return TypeConverter<bool>.ConvertFrom_TRACredential_Content(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TRACredential_Content>.Enumerate_bool(TRACredential_Content value)
            {
                
                yield break;
            }
            TRACredential_Content ITypeConverter<TRACredential_Content>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TRACredential_Content'.");
                
            }
            long ITypeConverter<TRACredential_Content>.ConvertTo_long(TRACredential_Content value)
            {
                return TypeConverter<long>.ConvertFrom_TRACredential_Content(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TRACredential_Content>.Enumerate_long(TRACredential_Content value)
            {
                
                yield break;
            }
            TRACredential_Content ITypeConverter<TRACredential_Content>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TRACredential_Content intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TRACredential_Content.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TRACredential_Content");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TRACredential_Content>.ConvertTo_string(TRACredential_Content value)
            {
                return TypeConverter<string>.ConvertFrom_TRACredential_Content(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TRACredential_Content>.Enumerate_string(TRACredential_Content value)
            {
                
                yield break;
            }
            TRACredential_Content ITypeConverter<TRACredential_Content>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TRACredential_Content'.");
                
            }
            List<string> ITypeConverter<TRACredential_Content>.ConvertTo_List_string(TRACredential_Content value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TRACredential_Content(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TRACredential_Content>.Enumerate_List_string(TRACredential_Content value)
            {
                
                yield break;
            }
            TRACredential_Content ITypeConverter<TRACredential_Content>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TRACredential_Content'.");
                
            }
            List<TRAClaim> ITypeConverter<TRACredential_Content>.ConvertTo_List_TRAClaim(TRACredential_Content value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TRACredential_Content(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TRACredential_Content>.Enumerate_List_TRAClaim(TRACredential_Content value)
            {
                
                yield break;
            }
            TRACredential_Content ITypeConverter<TRACredential_Content>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TRACredential_Content'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TRACredential_Content>.ConvertTo_List_TRAKeyValuePair(TRACredential_Content value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRACredential_Content(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TRACredential_Content>.Enumerate_List_TRAKeyValuePair(TRACredential_Content value)
            {
                
                yield break;
            }
            TRACredential_Content ITypeConverter<TRACredential_Content>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'TRACredential_Content'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<TRACredential_Content>.ConvertTo_TDWVDAAccountEntryClaims(TRACredential_Content value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TRACredential_Content(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<TRACredential_Content>.Enumerate_TDWVDAAccountEntryClaims(TRACredential_Content value)
            {
                
                yield break;
            }
            TRACredential_Content ITypeConverter<TRACredential_Content>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'TRACredential_Content'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<TRACredential_Content>.ConvertTo_TDWVDAAccountEntryContent(TRACredential_Content value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TRACredential_Content(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<TRACredential_Content>.Enumerate_TDWVDAAccountEntryContent(TRACredential_Content value)
            {
                
                yield break;
            }
            TRACredential_Content ITypeConverter<TRACredential_Content>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'TRACredential_Content'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TRACredential_Content>.ConvertTo_TDWVDAAccountEntryEnvelope(TRACredential_Content value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TRACredential_Content(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<TRACredential_Content>.Enumerate_TDWVDAAccountEntryEnvelope(TRACredential_Content value)
            {
                
                yield break;
            }
            TRACredential_Content ITypeConverter<TRACredential_Content>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TRACredential_Content'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TRACredential_Content>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TRACredential_Content value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRACredential_Content(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TRACredential_Content>.Enumerate_TDWVDAIdentityRegistryEntryParm(TRACredential_Content value)
            {
                
                yield break;
            }
            TRACredential_Content ITypeConverter<TRACredential_Content>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TRACredential_Content'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TRACredential_Content>.ConvertTo_TDWVDAPostInvocationParameters(TRACredential_Content value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRACredential_Content(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TRACredential_Content>.Enumerate_TDWVDAPostInvocationParameters(TRACredential_Content value)
            {
                
                yield break;
            }
            TRACredential_Content ITypeConverter<TRACredential_Content>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TRACredential_Content'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TRACredential_Content>.ConvertTo_TDWVDARevocationListEntryParm(TRACredential_Content value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRACredential_Content(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TRACredential_Content>.Enumerate_TDWVDARevocationListEntryParm(TRACredential_Content value)
            {
                
                yield break;
            }
            TRACredential_Content ITypeConverter<TRACredential_Content>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TRACredential_Content'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TRACredential_Content>.ConvertTo_TDWVDAServiceEndpointEntryParm(TRACredential_Content value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRACredential_Content(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TRACredential_Content>.Enumerate_TDWVDAServiceEndpointEntryParm(TRACredential_Content value)
            {
                
                yield break;
            }
            TRACredential_Content ITypeConverter<TRACredential_Content>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'TRACredential_Content'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TRACredential_Content>.ConvertTo_TDWVDASmartContractEntryClaims(TRACredential_Content value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TRACredential_Content(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<TRACredential_Content>.Enumerate_TDWVDASmartContractEntryClaims(TRACredential_Content value)
            {
                
                yield break;
            }
            TRACredential_Content ITypeConverter<TRACredential_Content>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'TRACredential_Content'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<TRACredential_Content>.ConvertTo_TDWVDASmartContractEntryContent(TRACredential_Content value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TRACredential_Content(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<TRACredential_Content>.Enumerate_TDWVDASmartContractEntryContent(TRACredential_Content value)
            {
                
                yield break;
            }
            TRACredential_Content ITypeConverter<TRACredential_Content>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'TRACredential_Content'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TRACredential_Content>.ConvertTo_TDWVDASmartContractEntryEnvelope(TRACredential_Content value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TRACredential_Content(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<TRACredential_Content>.Enumerate_TDWVDASmartContractEntryEnvelope(TRACredential_Content value)
            {
                
                yield break;
            }
            TRACredential_Content ITypeConverter<TRACredential_Content>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TRACredential_Content'.");
                
            }
            TRAClaim ITypeConverter<TRACredential_Content>.ConvertTo_TRAClaim(TRACredential_Content value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TRACredential_Content(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TRACredential_Content>.Enumerate_TRAClaim(TRACredential_Content value)
            {
                
                yield break;
            }
            TRACredential_Content ITypeConverter<TRACredential_Content>.ConvertFrom_TRACredential_Content(TRACredential_Content value)
            {
                
                return (TRACredential_Content)value;
                
            }
            TRACredential_Content ITypeConverter<TRACredential_Content>.ConvertTo_TRACredential_Content(TRACredential_Content value)
            {
                return TypeConverter<TRACredential_Content>.ConvertFrom_TRACredential_Content(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content>.GetConversionActionTo_TRACredential_Content()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content> ITypeConverter<TRACredential_Content>.Enumerate_TRACredential_Content(TRACredential_Content value)
            {
                
                yield break;
            }
            TRACredential_Content ITypeConverter<TRACredential_Content>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'TRACredential_Content'.");
                
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Content>.ConvertTo_TRACredential_Envelope(TRACredential_Content value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_TRACredential_Content(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<TRACredential_Content>.Enumerate_TRACredential_Envelope(TRACredential_Content value)
            {
                
                yield break;
            }
            TRACredential_Content ITypeConverter<TRACredential_Content>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'TRACredential_Content'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_Content>.ConvertTo_TRACredential_EnvelopeSeal(TRACredential_Content value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TRACredential_Content(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<TRACredential_Content>.Enumerate_TRACredential_EnvelopeSeal(TRACredential_Content value)
            {
                
                yield break;
            }
            TRACredential_Content ITypeConverter<TRACredential_Content>.ConvertFrom_TRACredential_Label(TRACredential_Label value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Label' to 'TRACredential_Content'.");
                
            }
            TRACredential_Label ITypeConverter<TRACredential_Content>.ConvertTo_TRACredential_Label(TRACredential_Content value)
            {
                return TypeConverter<TRACredential_Label>.ConvertFrom_TRACredential_Content(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content>.GetConversionActionTo_TRACredential_Label()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Label> ITypeConverter<TRACredential_Content>.Enumerate_TRACredential_Label(TRACredential_Content value)
            {
                
                yield break;
            }
            TRACredential_Content ITypeConverter<TRACredential_Content>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TRACredential_Content'.");
                
            }
            TRAKeyValuePair ITypeConverter<TRACredential_Content>.ConvertTo_TRAKeyValuePair(TRACredential_Content value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TRACredential_Content(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TRACredential_Content>.Enumerate_TRAKeyValuePair(TRACredential_Content value)
            {
                
                yield break;
            }
            TRACredential_Content ITypeConverter<TRACredential_Content>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TRACredential_Content'.");
                
            }
            TRACredentialType ITypeConverter<TRACredential_Content>.ConvertTo_TRACredentialType(TRACredential_Content value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TRACredential_Content(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TRACredential_Content>.Enumerate_TRACredentialType(TRACredential_Content value)
            {
                
                yield break;
            }
            TRACredential_Content ITypeConverter<TRACredential_Content>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TRACredential_Content'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TRACredential_Content>.ConvertTo_TRAEncryptionFlag(TRACredential_Content value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TRACredential_Content(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TRACredential_Content>.Enumerate_TRAEncryptionFlag(TRACredential_Content value)
            {
                
                yield break;
            }
            TRACredential_Content ITypeConverter<TRACredential_Content>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TRACredential_Content'.");
                
            }
            TRAServiceType ITypeConverter<TRACredential_Content>.ConvertTo_TRAServiceType(TRACredential_Content value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TRACredential_Content(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TRACredential_Content>.Enumerate_TRAServiceType(TRACredential_Content value)
            {
                
                yield break;
            }
            TRACredential_Content ITypeConverter<TRACredential_Content>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TRACredential_Content'.");
                
            }
            TRATrustLevel ITypeConverter<TRACredential_Content>.ConvertTo_TRATrustLevel(TRACredential_Content value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TRACredential_Content(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TRACredential_Content>.Enumerate_TRATrustLevel(TRACredential_Content value)
            {
                
                yield break;
            }
            TRACredential_Content ITypeConverter<TRACredential_Content>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TRACredential_Content'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TRACredential_Content>.ConvertTo_List_List_TRAKeyValuePair(TRACredential_Content value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRACredential_Content(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TRACredential_Content>.Enumerate_List_List_TRAKeyValuePair(TRACredential_Content value)
            {
                
                yield break;
            }
            TRACredential_Content ITypeConverter<TRACredential_Content>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'TRACredential_Content'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<TRACredential_Content>.ConvertTo_TDWVDAAccountEntryContent_nullable(TRACredential_Content value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TRACredential_Content(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<TRACredential_Content>.Enumerate_TDWVDAAccountEntryContent_nullable(TRACredential_Content value)
            {
                
                yield break;
            }
            TRACredential_Content ITypeConverter<TRACredential_Content>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'TRACredential_Content'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TRACredential_Content>.ConvertTo_TDWVDASmartContractEntryContent_nullable(TRACredential_Content value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TRACredential_Content(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<TRACredential_Content>.Enumerate_TDWVDASmartContractEntryContent_nullable(TRACredential_Content value)
            {
                
                yield break;
            }
            TRACredential_Content ITypeConverter<TRACredential_Content>.ConvertFrom_TRACredential_Content_nullable(TRACredential_Content? value)
            {
                
                return TypeConverter<TRACredential_Content>.ConvertFrom_TRACredential_Content(value.Value);
                
            }
            TRACredential_Content? ITypeConverter<TRACredential_Content>.ConvertTo_TRACredential_Content_nullable(TRACredential_Content value)
            {
                return TypeConverter<TRACredential_Content?>.ConvertFrom_TRACredential_Content(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content>.GetConversionActionTo_TRACredential_Content_nullable()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content?> ITypeConverter<TRACredential_Content>.Enumerate_TRACredential_Content_nullable(TRACredential_Content value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TRACredential_Envelope'.");
                
            }
            bool ITypeConverter<TRACredential_Envelope>.ConvertTo_bool(TRACredential_Envelope value)
            {
                return TypeConverter<bool>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TRACredential_Envelope>.Enumerate_bool(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TRACredential_Envelope'.");
                
            }
            long ITypeConverter<TRACredential_Envelope>.ConvertTo_long(TRACredential_Envelope value)
            {
                return TypeConverter<long>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TRACredential_Envelope>.Enumerate_long(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TRACredential_Envelope intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TRACredential_Envelope.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TRACredential_Envelope");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TRACredential_Envelope>.ConvertTo_string(TRACredential_Envelope value)
            {
                return TypeConverter<string>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TRACredential_Envelope>.Enumerate_string(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TRACredential_Envelope'.");
                
            }
            List<string> ITypeConverter<TRACredential_Envelope>.ConvertTo_List_string(TRACredential_Envelope value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TRACredential_Envelope>.Enumerate_List_string(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TRACredential_Envelope'.");
                
            }
            List<TRAClaim> ITypeConverter<TRACredential_Envelope>.ConvertTo_List_TRAClaim(TRACredential_Envelope value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TRACredential_Envelope>.Enumerate_List_TRAClaim(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TRACredential_Envelope'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TRACredential_Envelope>.ConvertTo_List_TRAKeyValuePair(TRACredential_Envelope value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TRACredential_Envelope>.Enumerate_List_TRAKeyValuePair(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'TRACredential_Envelope'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<TRACredential_Envelope>.ConvertTo_TDWVDAAccountEntryClaims(TRACredential_Envelope value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<TRACredential_Envelope>.Enumerate_TDWVDAAccountEntryClaims(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'TRACredential_Envelope'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<TRACredential_Envelope>.ConvertTo_TDWVDAAccountEntryContent(TRACredential_Envelope value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<TRACredential_Envelope>.Enumerate_TDWVDAAccountEntryContent(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'TRACredential_Envelope'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TRACredential_Envelope>.ConvertTo_TDWVDAAccountEntryEnvelope(TRACredential_Envelope value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<TRACredential_Envelope>.Enumerate_TDWVDAAccountEntryEnvelope(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TRACredential_Envelope'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TRACredential_Envelope>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TRACredential_Envelope value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TRACredential_Envelope>.Enumerate_TDWVDAIdentityRegistryEntryParm(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TRACredential_Envelope'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TRACredential_Envelope>.ConvertTo_TDWVDAPostInvocationParameters(TRACredential_Envelope value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TRACredential_Envelope>.Enumerate_TDWVDAPostInvocationParameters(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TRACredential_Envelope'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TRACredential_Envelope>.ConvertTo_TDWVDARevocationListEntryParm(TRACredential_Envelope value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TRACredential_Envelope>.Enumerate_TDWVDARevocationListEntryParm(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TRACredential_Envelope'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TRACredential_Envelope>.ConvertTo_TDWVDAServiceEndpointEntryParm(TRACredential_Envelope value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TRACredential_Envelope>.Enumerate_TDWVDAServiceEndpointEntryParm(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'TRACredential_Envelope'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TRACredential_Envelope>.ConvertTo_TDWVDASmartContractEntryClaims(TRACredential_Envelope value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<TRACredential_Envelope>.Enumerate_TDWVDASmartContractEntryClaims(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'TRACredential_Envelope'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<TRACredential_Envelope>.ConvertTo_TDWVDASmartContractEntryContent(TRACredential_Envelope value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<TRACredential_Envelope>.Enumerate_TDWVDASmartContractEntryContent(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'TRACredential_Envelope'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TRACredential_Envelope>.ConvertTo_TDWVDASmartContractEntryEnvelope(TRACredential_Envelope value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<TRACredential_Envelope>.Enumerate_TDWVDASmartContractEntryEnvelope(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TRACredential_Envelope'.");
                
            }
            TRAClaim ITypeConverter<TRACredential_Envelope>.ConvertTo_TRAClaim(TRACredential_Envelope value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TRACredential_Envelope>.Enumerate_TRAClaim(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_TRACredential_Content(TRACredential_Content value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content' to 'TRACredential_Envelope'.");
                
            }
            TRACredential_Content ITypeConverter<TRACredential_Envelope>.ConvertTo_TRACredential_Content(TRACredential_Envelope value)
            {
                return TypeConverter<TRACredential_Content>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_TRACredential_Content()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content> ITypeConverter<TRACredential_Envelope>.Enumerate_TRACredential_Content(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                return (TRACredential_Envelope)value;
                
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertTo_TRACredential_Envelope(TRACredential_Envelope value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<TRACredential_Envelope>.Enumerate_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'TRACredential_Envelope'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_Envelope>.ConvertTo_TRACredential_EnvelopeSeal(TRACredential_Envelope value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<TRACredential_Envelope>.Enumerate_TRACredential_EnvelopeSeal(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_TRACredential_Label(TRACredential_Label value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Label' to 'TRACredential_Envelope'.");
                
            }
            TRACredential_Label ITypeConverter<TRACredential_Envelope>.ConvertTo_TRACredential_Label(TRACredential_Envelope value)
            {
                return TypeConverter<TRACredential_Label>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_TRACredential_Label()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Label> ITypeConverter<TRACredential_Envelope>.Enumerate_TRACredential_Label(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TRACredential_Envelope'.");
                
            }
            TRAKeyValuePair ITypeConverter<TRACredential_Envelope>.ConvertTo_TRAKeyValuePair(TRACredential_Envelope value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TRACredential_Envelope>.Enumerate_TRAKeyValuePair(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TRACredential_Envelope'.");
                
            }
            TRACredentialType ITypeConverter<TRACredential_Envelope>.ConvertTo_TRACredentialType(TRACredential_Envelope value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TRACredential_Envelope>.Enumerate_TRACredentialType(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TRACredential_Envelope'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TRACredential_Envelope>.ConvertTo_TRAEncryptionFlag(TRACredential_Envelope value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TRACredential_Envelope>.Enumerate_TRAEncryptionFlag(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TRACredential_Envelope'.");
                
            }
            TRAServiceType ITypeConverter<TRACredential_Envelope>.ConvertTo_TRAServiceType(TRACredential_Envelope value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TRACredential_Envelope>.Enumerate_TRAServiceType(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TRACredential_Envelope'.");
                
            }
            TRATrustLevel ITypeConverter<TRACredential_Envelope>.ConvertTo_TRATrustLevel(TRACredential_Envelope value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TRACredential_Envelope>.Enumerate_TRATrustLevel(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TRACredential_Envelope'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TRACredential_Envelope>.ConvertTo_List_List_TRAKeyValuePair(TRACredential_Envelope value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TRACredential_Envelope>.Enumerate_List_List_TRAKeyValuePair(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'TRACredential_Envelope'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<TRACredential_Envelope>.ConvertTo_TDWVDAAccountEntryContent_nullable(TRACredential_Envelope value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<TRACredential_Envelope>.Enumerate_TDWVDAAccountEntryContent_nullable(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'TRACredential_Envelope'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TRACredential_Envelope>.ConvertTo_TDWVDASmartContractEntryContent_nullable(TRACredential_Envelope value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<TRACredential_Envelope>.Enumerate_TDWVDASmartContractEntryContent_nullable(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_TRACredential_Content_nullable(TRACredential_Content? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content?' to 'TRACredential_Envelope'.");
                
            }
            TRACredential_Content? ITypeConverter<TRACredential_Envelope>.ConvertTo_TRACredential_Content_nullable(TRACredential_Envelope value)
            {
                return TypeConverter<TRACredential_Content?>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_TRACredential_Content_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content?> ITypeConverter<TRACredential_Envelope>.Enumerate_TRACredential_Content_nullable(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TRACredential_EnvelopeSeal'.");
                
            }
            bool ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_bool(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<bool>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_bool(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TRACredential_EnvelopeSeal'.");
                
            }
            long ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_long(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<long>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_long(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TRACredential_EnvelopeSeal intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TRACredential_EnvelopeSeal.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TRACredential_EnvelopeSeal");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_string(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<string>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_string(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TRACredential_EnvelopeSeal'.");
                
            }
            List<string> ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_List_string(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_List_string(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TRACredential_EnvelopeSeal'.");
                
            }
            List<TRAClaim> ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_List_TRAClaim(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_List_TRAClaim(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TRACredential_EnvelopeSeal'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_List_TRAKeyValuePair(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_List_TRAKeyValuePair(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'TRACredential_EnvelopeSeal'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_TDWVDAAccountEntryClaims(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_TDWVDAAccountEntryClaims(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'TRACredential_EnvelopeSeal'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_TDWVDAAccountEntryContent(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_TDWVDAAccountEntryContent(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'TRACredential_EnvelopeSeal'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_TDWVDAAccountEntryEnvelope(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_TDWVDAAccountEntryEnvelope(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TRACredential_EnvelopeSeal'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_TDWVDAIdentityRegistryEntryParm(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TRACredential_EnvelopeSeal'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_TDWVDAPostInvocationParameters(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_TDWVDAPostInvocationParameters(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TRACredential_EnvelopeSeal'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_TDWVDARevocationListEntryParm(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_TDWVDARevocationListEntryParm(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TRACredential_EnvelopeSeal'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_TDWVDAServiceEndpointEntryParm(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_TDWVDAServiceEndpointEntryParm(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'TRACredential_EnvelopeSeal'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_TDWVDASmartContractEntryClaims(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_TDWVDASmartContractEntryClaims(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'TRACredential_EnvelopeSeal'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_TDWVDASmartContractEntryContent(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_TDWVDASmartContractEntryContent(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'TRACredential_EnvelopeSeal'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_TDWVDASmartContractEntryEnvelope(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_TDWVDASmartContractEntryEnvelope(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TRACredential_EnvelopeSeal'.");
                
            }
            TRAClaim ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_TRAClaim(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_TRAClaim(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TRACredential_Content(TRACredential_Content value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content' to 'TRACredential_EnvelopeSeal'.");
                
            }
            TRACredential_Content ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_TRACredential_Content(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<TRACredential_Content>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_TRACredential_Content()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_TRACredential_Content(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'TRACredential_EnvelopeSeal'.");
                
            }
            TRACredential_Envelope ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_TRACredential_Envelope(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_TRACredential_Envelope(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                return (TRACredential_EnvelopeSeal)value;
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TRACredential_Label(TRACredential_Label value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Label' to 'TRACredential_EnvelopeSeal'.");
                
            }
            TRACredential_Label ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_TRACredential_Label(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<TRACredential_Label>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_TRACredential_Label()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Label> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_TRACredential_Label(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TRACredential_EnvelopeSeal'.");
                
            }
            TRAKeyValuePair ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_TRAKeyValuePair(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_TRAKeyValuePair(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TRACredential_EnvelopeSeal'.");
                
            }
            TRACredentialType ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_TRACredentialType(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_TRACredentialType(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TRACredential_EnvelopeSeal'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_TRAEncryptionFlag(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_TRAEncryptionFlag(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TRACredential_EnvelopeSeal'.");
                
            }
            TRAServiceType ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_TRAServiceType(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_TRAServiceType(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TRACredential_EnvelopeSeal'.");
                
            }
            TRATrustLevel ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_TRATrustLevel(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_TRATrustLevel(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TRACredential_EnvelopeSeal'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_List_List_TRAKeyValuePair(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_List_List_TRAKeyValuePair(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'TRACredential_EnvelopeSeal'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_TDWVDAAccountEntryContent_nullable(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_TDWVDAAccountEntryContent_nullable(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'TRACredential_EnvelopeSeal'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_TDWVDASmartContractEntryContent_nullable(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_TDWVDASmartContractEntryContent_nullable(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TRACredential_Content_nullable(TRACredential_Content? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content?' to 'TRACredential_EnvelopeSeal'.");
                
            }
            TRACredential_Content? ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_TRACredential_Content_nullable(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<TRACredential_Content?>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_TRACredential_Content_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content?> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_TRACredential_Content_nullable(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_Label ITypeConverter<TRACredential_Label>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TRACredential_Label'.");
                
            }
            bool ITypeConverter<TRACredential_Label>.ConvertTo_bool(TRACredential_Label value)
            {
                return TypeConverter<bool>.ConvertFrom_TRACredential_Label(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Label>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TRACredential_Label>.Enumerate_bool(TRACredential_Label value)
            {
                
                yield break;
            }
            TRACredential_Label ITypeConverter<TRACredential_Label>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TRACredential_Label'.");
                
            }
            long ITypeConverter<TRACredential_Label>.ConvertTo_long(TRACredential_Label value)
            {
                return TypeConverter<long>.ConvertFrom_TRACredential_Label(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Label>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TRACredential_Label>.Enumerate_long(TRACredential_Label value)
            {
                
                yield break;
            }
            TRACredential_Label ITypeConverter<TRACredential_Label>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TRACredential_Label intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TRACredential_Label.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TRACredential_Label");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TRACredential_Label>.ConvertTo_string(TRACredential_Label value)
            {
                return TypeConverter<string>.ConvertFrom_TRACredential_Label(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Label>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TRACredential_Label>.Enumerate_string(TRACredential_Label value)
            {
                
                yield break;
            }
            TRACredential_Label ITypeConverter<TRACredential_Label>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TRACredential_Label'.");
                
            }
            List<string> ITypeConverter<TRACredential_Label>.ConvertTo_List_string(TRACredential_Label value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TRACredential_Label(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Label>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TRACredential_Label>.Enumerate_List_string(TRACredential_Label value)
            {
                
                yield break;
            }
            TRACredential_Label ITypeConverter<TRACredential_Label>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TRACredential_Label'.");
                
            }
            List<TRAClaim> ITypeConverter<TRACredential_Label>.ConvertTo_List_TRAClaim(TRACredential_Label value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TRACredential_Label(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Label>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TRACredential_Label>.Enumerate_List_TRAClaim(TRACredential_Label value)
            {
                
                yield break;
            }
            TRACredential_Label ITypeConverter<TRACredential_Label>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TRACredential_Label'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TRACredential_Label>.ConvertTo_List_TRAKeyValuePair(TRACredential_Label value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRACredential_Label(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Label>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TRACredential_Label>.Enumerate_List_TRAKeyValuePair(TRACredential_Label value)
            {
                
                yield break;
            }
            TRACredential_Label ITypeConverter<TRACredential_Label>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'TRACredential_Label'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<TRACredential_Label>.ConvertTo_TDWVDAAccountEntryClaims(TRACredential_Label value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TRACredential_Label(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Label>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<TRACredential_Label>.Enumerate_TDWVDAAccountEntryClaims(TRACredential_Label value)
            {
                
                yield break;
            }
            TRACredential_Label ITypeConverter<TRACredential_Label>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'TRACredential_Label'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<TRACredential_Label>.ConvertTo_TDWVDAAccountEntryContent(TRACredential_Label value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TRACredential_Label(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Label>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<TRACredential_Label>.Enumerate_TDWVDAAccountEntryContent(TRACredential_Label value)
            {
                
                yield break;
            }
            TRACredential_Label ITypeConverter<TRACredential_Label>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'TRACredential_Label'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TRACredential_Label>.ConvertTo_TDWVDAAccountEntryEnvelope(TRACredential_Label value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TRACredential_Label(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Label>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<TRACredential_Label>.Enumerate_TDWVDAAccountEntryEnvelope(TRACredential_Label value)
            {
                
                yield break;
            }
            TRACredential_Label ITypeConverter<TRACredential_Label>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TRACredential_Label'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TRACredential_Label>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TRACredential_Label value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRACredential_Label(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Label>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TRACredential_Label>.Enumerate_TDWVDAIdentityRegistryEntryParm(TRACredential_Label value)
            {
                
                yield break;
            }
            TRACredential_Label ITypeConverter<TRACredential_Label>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TRACredential_Label'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TRACredential_Label>.ConvertTo_TDWVDAPostInvocationParameters(TRACredential_Label value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRACredential_Label(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Label>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TRACredential_Label>.Enumerate_TDWVDAPostInvocationParameters(TRACredential_Label value)
            {
                
                yield break;
            }
            TRACredential_Label ITypeConverter<TRACredential_Label>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TRACredential_Label'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TRACredential_Label>.ConvertTo_TDWVDARevocationListEntryParm(TRACredential_Label value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRACredential_Label(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Label>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TRACredential_Label>.Enumerate_TDWVDARevocationListEntryParm(TRACredential_Label value)
            {
                
                yield break;
            }
            TRACredential_Label ITypeConverter<TRACredential_Label>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TRACredential_Label'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TRACredential_Label>.ConvertTo_TDWVDAServiceEndpointEntryParm(TRACredential_Label value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRACredential_Label(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Label>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TRACredential_Label>.Enumerate_TDWVDAServiceEndpointEntryParm(TRACredential_Label value)
            {
                
                yield break;
            }
            TRACredential_Label ITypeConverter<TRACredential_Label>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'TRACredential_Label'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TRACredential_Label>.ConvertTo_TDWVDASmartContractEntryClaims(TRACredential_Label value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TRACredential_Label(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Label>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<TRACredential_Label>.Enumerate_TDWVDASmartContractEntryClaims(TRACredential_Label value)
            {
                
                yield break;
            }
            TRACredential_Label ITypeConverter<TRACredential_Label>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'TRACredential_Label'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<TRACredential_Label>.ConvertTo_TDWVDASmartContractEntryContent(TRACredential_Label value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TRACredential_Label(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Label>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<TRACredential_Label>.Enumerate_TDWVDASmartContractEntryContent(TRACredential_Label value)
            {
                
                yield break;
            }
            TRACredential_Label ITypeConverter<TRACredential_Label>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'TRACredential_Label'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TRACredential_Label>.ConvertTo_TDWVDASmartContractEntryEnvelope(TRACredential_Label value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TRACredential_Label(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Label>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<TRACredential_Label>.Enumerate_TDWVDASmartContractEntryEnvelope(TRACredential_Label value)
            {
                
                yield break;
            }
            TRACredential_Label ITypeConverter<TRACredential_Label>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TRACredential_Label'.");
                
            }
            TRAClaim ITypeConverter<TRACredential_Label>.ConvertTo_TRAClaim(TRACredential_Label value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TRACredential_Label(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Label>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TRACredential_Label>.Enumerate_TRAClaim(TRACredential_Label value)
            {
                
                yield break;
            }
            TRACredential_Label ITypeConverter<TRACredential_Label>.ConvertFrom_TRACredential_Content(TRACredential_Content value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content' to 'TRACredential_Label'.");
                
            }
            TRACredential_Content ITypeConverter<TRACredential_Label>.ConvertTo_TRACredential_Content(TRACredential_Label value)
            {
                return TypeConverter<TRACredential_Content>.ConvertFrom_TRACredential_Label(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Label>.GetConversionActionTo_TRACredential_Content()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content> ITypeConverter<TRACredential_Label>.Enumerate_TRACredential_Content(TRACredential_Label value)
            {
                
                yield break;
            }
            TRACredential_Label ITypeConverter<TRACredential_Label>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'TRACredential_Label'.");
                
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Label>.ConvertTo_TRACredential_Envelope(TRACredential_Label value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_TRACredential_Label(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Label>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<TRACredential_Label>.Enumerate_TRACredential_Envelope(TRACredential_Label value)
            {
                
                yield break;
            }
            TRACredential_Label ITypeConverter<TRACredential_Label>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'TRACredential_Label'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_Label>.ConvertTo_TRACredential_EnvelopeSeal(TRACredential_Label value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TRACredential_Label(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Label>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<TRACredential_Label>.Enumerate_TRACredential_EnvelopeSeal(TRACredential_Label value)
            {
                
                yield break;
            }
            TRACredential_Label ITypeConverter<TRACredential_Label>.ConvertFrom_TRACredential_Label(TRACredential_Label value)
            {
                
                return (TRACredential_Label)value;
                
            }
            TRACredential_Label ITypeConverter<TRACredential_Label>.ConvertTo_TRACredential_Label(TRACredential_Label value)
            {
                return TypeConverter<TRACredential_Label>.ConvertFrom_TRACredential_Label(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Label>.GetConversionActionTo_TRACredential_Label()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Label> ITypeConverter<TRACredential_Label>.Enumerate_TRACredential_Label(TRACredential_Label value)
            {
                
                yield break;
            }
            TRACredential_Label ITypeConverter<TRACredential_Label>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TRACredential_Label'.");
                
            }
            TRAKeyValuePair ITypeConverter<TRACredential_Label>.ConvertTo_TRAKeyValuePair(TRACredential_Label value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TRACredential_Label(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Label>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TRACredential_Label>.Enumerate_TRAKeyValuePair(TRACredential_Label value)
            {
                
                yield break;
            }
            TRACredential_Label ITypeConverter<TRACredential_Label>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TRACredential_Label'.");
                
            }
            TRACredentialType ITypeConverter<TRACredential_Label>.ConvertTo_TRACredentialType(TRACredential_Label value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TRACredential_Label(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Label>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TRACredential_Label>.Enumerate_TRACredentialType(TRACredential_Label value)
            {
                
                yield break;
            }
            TRACredential_Label ITypeConverter<TRACredential_Label>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TRACredential_Label'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TRACredential_Label>.ConvertTo_TRAEncryptionFlag(TRACredential_Label value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TRACredential_Label(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Label>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TRACredential_Label>.Enumerate_TRAEncryptionFlag(TRACredential_Label value)
            {
                
                yield break;
            }
            TRACredential_Label ITypeConverter<TRACredential_Label>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TRACredential_Label'.");
                
            }
            TRAServiceType ITypeConverter<TRACredential_Label>.ConvertTo_TRAServiceType(TRACredential_Label value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TRACredential_Label(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Label>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TRACredential_Label>.Enumerate_TRAServiceType(TRACredential_Label value)
            {
                
                yield break;
            }
            TRACredential_Label ITypeConverter<TRACredential_Label>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TRACredential_Label'.");
                
            }
            TRATrustLevel ITypeConverter<TRACredential_Label>.ConvertTo_TRATrustLevel(TRACredential_Label value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TRACredential_Label(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Label>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TRACredential_Label>.Enumerate_TRATrustLevel(TRACredential_Label value)
            {
                
                yield break;
            }
            TRACredential_Label ITypeConverter<TRACredential_Label>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TRACredential_Label'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TRACredential_Label>.ConvertTo_List_List_TRAKeyValuePair(TRACredential_Label value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRACredential_Label(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Label>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TRACredential_Label>.Enumerate_List_List_TRAKeyValuePair(TRACredential_Label value)
            {
                
                yield break;
            }
            TRACredential_Label ITypeConverter<TRACredential_Label>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'TRACredential_Label'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<TRACredential_Label>.ConvertTo_TDWVDAAccountEntryContent_nullable(TRACredential_Label value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TRACredential_Label(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Label>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<TRACredential_Label>.Enumerate_TDWVDAAccountEntryContent_nullable(TRACredential_Label value)
            {
                
                yield break;
            }
            TRACredential_Label ITypeConverter<TRACredential_Label>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'TRACredential_Label'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TRACredential_Label>.ConvertTo_TDWVDASmartContractEntryContent_nullable(TRACredential_Label value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TRACredential_Label(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Label>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<TRACredential_Label>.Enumerate_TDWVDASmartContractEntryContent_nullable(TRACredential_Label value)
            {
                
                yield break;
            }
            TRACredential_Label ITypeConverter<TRACredential_Label>.ConvertFrom_TRACredential_Content_nullable(TRACredential_Content? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content?' to 'TRACredential_Label'.");
                
            }
            TRACredential_Content? ITypeConverter<TRACredential_Label>.ConvertTo_TRACredential_Content_nullable(TRACredential_Label value)
            {
                return TypeConverter<TRACredential_Content?>.ConvertFrom_TRACredential_Label(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Label>.GetConversionActionTo_TRACredential_Content_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content?> ITypeConverter<TRACredential_Label>.Enumerate_TRACredential_Content_nullable(TRACredential_Label value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TRAKeyValuePair'.");
                
            }
            bool ITypeConverter<TRAKeyValuePair>.ConvertTo_bool(TRAKeyValuePair value)
            {
                return TypeConverter<bool>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TRAKeyValuePair>.Enumerate_bool(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TRAKeyValuePair'.");
                
            }
            long ITypeConverter<TRAKeyValuePair>.ConvertTo_long(TRAKeyValuePair value)
            {
                return TypeConverter<long>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TRAKeyValuePair>.Enumerate_long(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TRAKeyValuePair intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TRAKeyValuePair.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TRAKeyValuePair");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TRAKeyValuePair>.ConvertTo_string(TRAKeyValuePair value)
            {
                return TypeConverter<string>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TRAKeyValuePair>.Enumerate_string(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TRAKeyValuePair'.");
                
            }
            List<string> ITypeConverter<TRAKeyValuePair>.ConvertTo_List_string(TRAKeyValuePair value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TRAKeyValuePair>.Enumerate_List_string(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TRAKeyValuePair'.");
                
            }
            List<TRAClaim> ITypeConverter<TRAKeyValuePair>.ConvertTo_List_TRAClaim(TRAKeyValuePair value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TRAKeyValuePair>.Enumerate_List_TRAClaim(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TRAKeyValuePair'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TRAKeyValuePair>.ConvertTo_List_TRAKeyValuePair(TRAKeyValuePair value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TRAKeyValuePair>.Enumerate_List_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'TRAKeyValuePair'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<TRAKeyValuePair>.ConvertTo_TDWVDAAccountEntryClaims(TRAKeyValuePair value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<TRAKeyValuePair>.Enumerate_TDWVDAAccountEntryClaims(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'TRAKeyValuePair'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<TRAKeyValuePair>.ConvertTo_TDWVDAAccountEntryContent(TRAKeyValuePair value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<TRAKeyValuePair>.Enumerate_TDWVDAAccountEntryContent(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'TRAKeyValuePair'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TRAKeyValuePair>.ConvertTo_TDWVDAAccountEntryEnvelope(TRAKeyValuePair value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<TRAKeyValuePair>.Enumerate_TDWVDAAccountEntryEnvelope(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TRAKeyValuePair'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TRAKeyValuePair>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TRAKeyValuePair value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TRAKeyValuePair>.Enumerate_TDWVDAIdentityRegistryEntryParm(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TRAKeyValuePair'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TRAKeyValuePair>.ConvertTo_TDWVDAPostInvocationParameters(TRAKeyValuePair value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TRAKeyValuePair>.Enumerate_TDWVDAPostInvocationParameters(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TRAKeyValuePair'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TRAKeyValuePair>.ConvertTo_TDWVDARevocationListEntryParm(TRAKeyValuePair value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TRAKeyValuePair>.Enumerate_TDWVDARevocationListEntryParm(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TRAKeyValuePair'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TRAKeyValuePair>.ConvertTo_TDWVDAServiceEndpointEntryParm(TRAKeyValuePair value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TRAKeyValuePair>.Enumerate_TDWVDAServiceEndpointEntryParm(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'TRAKeyValuePair'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TRAKeyValuePair>.ConvertTo_TDWVDASmartContractEntryClaims(TRAKeyValuePair value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<TRAKeyValuePair>.Enumerate_TDWVDASmartContractEntryClaims(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'TRAKeyValuePair'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<TRAKeyValuePair>.ConvertTo_TDWVDASmartContractEntryContent(TRAKeyValuePair value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<TRAKeyValuePair>.Enumerate_TDWVDASmartContractEntryContent(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'TRAKeyValuePair'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TRAKeyValuePair>.ConvertTo_TDWVDASmartContractEntryEnvelope(TRAKeyValuePair value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<TRAKeyValuePair>.Enumerate_TDWVDASmartContractEntryEnvelope(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TRAKeyValuePair'.");
                
            }
            TRAClaim ITypeConverter<TRAKeyValuePair>.ConvertTo_TRAClaim(TRAKeyValuePair value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TRAKeyValuePair>.Enumerate_TRAClaim(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TRACredential_Content(TRACredential_Content value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content' to 'TRAKeyValuePair'.");
                
            }
            TRACredential_Content ITypeConverter<TRAKeyValuePair>.ConvertTo_TRACredential_Content(TRAKeyValuePair value)
            {
                return TypeConverter<TRACredential_Content>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TRACredential_Content()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content> ITypeConverter<TRAKeyValuePair>.Enumerate_TRACredential_Content(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'TRAKeyValuePair'.");
                
            }
            TRACredential_Envelope ITypeConverter<TRAKeyValuePair>.ConvertTo_TRACredential_Envelope(TRAKeyValuePair value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<TRAKeyValuePair>.Enumerate_TRACredential_Envelope(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'TRAKeyValuePair'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRAKeyValuePair>.ConvertTo_TRACredential_EnvelopeSeal(TRAKeyValuePair value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<TRAKeyValuePair>.Enumerate_TRACredential_EnvelopeSeal(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TRACredential_Label(TRACredential_Label value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Label' to 'TRAKeyValuePair'.");
                
            }
            TRACredential_Label ITypeConverter<TRAKeyValuePair>.ConvertTo_TRACredential_Label(TRAKeyValuePair value)
            {
                return TypeConverter<TRACredential_Label>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TRACredential_Label()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Label> ITypeConverter<TRAKeyValuePair>.Enumerate_TRACredential_Label(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                return (TRAKeyValuePair)value;
                
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertTo_TRAKeyValuePair(TRAKeyValuePair value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TRAKeyValuePair>.Enumerate_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TRAKeyValuePair'.");
                
            }
            TRACredentialType ITypeConverter<TRAKeyValuePair>.ConvertTo_TRACredentialType(TRAKeyValuePair value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TRAKeyValuePair>.Enumerate_TRACredentialType(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TRAKeyValuePair'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TRAKeyValuePair>.ConvertTo_TRAEncryptionFlag(TRAKeyValuePair value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TRAKeyValuePair>.Enumerate_TRAEncryptionFlag(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TRAKeyValuePair'.");
                
            }
            TRAServiceType ITypeConverter<TRAKeyValuePair>.ConvertTo_TRAServiceType(TRAKeyValuePair value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TRAKeyValuePair>.Enumerate_TRAServiceType(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TRAKeyValuePair'.");
                
            }
            TRATrustLevel ITypeConverter<TRAKeyValuePair>.ConvertTo_TRATrustLevel(TRAKeyValuePair value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TRAKeyValuePair>.Enumerate_TRATrustLevel(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TRAKeyValuePair'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TRAKeyValuePair>.ConvertTo_List_List_TRAKeyValuePair(TRAKeyValuePair value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TRAKeyValuePair>.Enumerate_List_List_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'TRAKeyValuePair'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<TRAKeyValuePair>.ConvertTo_TDWVDAAccountEntryContent_nullable(TRAKeyValuePair value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<TRAKeyValuePair>.Enumerate_TDWVDAAccountEntryContent_nullable(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'TRAKeyValuePair'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TRAKeyValuePair>.ConvertTo_TDWVDASmartContractEntryContent_nullable(TRAKeyValuePair value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<TRAKeyValuePair>.Enumerate_TDWVDASmartContractEntryContent_nullable(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TRACredential_Content_nullable(TRACredential_Content? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content?' to 'TRAKeyValuePair'.");
                
            }
            TRACredential_Content? ITypeConverter<TRAKeyValuePair>.ConvertTo_TRACredential_Content_nullable(TRAKeyValuePair value)
            {
                return TypeConverter<TRACredential_Content?>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TRACredential_Content_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content?> ITypeConverter<TRAKeyValuePair>.Enumerate_TRACredential_Content_nullable(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TRACredentialType'.");
                
            }
            bool ITypeConverter<TRACredentialType>.ConvertTo_bool(TRACredentialType value)
            {
                return TypeConverter<bool>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TRACredentialType>.Enumerate_bool(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TRACredentialType'.");
                
            }
            long ITypeConverter<TRACredentialType>.ConvertTo_long(TRACredentialType value)
            {
                return TypeConverter<long>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TRACredentialType>.Enumerate_long(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TRACredentialType intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TRACredentialType.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TRACredentialType");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TRACredentialType>.ConvertTo_string(TRACredentialType value)
            {
                return TypeConverter<string>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TRACredentialType>.Enumerate_string(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TRACredentialType'.");
                
            }
            List<string> ITypeConverter<TRACredentialType>.ConvertTo_List_string(TRACredentialType value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TRACredentialType>.Enumerate_List_string(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TRACredentialType'.");
                
            }
            List<TRAClaim> ITypeConverter<TRACredentialType>.ConvertTo_List_TRAClaim(TRACredentialType value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TRACredentialType>.Enumerate_List_TRAClaim(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TRACredentialType'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TRACredentialType>.ConvertTo_List_TRAKeyValuePair(TRACredentialType value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TRACredentialType>.Enumerate_List_TRAKeyValuePair(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'TRACredentialType'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<TRACredentialType>.ConvertTo_TDWVDAAccountEntryClaims(TRACredentialType value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<TRACredentialType>.Enumerate_TDWVDAAccountEntryClaims(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'TRACredentialType'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<TRACredentialType>.ConvertTo_TDWVDAAccountEntryContent(TRACredentialType value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<TRACredentialType>.Enumerate_TDWVDAAccountEntryContent(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'TRACredentialType'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TRACredentialType>.ConvertTo_TDWVDAAccountEntryEnvelope(TRACredentialType value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<TRACredentialType>.Enumerate_TDWVDAAccountEntryEnvelope(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TRACredentialType'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TRACredentialType>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TRACredentialType value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TRACredentialType>.Enumerate_TDWVDAIdentityRegistryEntryParm(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TRACredentialType'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TRACredentialType>.ConvertTo_TDWVDAPostInvocationParameters(TRACredentialType value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TRACredentialType>.Enumerate_TDWVDAPostInvocationParameters(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TRACredentialType'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TRACredentialType>.ConvertTo_TDWVDARevocationListEntryParm(TRACredentialType value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TRACredentialType>.Enumerate_TDWVDARevocationListEntryParm(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TRACredentialType'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TRACredentialType>.ConvertTo_TDWVDAServiceEndpointEntryParm(TRACredentialType value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TRACredentialType>.Enumerate_TDWVDAServiceEndpointEntryParm(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'TRACredentialType'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TRACredentialType>.ConvertTo_TDWVDASmartContractEntryClaims(TRACredentialType value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<TRACredentialType>.Enumerate_TDWVDASmartContractEntryClaims(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'TRACredentialType'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<TRACredentialType>.ConvertTo_TDWVDASmartContractEntryContent(TRACredentialType value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<TRACredentialType>.Enumerate_TDWVDASmartContractEntryContent(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'TRACredentialType'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TRACredentialType>.ConvertTo_TDWVDASmartContractEntryEnvelope(TRACredentialType value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<TRACredentialType>.Enumerate_TDWVDASmartContractEntryEnvelope(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TRACredentialType'.");
                
            }
            TRAClaim ITypeConverter<TRACredentialType>.ConvertTo_TRAClaim(TRACredentialType value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TRACredentialType>.Enumerate_TRAClaim(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TRACredential_Content(TRACredential_Content value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content' to 'TRACredentialType'.");
                
            }
            TRACredential_Content ITypeConverter<TRACredentialType>.ConvertTo_TRACredential_Content(TRACredentialType value)
            {
                return TypeConverter<TRACredential_Content>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TRACredential_Content()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content> ITypeConverter<TRACredentialType>.Enumerate_TRACredential_Content(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'TRACredentialType'.");
                
            }
            TRACredential_Envelope ITypeConverter<TRACredentialType>.ConvertTo_TRACredential_Envelope(TRACredentialType value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<TRACredentialType>.Enumerate_TRACredential_Envelope(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'TRACredentialType'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredentialType>.ConvertTo_TRACredential_EnvelopeSeal(TRACredentialType value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<TRACredentialType>.Enumerate_TRACredential_EnvelopeSeal(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TRACredential_Label(TRACredential_Label value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Label' to 'TRACredentialType'.");
                
            }
            TRACredential_Label ITypeConverter<TRACredentialType>.ConvertTo_TRACredential_Label(TRACredentialType value)
            {
                return TypeConverter<TRACredential_Label>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TRACredential_Label()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Label> ITypeConverter<TRACredentialType>.Enumerate_TRACredential_Label(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TRACredentialType'.");
                
            }
            TRAKeyValuePair ITypeConverter<TRACredentialType>.ConvertTo_TRAKeyValuePair(TRACredentialType value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TRACredentialType>.Enumerate_TRAKeyValuePair(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                return (TRACredentialType)value;
                
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertTo_TRACredentialType(TRACredentialType value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TRACredentialType>.Enumerate_TRACredentialType(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TRACredentialType'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TRACredentialType>.ConvertTo_TRAEncryptionFlag(TRACredentialType value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TRACredentialType>.Enumerate_TRAEncryptionFlag(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TRACredentialType'.");
                
            }
            TRAServiceType ITypeConverter<TRACredentialType>.ConvertTo_TRAServiceType(TRACredentialType value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TRACredentialType>.Enumerate_TRAServiceType(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TRACredentialType'.");
                
            }
            TRATrustLevel ITypeConverter<TRACredentialType>.ConvertTo_TRATrustLevel(TRACredentialType value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TRACredentialType>.Enumerate_TRATrustLevel(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TRACredentialType'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TRACredentialType>.ConvertTo_List_List_TRAKeyValuePair(TRACredentialType value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TRACredentialType>.Enumerate_List_List_TRAKeyValuePair(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'TRACredentialType'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<TRACredentialType>.ConvertTo_TDWVDAAccountEntryContent_nullable(TRACredentialType value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<TRACredentialType>.Enumerate_TDWVDAAccountEntryContent_nullable(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'TRACredentialType'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TRACredentialType>.ConvertTo_TDWVDASmartContractEntryContent_nullable(TRACredentialType value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<TRACredentialType>.Enumerate_TDWVDASmartContractEntryContent_nullable(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TRACredential_Content_nullable(TRACredential_Content? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content?' to 'TRACredentialType'.");
                
            }
            TRACredential_Content? ITypeConverter<TRACredentialType>.ConvertTo_TRACredential_Content_nullable(TRACredentialType value)
            {
                return TypeConverter<TRACredential_Content?>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TRACredential_Content_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content?> ITypeConverter<TRACredentialType>.Enumerate_TRACredential_Content_nullable(TRACredentialType value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TRAEncryptionFlag'.");
                
            }
            bool ITypeConverter<TRAEncryptionFlag>.ConvertTo_bool(TRAEncryptionFlag value)
            {
                return TypeConverter<bool>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TRAEncryptionFlag>.Enumerate_bool(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TRAEncryptionFlag'.");
                
            }
            long ITypeConverter<TRAEncryptionFlag>.ConvertTo_long(TRAEncryptionFlag value)
            {
                return TypeConverter<long>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TRAEncryptionFlag>.Enumerate_long(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TRAEncryptionFlag intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TRAEncryptionFlag.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TRAEncryptionFlag");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TRAEncryptionFlag>.ConvertTo_string(TRAEncryptionFlag value)
            {
                return TypeConverter<string>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TRAEncryptionFlag>.Enumerate_string(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TRAEncryptionFlag'.");
                
            }
            List<string> ITypeConverter<TRAEncryptionFlag>.ConvertTo_List_string(TRAEncryptionFlag value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TRAEncryptionFlag>.Enumerate_List_string(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TRAEncryptionFlag'.");
                
            }
            List<TRAClaim> ITypeConverter<TRAEncryptionFlag>.ConvertTo_List_TRAClaim(TRAEncryptionFlag value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TRAEncryptionFlag>.Enumerate_List_TRAClaim(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TRAEncryptionFlag'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TRAEncryptionFlag>.ConvertTo_List_TRAKeyValuePair(TRAEncryptionFlag value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TRAEncryptionFlag>.Enumerate_List_TRAKeyValuePair(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'TRAEncryptionFlag'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<TRAEncryptionFlag>.ConvertTo_TDWVDAAccountEntryClaims(TRAEncryptionFlag value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<TRAEncryptionFlag>.Enumerate_TDWVDAAccountEntryClaims(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'TRAEncryptionFlag'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<TRAEncryptionFlag>.ConvertTo_TDWVDAAccountEntryContent(TRAEncryptionFlag value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<TRAEncryptionFlag>.Enumerate_TDWVDAAccountEntryContent(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'TRAEncryptionFlag'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TRAEncryptionFlag>.ConvertTo_TDWVDAAccountEntryEnvelope(TRAEncryptionFlag value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<TRAEncryptionFlag>.Enumerate_TDWVDAAccountEntryEnvelope(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TRAEncryptionFlag'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TRAEncryptionFlag>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TRAEncryptionFlag value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TRAEncryptionFlag>.Enumerate_TDWVDAIdentityRegistryEntryParm(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TRAEncryptionFlag'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TRAEncryptionFlag>.ConvertTo_TDWVDAPostInvocationParameters(TRAEncryptionFlag value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TRAEncryptionFlag>.Enumerate_TDWVDAPostInvocationParameters(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TRAEncryptionFlag'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TRAEncryptionFlag>.ConvertTo_TDWVDARevocationListEntryParm(TRAEncryptionFlag value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TRAEncryptionFlag>.Enumerate_TDWVDARevocationListEntryParm(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TRAEncryptionFlag'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TRAEncryptionFlag>.ConvertTo_TDWVDAServiceEndpointEntryParm(TRAEncryptionFlag value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TRAEncryptionFlag>.Enumerate_TDWVDAServiceEndpointEntryParm(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'TRAEncryptionFlag'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TRAEncryptionFlag>.ConvertTo_TDWVDASmartContractEntryClaims(TRAEncryptionFlag value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<TRAEncryptionFlag>.Enumerate_TDWVDASmartContractEntryClaims(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'TRAEncryptionFlag'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<TRAEncryptionFlag>.ConvertTo_TDWVDASmartContractEntryContent(TRAEncryptionFlag value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<TRAEncryptionFlag>.Enumerate_TDWVDASmartContractEntryContent(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'TRAEncryptionFlag'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TRAEncryptionFlag>.ConvertTo_TDWVDASmartContractEntryEnvelope(TRAEncryptionFlag value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<TRAEncryptionFlag>.Enumerate_TDWVDASmartContractEntryEnvelope(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TRAEncryptionFlag'.");
                
            }
            TRAClaim ITypeConverter<TRAEncryptionFlag>.ConvertTo_TRAClaim(TRAEncryptionFlag value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TRAEncryptionFlag>.Enumerate_TRAClaim(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TRACredential_Content(TRACredential_Content value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content' to 'TRAEncryptionFlag'.");
                
            }
            TRACredential_Content ITypeConverter<TRAEncryptionFlag>.ConvertTo_TRACredential_Content(TRAEncryptionFlag value)
            {
                return TypeConverter<TRACredential_Content>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TRACredential_Content()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content> ITypeConverter<TRAEncryptionFlag>.Enumerate_TRACredential_Content(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'TRAEncryptionFlag'.");
                
            }
            TRACredential_Envelope ITypeConverter<TRAEncryptionFlag>.ConvertTo_TRACredential_Envelope(TRAEncryptionFlag value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<TRAEncryptionFlag>.Enumerate_TRACredential_Envelope(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'TRAEncryptionFlag'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRAEncryptionFlag>.ConvertTo_TRACredential_EnvelopeSeal(TRAEncryptionFlag value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<TRAEncryptionFlag>.Enumerate_TRACredential_EnvelopeSeal(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TRACredential_Label(TRACredential_Label value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Label' to 'TRAEncryptionFlag'.");
                
            }
            TRACredential_Label ITypeConverter<TRAEncryptionFlag>.ConvertTo_TRACredential_Label(TRAEncryptionFlag value)
            {
                return TypeConverter<TRACredential_Label>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TRACredential_Label()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Label> ITypeConverter<TRAEncryptionFlag>.Enumerate_TRACredential_Label(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TRAEncryptionFlag'.");
                
            }
            TRAKeyValuePair ITypeConverter<TRAEncryptionFlag>.ConvertTo_TRAKeyValuePair(TRAEncryptionFlag value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TRAEncryptionFlag>.Enumerate_TRAKeyValuePair(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TRAEncryptionFlag'.");
                
            }
            TRACredentialType ITypeConverter<TRAEncryptionFlag>.ConvertTo_TRACredentialType(TRAEncryptionFlag value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TRAEncryptionFlag>.Enumerate_TRACredentialType(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                return (TRAEncryptionFlag)value;
                
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertTo_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TRAEncryptionFlag>.Enumerate_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TRAEncryptionFlag'.");
                
            }
            TRAServiceType ITypeConverter<TRAEncryptionFlag>.ConvertTo_TRAServiceType(TRAEncryptionFlag value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TRAEncryptionFlag>.Enumerate_TRAServiceType(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TRAEncryptionFlag'.");
                
            }
            TRATrustLevel ITypeConverter<TRAEncryptionFlag>.ConvertTo_TRATrustLevel(TRAEncryptionFlag value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TRAEncryptionFlag>.Enumerate_TRATrustLevel(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TRAEncryptionFlag'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TRAEncryptionFlag>.ConvertTo_List_List_TRAKeyValuePair(TRAEncryptionFlag value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TRAEncryptionFlag>.Enumerate_List_List_TRAKeyValuePair(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'TRAEncryptionFlag'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<TRAEncryptionFlag>.ConvertTo_TDWVDAAccountEntryContent_nullable(TRAEncryptionFlag value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<TRAEncryptionFlag>.Enumerate_TDWVDAAccountEntryContent_nullable(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'TRAEncryptionFlag'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TRAEncryptionFlag>.ConvertTo_TDWVDASmartContractEntryContent_nullable(TRAEncryptionFlag value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<TRAEncryptionFlag>.Enumerate_TDWVDASmartContractEntryContent_nullable(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TRACredential_Content_nullable(TRACredential_Content? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content?' to 'TRAEncryptionFlag'.");
                
            }
            TRACredential_Content? ITypeConverter<TRAEncryptionFlag>.ConvertTo_TRACredential_Content_nullable(TRAEncryptionFlag value)
            {
                return TypeConverter<TRACredential_Content?>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TRACredential_Content_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content?> ITypeConverter<TRAEncryptionFlag>.Enumerate_TRACredential_Content_nullable(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TRAServiceType'.");
                
            }
            bool ITypeConverter<TRAServiceType>.ConvertTo_bool(TRAServiceType value)
            {
                return TypeConverter<bool>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TRAServiceType>.Enumerate_bool(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TRAServiceType'.");
                
            }
            long ITypeConverter<TRAServiceType>.ConvertTo_long(TRAServiceType value)
            {
                return TypeConverter<long>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TRAServiceType>.Enumerate_long(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TRAServiceType intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TRAServiceType.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TRAServiceType");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TRAServiceType>.ConvertTo_string(TRAServiceType value)
            {
                return TypeConverter<string>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TRAServiceType>.Enumerate_string(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TRAServiceType'.");
                
            }
            List<string> ITypeConverter<TRAServiceType>.ConvertTo_List_string(TRAServiceType value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TRAServiceType>.Enumerate_List_string(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TRAServiceType'.");
                
            }
            List<TRAClaim> ITypeConverter<TRAServiceType>.ConvertTo_List_TRAClaim(TRAServiceType value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TRAServiceType>.Enumerate_List_TRAClaim(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TRAServiceType'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TRAServiceType>.ConvertTo_List_TRAKeyValuePair(TRAServiceType value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TRAServiceType>.Enumerate_List_TRAKeyValuePair(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'TRAServiceType'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<TRAServiceType>.ConvertTo_TDWVDAAccountEntryClaims(TRAServiceType value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<TRAServiceType>.Enumerate_TDWVDAAccountEntryClaims(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'TRAServiceType'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<TRAServiceType>.ConvertTo_TDWVDAAccountEntryContent(TRAServiceType value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<TRAServiceType>.Enumerate_TDWVDAAccountEntryContent(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'TRAServiceType'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TRAServiceType>.ConvertTo_TDWVDAAccountEntryEnvelope(TRAServiceType value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<TRAServiceType>.Enumerate_TDWVDAAccountEntryEnvelope(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TRAServiceType'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TRAServiceType>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TRAServiceType value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TRAServiceType>.Enumerate_TDWVDAIdentityRegistryEntryParm(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TRAServiceType'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TRAServiceType>.ConvertTo_TDWVDAPostInvocationParameters(TRAServiceType value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TRAServiceType>.Enumerate_TDWVDAPostInvocationParameters(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TRAServiceType'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TRAServiceType>.ConvertTo_TDWVDARevocationListEntryParm(TRAServiceType value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TRAServiceType>.Enumerate_TDWVDARevocationListEntryParm(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TRAServiceType'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TRAServiceType>.ConvertTo_TDWVDAServiceEndpointEntryParm(TRAServiceType value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TRAServiceType>.Enumerate_TDWVDAServiceEndpointEntryParm(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'TRAServiceType'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TRAServiceType>.ConvertTo_TDWVDASmartContractEntryClaims(TRAServiceType value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<TRAServiceType>.Enumerate_TDWVDASmartContractEntryClaims(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'TRAServiceType'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<TRAServiceType>.ConvertTo_TDWVDASmartContractEntryContent(TRAServiceType value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<TRAServiceType>.Enumerate_TDWVDASmartContractEntryContent(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'TRAServiceType'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TRAServiceType>.ConvertTo_TDWVDASmartContractEntryEnvelope(TRAServiceType value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<TRAServiceType>.Enumerate_TDWVDASmartContractEntryEnvelope(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TRAServiceType'.");
                
            }
            TRAClaim ITypeConverter<TRAServiceType>.ConvertTo_TRAClaim(TRAServiceType value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TRAServiceType>.Enumerate_TRAClaim(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TRACredential_Content(TRACredential_Content value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content' to 'TRAServiceType'.");
                
            }
            TRACredential_Content ITypeConverter<TRAServiceType>.ConvertTo_TRACredential_Content(TRAServiceType value)
            {
                return TypeConverter<TRACredential_Content>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TRACredential_Content()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content> ITypeConverter<TRAServiceType>.Enumerate_TRACredential_Content(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'TRAServiceType'.");
                
            }
            TRACredential_Envelope ITypeConverter<TRAServiceType>.ConvertTo_TRACredential_Envelope(TRAServiceType value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<TRAServiceType>.Enumerate_TRACredential_Envelope(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'TRAServiceType'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRAServiceType>.ConvertTo_TRACredential_EnvelopeSeal(TRAServiceType value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<TRAServiceType>.Enumerate_TRACredential_EnvelopeSeal(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TRACredential_Label(TRACredential_Label value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Label' to 'TRAServiceType'.");
                
            }
            TRACredential_Label ITypeConverter<TRAServiceType>.ConvertTo_TRACredential_Label(TRAServiceType value)
            {
                return TypeConverter<TRACredential_Label>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TRACredential_Label()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Label> ITypeConverter<TRAServiceType>.Enumerate_TRACredential_Label(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TRAServiceType'.");
                
            }
            TRAKeyValuePair ITypeConverter<TRAServiceType>.ConvertTo_TRAKeyValuePair(TRAServiceType value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TRAServiceType>.Enumerate_TRAKeyValuePair(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TRAServiceType'.");
                
            }
            TRACredentialType ITypeConverter<TRAServiceType>.ConvertTo_TRACredentialType(TRAServiceType value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TRAServiceType>.Enumerate_TRACredentialType(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TRAServiceType'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TRAServiceType>.ConvertTo_TRAEncryptionFlag(TRAServiceType value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TRAServiceType>.Enumerate_TRAEncryptionFlag(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                return (TRAServiceType)value;
                
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertTo_TRAServiceType(TRAServiceType value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TRAServiceType>.Enumerate_TRAServiceType(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TRAServiceType'.");
                
            }
            TRATrustLevel ITypeConverter<TRAServiceType>.ConvertTo_TRATrustLevel(TRAServiceType value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TRAServiceType>.Enumerate_TRATrustLevel(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TRAServiceType'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TRAServiceType>.ConvertTo_List_List_TRAKeyValuePair(TRAServiceType value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TRAServiceType>.Enumerate_List_List_TRAKeyValuePair(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'TRAServiceType'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<TRAServiceType>.ConvertTo_TDWVDAAccountEntryContent_nullable(TRAServiceType value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<TRAServiceType>.Enumerate_TDWVDAAccountEntryContent_nullable(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'TRAServiceType'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TRAServiceType>.ConvertTo_TDWVDASmartContractEntryContent_nullable(TRAServiceType value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<TRAServiceType>.Enumerate_TDWVDASmartContractEntryContent_nullable(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TRACredential_Content_nullable(TRACredential_Content? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content?' to 'TRAServiceType'.");
                
            }
            TRACredential_Content? ITypeConverter<TRAServiceType>.ConvertTo_TRACredential_Content_nullable(TRAServiceType value)
            {
                return TypeConverter<TRACredential_Content?>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TRACredential_Content_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content?> ITypeConverter<TRAServiceType>.Enumerate_TRACredential_Content_nullable(TRAServiceType value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TRATrustLevel'.");
                
            }
            bool ITypeConverter<TRATrustLevel>.ConvertTo_bool(TRATrustLevel value)
            {
                return TypeConverter<bool>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TRATrustLevel>.Enumerate_bool(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TRATrustLevel'.");
                
            }
            long ITypeConverter<TRATrustLevel>.ConvertTo_long(TRATrustLevel value)
            {
                return TypeConverter<long>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TRATrustLevel>.Enumerate_long(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TRATrustLevel intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TRATrustLevel.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TRATrustLevel");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TRATrustLevel>.ConvertTo_string(TRATrustLevel value)
            {
                return TypeConverter<string>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TRATrustLevel>.Enumerate_string(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TRATrustLevel'.");
                
            }
            List<string> ITypeConverter<TRATrustLevel>.ConvertTo_List_string(TRATrustLevel value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TRATrustLevel>.Enumerate_List_string(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TRATrustLevel'.");
                
            }
            List<TRAClaim> ITypeConverter<TRATrustLevel>.ConvertTo_List_TRAClaim(TRATrustLevel value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TRATrustLevel>.Enumerate_List_TRAClaim(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TRATrustLevel'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TRATrustLevel>.ConvertTo_List_TRAKeyValuePair(TRATrustLevel value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TRATrustLevel>.Enumerate_List_TRAKeyValuePair(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'TRATrustLevel'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<TRATrustLevel>.ConvertTo_TDWVDAAccountEntryClaims(TRATrustLevel value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<TRATrustLevel>.Enumerate_TDWVDAAccountEntryClaims(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'TRATrustLevel'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<TRATrustLevel>.ConvertTo_TDWVDAAccountEntryContent(TRATrustLevel value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<TRATrustLevel>.Enumerate_TDWVDAAccountEntryContent(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'TRATrustLevel'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TRATrustLevel>.ConvertTo_TDWVDAAccountEntryEnvelope(TRATrustLevel value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<TRATrustLevel>.Enumerate_TDWVDAAccountEntryEnvelope(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TRATrustLevel'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TRATrustLevel>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TRATrustLevel value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TRATrustLevel>.Enumerate_TDWVDAIdentityRegistryEntryParm(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TRATrustLevel'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TRATrustLevel>.ConvertTo_TDWVDAPostInvocationParameters(TRATrustLevel value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TRATrustLevel>.Enumerate_TDWVDAPostInvocationParameters(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TRATrustLevel'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TRATrustLevel>.ConvertTo_TDWVDARevocationListEntryParm(TRATrustLevel value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TRATrustLevel>.Enumerate_TDWVDARevocationListEntryParm(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TRATrustLevel'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TRATrustLevel>.ConvertTo_TDWVDAServiceEndpointEntryParm(TRATrustLevel value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TRATrustLevel>.Enumerate_TDWVDAServiceEndpointEntryParm(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'TRATrustLevel'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TRATrustLevel>.ConvertTo_TDWVDASmartContractEntryClaims(TRATrustLevel value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<TRATrustLevel>.Enumerate_TDWVDASmartContractEntryClaims(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'TRATrustLevel'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<TRATrustLevel>.ConvertTo_TDWVDASmartContractEntryContent(TRATrustLevel value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<TRATrustLevel>.Enumerate_TDWVDASmartContractEntryContent(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'TRATrustLevel'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TRATrustLevel>.ConvertTo_TDWVDASmartContractEntryEnvelope(TRATrustLevel value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<TRATrustLevel>.Enumerate_TDWVDASmartContractEntryEnvelope(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TRATrustLevel'.");
                
            }
            TRAClaim ITypeConverter<TRATrustLevel>.ConvertTo_TRAClaim(TRATrustLevel value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TRATrustLevel>.Enumerate_TRAClaim(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TRACredential_Content(TRACredential_Content value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content' to 'TRATrustLevel'.");
                
            }
            TRACredential_Content ITypeConverter<TRATrustLevel>.ConvertTo_TRACredential_Content(TRATrustLevel value)
            {
                return TypeConverter<TRACredential_Content>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TRACredential_Content()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content> ITypeConverter<TRATrustLevel>.Enumerate_TRACredential_Content(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'TRATrustLevel'.");
                
            }
            TRACredential_Envelope ITypeConverter<TRATrustLevel>.ConvertTo_TRACredential_Envelope(TRATrustLevel value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<TRATrustLevel>.Enumerate_TRACredential_Envelope(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'TRATrustLevel'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRATrustLevel>.ConvertTo_TRACredential_EnvelopeSeal(TRATrustLevel value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<TRATrustLevel>.Enumerate_TRACredential_EnvelopeSeal(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TRACredential_Label(TRACredential_Label value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Label' to 'TRATrustLevel'.");
                
            }
            TRACredential_Label ITypeConverter<TRATrustLevel>.ConvertTo_TRACredential_Label(TRATrustLevel value)
            {
                return TypeConverter<TRACredential_Label>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TRACredential_Label()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Label> ITypeConverter<TRATrustLevel>.Enumerate_TRACredential_Label(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TRATrustLevel'.");
                
            }
            TRAKeyValuePair ITypeConverter<TRATrustLevel>.ConvertTo_TRAKeyValuePair(TRATrustLevel value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TRATrustLevel>.Enumerate_TRAKeyValuePair(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TRATrustLevel'.");
                
            }
            TRACredentialType ITypeConverter<TRATrustLevel>.ConvertTo_TRACredentialType(TRATrustLevel value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TRATrustLevel>.Enumerate_TRACredentialType(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TRATrustLevel'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TRATrustLevel>.ConvertTo_TRAEncryptionFlag(TRATrustLevel value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TRATrustLevel>.Enumerate_TRAEncryptionFlag(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TRATrustLevel'.");
                
            }
            TRAServiceType ITypeConverter<TRATrustLevel>.ConvertTo_TRAServiceType(TRATrustLevel value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TRATrustLevel>.Enumerate_TRAServiceType(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                return (TRATrustLevel)value;
                
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertTo_TRATrustLevel(TRATrustLevel value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TRATrustLevel>.Enumerate_TRATrustLevel(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TRATrustLevel'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TRATrustLevel>.ConvertTo_List_List_TRAKeyValuePair(TRATrustLevel value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TRATrustLevel>.Enumerate_List_List_TRAKeyValuePair(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'TRATrustLevel'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<TRATrustLevel>.ConvertTo_TDWVDAAccountEntryContent_nullable(TRATrustLevel value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<TRATrustLevel>.Enumerate_TDWVDAAccountEntryContent_nullable(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'TRATrustLevel'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TRATrustLevel>.ConvertTo_TDWVDASmartContractEntryContent_nullable(TRATrustLevel value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<TRATrustLevel>.Enumerate_TDWVDASmartContractEntryContent_nullable(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TRACredential_Content_nullable(TRACredential_Content? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content?' to 'TRATrustLevel'.");
                
            }
            TRACredential_Content? ITypeConverter<TRATrustLevel>.ConvertTo_TRACredential_Content_nullable(TRATrustLevel value)
            {
                return TypeConverter<TRACredential_Content?>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TRACredential_Content_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content?> ITypeConverter<TRATrustLevel>.Enumerate_TRACredential_Content_nullable(TRATrustLevel value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            bool ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_bool(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<bool>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_bool(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            long ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_long(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<long>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_long(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    List<List<TRAKeyValuePair>> intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = ExternalParser.TryParse_List_List_TRAKeyValuePair(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        try
                        {
                            List<TRAKeyValuePair> element = TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_string(value);
                            intermediate_result = new List<List<TRAKeyValuePair>>();
                            intermediate_result.Add(element);
                        }
                        catch
                        {
                            throw new ArgumentException("Cannot parse \"" + value + "\" into either 'List<List<TRAKeyValuePair>>' or 'List<TRAKeyValuePair>'.");
                        }
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_string(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<string>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_string(List<List<TRAKeyValuePair>> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<string>.ConvertFrom_List_TRAKeyValuePair(element);
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_List_string(List<string> value)
            {
                
                {
                    List<List<TRAKeyValuePair>> intermediate_result = new List<List<TRAKeyValuePair>>();
                    foreach (var element in value)
                    {
                        intermediate_result.Add(TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_string(element));
                    }
                    return intermediate_result;
                }
                
            }
            List<string> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_List_string(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<List<string>>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_CONVERTLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_List_string(List<List<TRAKeyValuePair>> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<List<string>>.ConvertFrom_List_TRAKeyValuePair(element);
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            List<TRAClaim> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_List_TRAClaim(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_List_TRAClaim(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                {
                    List<List<TRAKeyValuePair>> intermediate_result = new List<List<TRAKeyValuePair>>();
                    foreach (var element in value)
                    {
                        intermediate_result.Add(TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRAKeyValuePair(element));
                    }
                    return intermediate_result;
                }
                
            }
            List<TRAKeyValuePair> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_List_TRAKeyValuePair(element);
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TDWVDAAccountEntryClaims(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TDWVDAAccountEntryClaims(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TDWVDAAccountEntryContent(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TDWVDAAccountEntryContent(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TDWVDAAccountEntryEnvelope(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TDWVDAAccountEntryEnvelope(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TDWVDAIdentityRegistryEntryParm(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TDWVDAIdentityRegistryEntryParm(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TDWVDAPostInvocationParameters(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TDWVDAPostInvocationParameters(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TDWVDARevocationListEntryParm(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TDWVDARevocationListEntryParm(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TDWVDAServiceEndpointEntryParm(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TDWVDAServiceEndpointEntryParm(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TDWVDASmartContractEntryClaims(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TDWVDASmartContractEntryClaims(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TDWVDASmartContractEntryContent(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TDWVDASmartContractEntryContent(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TDWVDASmartContractEntryEnvelope(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TDWVDASmartContractEntryEnvelope(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TRAClaim ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TRAClaim(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TRAClaim(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRACredential_Content(TRACredential_Content value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TRACredential_Content ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TRACredential_Content(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TRACredential_Content>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TRACredential_Content()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TRACredential_Content(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TRACredential_Envelope ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TRACredential_Envelope(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TRACredential_Envelope(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TRACredential_EnvelopeSeal(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TRACredential_EnvelopeSeal(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRACredential_Label(TRACredential_Label value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Label' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TRACredential_Label ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TRACredential_Label(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TRACredential_Label>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TRACredential_Label()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Label> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TRACredential_Label(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                {
                    List<List<TRAKeyValuePair>> intermediate_result = new List<List<TRAKeyValuePair>>();
                    intermediate_result.Add(TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRAKeyValuePair(value));
                    return intermediate_result;
                }
                
            }
            TRAKeyValuePair ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TRACredentialType ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TRACredentialType(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TRACredentialType(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TRAEncryptionFlag ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TRAEncryptionFlag(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TRAEncryptionFlag(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TRAServiceType ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TRAServiceType(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TRAServiceType(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TRATrustLevel ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TRATrustLevel(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TRATrustLevel(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                return (List<List<TRAKeyValuePair>>)value;
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_List_TRAKeyValuePair(element);
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TDWVDAAccountEntryContent_nullable(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TDWVDAAccountEntryContent_nullable(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TDWVDASmartContractEntryContent_nullable(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TDWVDASmartContractEntryContent_nullable(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRACredential_Content_nullable(TRACredential_Content? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content?' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TRACredential_Content? ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TRACredential_Content_nullable(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TRACredential_Content?>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TRACredential_Content_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content?> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TRACredential_Content_nullable(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TDWVDAAccountEntryContent?'.");
                
            }
            bool ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_bool(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<bool>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_bool(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TDWVDAAccountEntryContent?'.");
                
            }
            long ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_long(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<long>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_long(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TDWVDAAccountEntryContent? intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = ExternalParser.TryParse_TDWVDAAccountEntryContent_nullable(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TDWVDAAccountEntryContent?");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_string(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<string>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_string(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TDWVDAAccountEntryContent?'.");
                
            }
            List<string> ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_List_string(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_List_string(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TDWVDAAccountEntryContent?'.");
                
            }
            List<TRAClaim> ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_List_TRAClaim(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_List_TRAClaim(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TDWVDAAccountEntryContent?'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_List_TRAKeyValuePair(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_List_TRAKeyValuePair(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'TDWVDAAccountEntryContent?'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_TDWVDAAccountEntryClaims(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_TDWVDAAccountEntryClaims(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                return (TDWVDAAccountEntryContent?)value;
                
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_EXTRACTNULLABLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'TDWVDAAccountEntryContent?'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TDWVDAAccountEntryContent?'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_TDWVDAIdentityRegistryEntryParm(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TDWVDAAccountEntryContent?'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_TDWVDAPostInvocationParameters(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_TDWVDAPostInvocationParameters(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TDWVDAAccountEntryContent?'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_TDWVDARevocationListEntryParm(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_TDWVDARevocationListEntryParm(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TDWVDAAccountEntryContent?'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_TDWVDAServiceEndpointEntryParm(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_TDWVDAServiceEndpointEntryParm(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'TDWVDAAccountEntryContent?'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_TDWVDASmartContractEntryClaims(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_TDWVDASmartContractEntryClaims(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'TDWVDAAccountEntryContent?'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_TDWVDASmartContractEntryContent(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_TDWVDASmartContractEntryContent(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'TDWVDAAccountEntryContent?'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_TDWVDASmartContractEntryEnvelope(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_TDWVDASmartContractEntryEnvelope(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TDWVDAAccountEntryContent?'.");
                
            }
            TRAClaim ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_TRAClaim(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_TRAClaim(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TRACredential_Content(TRACredential_Content value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content' to 'TDWVDAAccountEntryContent?'.");
                
            }
            TRACredential_Content ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_TRACredential_Content(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<TRACredential_Content>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_TRACredential_Content()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_TRACredential_Content(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'TDWVDAAccountEntryContent?'.");
                
            }
            TRACredential_Envelope ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_TRACredential_Envelope(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_TRACredential_Envelope(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'TDWVDAAccountEntryContent?'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_TRACredential_EnvelopeSeal(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_TRACredential_EnvelopeSeal(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TRACredential_Label(TRACredential_Label value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Label' to 'TDWVDAAccountEntryContent?'.");
                
            }
            TRACredential_Label ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_TRACredential_Label(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<TRACredential_Label>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_TRACredential_Label()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Label> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_TRACredential_Label(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TDWVDAAccountEntryContent?'.");
                
            }
            TRAKeyValuePair ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_TRAKeyValuePair(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_TRAKeyValuePair(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TDWVDAAccountEntryContent?'.");
                
            }
            TRACredentialType ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_TRACredentialType(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_TRACredentialType(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TDWVDAAccountEntryContent?'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_TRAEncryptionFlag(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_TRAEncryptionFlag(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TDWVDAAccountEntryContent?'.");
                
            }
            TRAServiceType ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_TRAServiceType(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_TRAServiceType(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TDWVDAAccountEntryContent?'.");
                
            }
            TRATrustLevel ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_TRATrustLevel(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_TRATrustLevel(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TDWVDAAccountEntryContent?'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_List_List_TRAKeyValuePair(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_List_List_TRAKeyValuePair(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                return (TDWVDAAccountEntryContent?)value;
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'TDWVDAAccountEntryContent?'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_TDWVDASmartContractEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_TDWVDASmartContractEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TRACredential_Content_nullable(TRACredential_Content? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content?' to 'TDWVDAAccountEntryContent?'.");
                
            }
            TRACredential_Content? ITypeConverter<TDWVDAAccountEntryContent?>.ConvertTo_TRACredential_Content_nullable(TDWVDAAccountEntryContent? value)
            {
                return TypeConverter<TRACredential_Content?>.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntryContent?>.GetConversionActionTo_TRACredential_Content_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content?> ITypeConverter<TDWVDAAccountEntryContent?>.Enumerate_TRACredential_Content_nullable(TDWVDAAccountEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            bool ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_bool(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<bool>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_bool(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            long ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_long(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<long>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_long(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TDWVDASmartContractEntryContent? intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = ExternalParser.TryParse_TDWVDASmartContractEntryContent_nullable(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TDWVDASmartContractEntryContent?");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_string(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<string>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_string(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            List<string> ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_List_string(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_List_string(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            List<TRAClaim> ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_List_TRAClaim(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_List_TRAClaim(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_List_TRAKeyValuePair(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_List_TRAKeyValuePair(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_TDWVDAAccountEntryClaims(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_TDWVDAAccountEntryClaims(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_TDWVDAAccountEntryContent(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_TDWVDAAccountEntryContent(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_TDWVDAAccountEntryEnvelope(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_TDWVDAAccountEntryEnvelope(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_TDWVDAIdentityRegistryEntryParm(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_TDWVDAPostInvocationParameters(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_TDWVDAPostInvocationParameters(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_TDWVDARevocationListEntryParm(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_TDWVDARevocationListEntryParm(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_TDWVDAServiceEndpointEntryParm(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_TDWVDAServiceEndpointEntryParm(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                return (TDWVDASmartContractEntryContent?)value;
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_EXTRACTNULLABLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            TRAClaim ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_TRAClaim(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_TRAClaim(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TRACredential_Content(TRACredential_Content value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            TRACredential_Content ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_TRACredential_Content(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<TRACredential_Content>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_TRACredential_Content()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_TRACredential_Content(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            TRACredential_Envelope ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_TRACredential_Envelope(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_TRACredential_Envelope(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_TRACredential_EnvelopeSeal(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_TRACredential_EnvelopeSeal(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TRACredential_Label(TRACredential_Label value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Label' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            TRACredential_Label ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_TRACredential_Label(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<TRACredential_Label>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_TRACredential_Label()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Label> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_TRACredential_Label(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            TRAKeyValuePair ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_TRAKeyValuePair(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_TRAKeyValuePair(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            TRACredentialType ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_TRACredentialType(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_TRACredentialType(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_TRAEncryptionFlag(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_TRAEncryptionFlag(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            TRAServiceType ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_TRAServiceType(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_TRAServiceType(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            TRATrustLevel ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_TRATrustLevel(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_TRATrustLevel(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_List_List_TRAKeyValuePair(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_List_List_TRAKeyValuePair(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_TDWVDAAccountEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_TDWVDAAccountEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                return (TDWVDASmartContractEntryContent?)value;
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TRACredential_Content_nullable(TRACredential_Content? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Content?' to 'TDWVDASmartContractEntryContent?'.");
                
            }
            TRACredential_Content? ITypeConverter<TDWVDASmartContractEntryContent?>.ConvertTo_TRACredential_Content_nullable(TDWVDASmartContractEntryContent? value)
            {
                return TypeConverter<TRACredential_Content?>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntryContent?>.GetConversionActionTo_TRACredential_Content_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content?> ITypeConverter<TDWVDASmartContractEntryContent?>.Enumerate_TRACredential_Content_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                yield break;
            }
            TRACredential_Content? ITypeConverter<TRACredential_Content?>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TRACredential_Content?'.");
                
            }
            bool ITypeConverter<TRACredential_Content?>.ConvertTo_bool(TRACredential_Content? value)
            {
                return TypeConverter<bool>.ConvertFrom_TRACredential_Content_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content?>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TRACredential_Content?>.Enumerate_bool(TRACredential_Content? value)
            {
                
                yield break;
            }
            TRACredential_Content? ITypeConverter<TRACredential_Content?>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TRACredential_Content?'.");
                
            }
            long ITypeConverter<TRACredential_Content?>.ConvertTo_long(TRACredential_Content? value)
            {
                return TypeConverter<long>.ConvertFrom_TRACredential_Content_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content?>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TRACredential_Content?>.Enumerate_long(TRACredential_Content? value)
            {
                
                yield break;
            }
            TRACredential_Content? ITypeConverter<TRACredential_Content?>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TRACredential_Content? intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = ExternalParser.TryParse_TRACredential_Content_nullable(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TRACredential_Content?");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TRACredential_Content?>.ConvertTo_string(TRACredential_Content? value)
            {
                return TypeConverter<string>.ConvertFrom_TRACredential_Content_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content?>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TRACredential_Content?>.Enumerate_string(TRACredential_Content? value)
            {
                
                yield break;
            }
            TRACredential_Content? ITypeConverter<TRACredential_Content?>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TRACredential_Content?'.");
                
            }
            List<string> ITypeConverter<TRACredential_Content?>.ConvertTo_List_string(TRACredential_Content? value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TRACredential_Content_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content?>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TRACredential_Content?>.Enumerate_List_string(TRACredential_Content? value)
            {
                
                yield break;
            }
            TRACredential_Content? ITypeConverter<TRACredential_Content?>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TRACredential_Content?'.");
                
            }
            List<TRAClaim> ITypeConverter<TRACredential_Content?>.ConvertTo_List_TRAClaim(TRACredential_Content? value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TRACredential_Content_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content?>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TRACredential_Content?>.Enumerate_List_TRAClaim(TRACredential_Content? value)
            {
                
                yield break;
            }
            TRACredential_Content? ITypeConverter<TRACredential_Content?>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TRACredential_Content?'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TRACredential_Content?>.ConvertTo_List_TRAKeyValuePair(TRACredential_Content? value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRACredential_Content_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content?>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TRACredential_Content?>.Enumerate_List_TRAKeyValuePair(TRACredential_Content? value)
            {
                
                yield break;
            }
            TRACredential_Content? ITypeConverter<TRACredential_Content?>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryClaims' to 'TRACredential_Content?'.");
                
            }
            TDWVDAAccountEntryClaims ITypeConverter<TRACredential_Content?>.ConvertTo_TDWVDAAccountEntryClaims(TRACredential_Content? value)
            {
                return TypeConverter<TDWVDAAccountEntryClaims>.ConvertFrom_TRACredential_Content_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content?>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<TRACredential_Content?>.Enumerate_TDWVDAAccountEntryClaims(TRACredential_Content? value)
            {
                
                yield break;
            }
            TRACredential_Content? ITypeConverter<TRACredential_Content?>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent' to 'TRACredential_Content?'.");
                
            }
            TDWVDAAccountEntryContent ITypeConverter<TRACredential_Content?>.ConvertTo_TDWVDAAccountEntryContent(TRACredential_Content? value)
            {
                return TypeConverter<TDWVDAAccountEntryContent>.ConvertFrom_TRACredential_Content_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content?>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<TRACredential_Content?>.Enumerate_TDWVDAAccountEntryContent(TRACredential_Content? value)
            {
                
                yield break;
            }
            TRACredential_Content? ITypeConverter<TRACredential_Content?>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryEnvelope' to 'TRACredential_Content?'.");
                
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<TRACredential_Content?>.ConvertTo_TDWVDAAccountEntryEnvelope(TRACredential_Content? value)
            {
                return TypeConverter<TDWVDAAccountEntryEnvelope>.ConvertFrom_TRACredential_Content_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content?>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<TRACredential_Content?>.Enumerate_TDWVDAAccountEntryEnvelope(TRACredential_Content? value)
            {
                
                yield break;
            }
            TRACredential_Content? ITypeConverter<TRACredential_Content?>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TRACredential_Content?'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TRACredential_Content?>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TRACredential_Content? value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRACredential_Content_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content?>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TRACredential_Content?>.Enumerate_TDWVDAIdentityRegistryEntryParm(TRACredential_Content? value)
            {
                
                yield break;
            }
            TRACredential_Content? ITypeConverter<TRACredential_Content?>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TRACredential_Content?'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TRACredential_Content?>.ConvertTo_TDWVDAPostInvocationParameters(TRACredential_Content? value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRACredential_Content_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content?>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TRACredential_Content?>.Enumerate_TDWVDAPostInvocationParameters(TRACredential_Content? value)
            {
                
                yield break;
            }
            TRACredential_Content? ITypeConverter<TRACredential_Content?>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TRACredential_Content?'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TRACredential_Content?>.ConvertTo_TDWVDARevocationListEntryParm(TRACredential_Content? value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRACredential_Content_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content?>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TRACredential_Content?>.Enumerate_TDWVDARevocationListEntryParm(TRACredential_Content? value)
            {
                
                yield break;
            }
            TRACredential_Content? ITypeConverter<TRACredential_Content?>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TRACredential_Content?'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TRACredential_Content?>.ConvertTo_TDWVDAServiceEndpointEntryParm(TRACredential_Content? value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRACredential_Content_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content?>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TRACredential_Content?>.Enumerate_TDWVDAServiceEndpointEntryParm(TRACredential_Content? value)
            {
                
                yield break;
            }
            TRACredential_Content? ITypeConverter<TRACredential_Content?>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryClaims' to 'TRACredential_Content?'.");
                
            }
            TDWVDASmartContractEntryClaims ITypeConverter<TRACredential_Content?>.ConvertTo_TDWVDASmartContractEntryClaims(TRACredential_Content? value)
            {
                return TypeConverter<TDWVDASmartContractEntryClaims>.ConvertFrom_TRACredential_Content_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content?>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<TRACredential_Content?>.Enumerate_TDWVDASmartContractEntryClaims(TRACredential_Content? value)
            {
                
                yield break;
            }
            TRACredential_Content? ITypeConverter<TRACredential_Content?>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent' to 'TRACredential_Content?'.");
                
            }
            TDWVDASmartContractEntryContent ITypeConverter<TRACredential_Content?>.ConvertTo_TDWVDASmartContractEntryContent(TRACredential_Content? value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent>.ConvertFrom_TRACredential_Content_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content?>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<TRACredential_Content?>.Enumerate_TDWVDASmartContractEntryContent(TRACredential_Content? value)
            {
                
                yield break;
            }
            TRACredential_Content? ITypeConverter<TRACredential_Content?>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryEnvelope' to 'TRACredential_Content?'.");
                
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<TRACredential_Content?>.ConvertTo_TDWVDASmartContractEntryEnvelope(TRACredential_Content? value)
            {
                return TypeConverter<TDWVDASmartContractEntryEnvelope>.ConvertFrom_TRACredential_Content_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content?>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<TRACredential_Content?>.Enumerate_TDWVDASmartContractEntryEnvelope(TRACredential_Content? value)
            {
                
                yield break;
            }
            TRACredential_Content? ITypeConverter<TRACredential_Content?>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TRACredential_Content?'.");
                
            }
            TRAClaim ITypeConverter<TRACredential_Content?>.ConvertTo_TRAClaim(TRACredential_Content? value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TRACredential_Content_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content?>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TRACredential_Content?>.Enumerate_TRAClaim(TRACredential_Content? value)
            {
                
                yield break;
            }
            TRACredential_Content? ITypeConverter<TRACredential_Content?>.ConvertFrom_TRACredential_Content(TRACredential_Content value)
            {
                
                return (TRACredential_Content?)value;
                
            }
            TRACredential_Content ITypeConverter<TRACredential_Content?>.ConvertTo_TRACredential_Content(TRACredential_Content? value)
            {
                return TypeConverter<TRACredential_Content>.ConvertFrom_TRACredential_Content_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content?>.GetConversionActionTo_TRACredential_Content()
            {
                
                return TypeConversionAction.TC_EXTRACTNULLABLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content> ITypeConverter<TRACredential_Content?>.Enumerate_TRACredential_Content(TRACredential_Content? value)
            {
                
                yield break;
            }
            TRACredential_Content? ITypeConverter<TRACredential_Content?>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'TRACredential_Content?'.");
                
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Content?>.ConvertTo_TRACredential_Envelope(TRACredential_Content? value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_TRACredential_Content_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content?>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<TRACredential_Content?>.Enumerate_TRACredential_Envelope(TRACredential_Content? value)
            {
                
                yield break;
            }
            TRACredential_Content? ITypeConverter<TRACredential_Content?>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'TRACredential_Content?'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_Content?>.ConvertTo_TRACredential_EnvelopeSeal(TRACredential_Content? value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TRACredential_Content_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content?>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<TRACredential_Content?>.Enumerate_TRACredential_EnvelopeSeal(TRACredential_Content? value)
            {
                
                yield break;
            }
            TRACredential_Content? ITypeConverter<TRACredential_Content?>.ConvertFrom_TRACredential_Label(TRACredential_Label value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Label' to 'TRACredential_Content?'.");
                
            }
            TRACredential_Label ITypeConverter<TRACredential_Content?>.ConvertTo_TRACredential_Label(TRACredential_Content? value)
            {
                return TypeConverter<TRACredential_Label>.ConvertFrom_TRACredential_Content_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content?>.GetConversionActionTo_TRACredential_Label()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Label> ITypeConverter<TRACredential_Content?>.Enumerate_TRACredential_Label(TRACredential_Content? value)
            {
                
                yield break;
            }
            TRACredential_Content? ITypeConverter<TRACredential_Content?>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TRACredential_Content?'.");
                
            }
            TRAKeyValuePair ITypeConverter<TRACredential_Content?>.ConvertTo_TRAKeyValuePair(TRACredential_Content? value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TRACredential_Content_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content?>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TRACredential_Content?>.Enumerate_TRAKeyValuePair(TRACredential_Content? value)
            {
                
                yield break;
            }
            TRACredential_Content? ITypeConverter<TRACredential_Content?>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TRACredential_Content?'.");
                
            }
            TRACredentialType ITypeConverter<TRACredential_Content?>.ConvertTo_TRACredentialType(TRACredential_Content? value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TRACredential_Content_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content?>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TRACredential_Content?>.Enumerate_TRACredentialType(TRACredential_Content? value)
            {
                
                yield break;
            }
            TRACredential_Content? ITypeConverter<TRACredential_Content?>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TRACredential_Content?'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TRACredential_Content?>.ConvertTo_TRAEncryptionFlag(TRACredential_Content? value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TRACredential_Content_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content?>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TRACredential_Content?>.Enumerate_TRAEncryptionFlag(TRACredential_Content? value)
            {
                
                yield break;
            }
            TRACredential_Content? ITypeConverter<TRACredential_Content?>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TRACredential_Content?'.");
                
            }
            TRAServiceType ITypeConverter<TRACredential_Content?>.ConvertTo_TRAServiceType(TRACredential_Content? value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TRACredential_Content_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content?>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TRACredential_Content?>.Enumerate_TRAServiceType(TRACredential_Content? value)
            {
                
                yield break;
            }
            TRACredential_Content? ITypeConverter<TRACredential_Content?>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TRACredential_Content?'.");
                
            }
            TRATrustLevel ITypeConverter<TRACredential_Content?>.ConvertTo_TRATrustLevel(TRACredential_Content? value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TRACredential_Content_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content?>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TRACredential_Content?>.Enumerate_TRATrustLevel(TRACredential_Content? value)
            {
                
                yield break;
            }
            TRACredential_Content? ITypeConverter<TRACredential_Content?>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TRACredential_Content?'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TRACredential_Content?>.ConvertTo_List_List_TRAKeyValuePair(TRACredential_Content? value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRACredential_Content_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content?>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TRACredential_Content?>.Enumerate_List_List_TRAKeyValuePair(TRACredential_Content? value)
            {
                
                yield break;
            }
            TRACredential_Content? ITypeConverter<TRACredential_Content?>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntryContent?' to 'TRACredential_Content?'.");
                
            }
            TDWVDAAccountEntryContent? ITypeConverter<TRACredential_Content?>.ConvertTo_TDWVDAAccountEntryContent_nullable(TRACredential_Content? value)
            {
                return TypeConverter<TDWVDAAccountEntryContent?>.ConvertFrom_TRACredential_Content_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content?>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<TRACredential_Content?>.Enumerate_TDWVDAAccountEntryContent_nullable(TRACredential_Content? value)
            {
                
                yield break;
            }
            TRACredential_Content? ITypeConverter<TRACredential_Content?>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntryContent?' to 'TRACredential_Content?'.");
                
            }
            TDWVDASmartContractEntryContent? ITypeConverter<TRACredential_Content?>.ConvertTo_TDWVDASmartContractEntryContent_nullable(TRACredential_Content? value)
            {
                return TypeConverter<TDWVDASmartContractEntryContent?>.ConvertFrom_TRACredential_Content_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content?>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<TRACredential_Content?>.Enumerate_TDWVDASmartContractEntryContent_nullable(TRACredential_Content? value)
            {
                
                yield break;
            }
            TRACredential_Content? ITypeConverter<TRACredential_Content?>.ConvertFrom_TRACredential_Content_nullable(TRACredential_Content? value)
            {
                
                return (TRACredential_Content?)value;
                
            }
            TRACredential_Content? ITypeConverter<TRACredential_Content?>.ConvertTo_TRACredential_Content_nullable(TRACredential_Content? value)
            {
                return TypeConverter<TRACredential_Content?>.ConvertFrom_TRACredential_Content_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Content?>.GetConversionActionTo_TRACredential_Content_nullable()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Content?> ITypeConverter<TRACredential_Content?>.Enumerate_TRACredential_Content_nullable(TRACredential_Content? value)
            {
                
                yield break;
            }
            
            object ITypeConverter<object>.ConvertFrom_bool(bool value)
            {
                return value;
            }
            bool ITypeConverter<object>.ConvertTo_bool(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_bool()
            {
                throw new NotImplementedException();
            }
            IEnumerable<bool> ITypeConverter<object>.Enumerate_bool(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_long(long value)
            {
                return value;
            }
            long ITypeConverter<object>.ConvertTo_long(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_long()
            {
                throw new NotImplementedException();
            }
            IEnumerable<long> ITypeConverter<object>.Enumerate_long(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_string(string value)
            {
                return value;
            }
            string ITypeConverter<object>.ConvertTo_string(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_string()
            {
                throw new NotImplementedException();
            }
            IEnumerable<string> ITypeConverter<object>.Enumerate_string(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_List_string(List<string> value)
            {
                return value;
            }
            List<string> ITypeConverter<object>.ConvertTo_List_string(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_List_string()
            {
                throw new NotImplementedException();
            }
            IEnumerable<List<string>> ITypeConverter<object>.Enumerate_List_string(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                return value;
            }
            List<TRAClaim> ITypeConverter<object>.ConvertTo_List_TRAClaim(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_List_TRAClaim()
            {
                throw new NotImplementedException();
            }
            IEnumerable<List<TRAClaim>> ITypeConverter<object>.Enumerate_List_TRAClaim(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                return value;
            }
            List<TRAKeyValuePair> ITypeConverter<object>.ConvertTo_List_TRAKeyValuePair(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                throw new NotImplementedException();
            }
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<object>.Enumerate_List_TRAKeyValuePair(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
            {
                return value;
            }
            TDWVDAAccountEntryClaims ITypeConverter<object>.ConvertTo_TDWVDAAccountEntryClaims(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TDWVDAAccountEntryClaims()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<object>.Enumerate_TDWVDAAccountEntryClaims(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
            {
                return value;
            }
            TDWVDAAccountEntryContent ITypeConverter<object>.ConvertTo_TDWVDAAccountEntryContent(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TDWVDAAccountEntryContent()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<object>.Enumerate_TDWVDAAccountEntryContent(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
            {
                return value;
            }
            TDWVDAAccountEntryEnvelope ITypeConverter<object>.ConvertTo_TDWVDAAccountEntryEnvelope(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<object>.Enumerate_TDWVDAAccountEntryEnvelope(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                return value;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<object>.ConvertTo_TDWVDAIdentityRegistryEntryParm(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<object>.Enumerate_TDWVDAIdentityRegistryEntryParm(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                return value;
            }
            TDWVDAPostInvocationParameters ITypeConverter<object>.ConvertTo_TDWVDAPostInvocationParameters(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<object>.Enumerate_TDWVDAPostInvocationParameters(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                return value;
            }
            TDWVDARevocationListEntryParm ITypeConverter<object>.ConvertTo_TDWVDARevocationListEntryParm(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<object>.Enumerate_TDWVDARevocationListEntryParm(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                return value;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<object>.ConvertTo_TDWVDAServiceEndpointEntryParm(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<object>.Enumerate_TDWVDAServiceEndpointEntryParm(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
            {
                return value;
            }
            TDWVDASmartContractEntryClaims ITypeConverter<object>.ConvertTo_TDWVDASmartContractEntryClaims(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<object>.Enumerate_TDWVDASmartContractEntryClaims(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
            {
                return value;
            }
            TDWVDASmartContractEntryContent ITypeConverter<object>.ConvertTo_TDWVDASmartContractEntryContent(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TDWVDASmartContractEntryContent()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<object>.Enumerate_TDWVDASmartContractEntryContent(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
            {
                return value;
            }
            TDWVDASmartContractEntryEnvelope ITypeConverter<object>.ConvertTo_TDWVDASmartContractEntryEnvelope(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<object>.Enumerate_TDWVDASmartContractEntryEnvelope(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                return value;
            }
            TRAClaim ITypeConverter<object>.ConvertTo_TRAClaim(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TRAClaim()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TRAClaim> ITypeConverter<object>.Enumerate_TRAClaim(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TRACredential_Content(TRACredential_Content value)
            {
                return value;
            }
            TRACredential_Content ITypeConverter<object>.ConvertTo_TRACredential_Content(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TRACredential_Content()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TRACredential_Content> ITypeConverter<object>.Enumerate_TRACredential_Content(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                return value;
            }
            TRACredential_Envelope ITypeConverter<object>.ConvertTo_TRACredential_Envelope(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TRACredential_Envelope()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TRACredential_Envelope> ITypeConverter<object>.Enumerate_TRACredential_Envelope(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                return value;
            }
            TRACredential_EnvelopeSeal ITypeConverter<object>.ConvertTo_TRACredential_EnvelopeSeal(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<object>.Enumerate_TRACredential_EnvelopeSeal(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TRACredential_Label(TRACredential_Label value)
            {
                return value;
            }
            TRACredential_Label ITypeConverter<object>.ConvertTo_TRACredential_Label(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TRACredential_Label()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TRACredential_Label> ITypeConverter<object>.Enumerate_TRACredential_Label(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                return value;
            }
            TRAKeyValuePair ITypeConverter<object>.ConvertTo_TRAKeyValuePair(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TRAKeyValuePair()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TRAKeyValuePair> ITypeConverter<object>.Enumerate_TRAKeyValuePair(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                return value;
            }
            TRACredentialType ITypeConverter<object>.ConvertTo_TRACredentialType(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TRACredentialType()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TRACredentialType> ITypeConverter<object>.Enumerate_TRACredentialType(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                return value;
            }
            TRAEncryptionFlag ITypeConverter<object>.ConvertTo_TRAEncryptionFlag(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TRAEncryptionFlag()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TRAEncryptionFlag> ITypeConverter<object>.Enumerate_TRAEncryptionFlag(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                return value;
            }
            TRAServiceType ITypeConverter<object>.ConvertTo_TRAServiceType(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TRAServiceType()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TRAServiceType> ITypeConverter<object>.Enumerate_TRAServiceType(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                return value;
            }
            TRATrustLevel ITypeConverter<object>.ConvertTo_TRATrustLevel(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TRATrustLevel()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TRATrustLevel> ITypeConverter<object>.Enumerate_TRATrustLevel(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                return value;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<object>.ConvertTo_List_List_TRAKeyValuePair(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                throw new NotImplementedException();
            }
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<object>.Enumerate_List_List_TRAKeyValuePair(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
            {
                return value;
            }
            TDWVDAAccountEntryContent? ITypeConverter<object>.ConvertTo_TDWVDAAccountEntryContent_nullable(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<object>.Enumerate_TDWVDAAccountEntryContent_nullable(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
            {
                return value;
            }
            TDWVDASmartContractEntryContent? ITypeConverter<object>.ConvertTo_TDWVDASmartContractEntryContent_nullable(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<object>.Enumerate_TDWVDASmartContractEntryContent_nullable(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TRACredential_Content_nullable(TRACredential_Content? value)
            {
                return value;
            }
            TRACredential_Content? ITypeConverter<object>.ConvertTo_TRACredential_Content_nullable(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TRACredential_Content_nullable()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TRACredential_Content?> ITypeConverter<object>.Enumerate_TRACredential_Content_nullable(object value)
            {
                throw new NotImplementedException();
            }
            
        }
        internal static readonly ITypeConverter<T> s_type_converter = new _TypeConverterImpl() as ITypeConverter<T> ?? new TypeConverter<T>();
        #region Default implementation
        
        T ITypeConverter<T>.ConvertFrom_bool(bool value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        bool ITypeConverter<T>.ConvertTo_bool(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_bool()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<bool> ITypeConverter<T>.Enumerate_bool(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_long(long value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        long ITypeConverter<T>.ConvertTo_long(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_long()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<long> ITypeConverter<T>.Enumerate_long(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_string(string value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        string ITypeConverter<T>.ConvertTo_string(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_string()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<string> ITypeConverter<T>.Enumerate_string(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_List_string(List<string> value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        List<string> ITypeConverter<T>.ConvertTo_List_string(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_List_string()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<List<string>> ITypeConverter<T>.Enumerate_List_string(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        List<TRAClaim> ITypeConverter<T>.ConvertTo_List_TRAClaim(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_List_TRAClaim()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<List<TRAClaim>> ITypeConverter<T>.Enumerate_List_TRAClaim(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        List<TRAKeyValuePair> ITypeConverter<T>.ConvertTo_List_TRAKeyValuePair(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_List_TRAKeyValuePair()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<List<TRAKeyValuePair>> ITypeConverter<T>.Enumerate_List_TRAKeyValuePair(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TDWVDAAccountEntryClaims ITypeConverter<T>.ConvertTo_TDWVDAAccountEntryClaims(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TDWVDAAccountEntryClaims()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TDWVDAAccountEntryClaims> ITypeConverter<T>.Enumerate_TDWVDAAccountEntryClaims(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TDWVDAAccountEntryContent ITypeConverter<T>.ConvertTo_TDWVDAAccountEntryContent(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TDWVDAAccountEntryContent()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TDWVDAAccountEntryContent> ITypeConverter<T>.Enumerate_TDWVDAAccountEntryContent(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TDWVDAAccountEntryEnvelope ITypeConverter<T>.ConvertTo_TDWVDAAccountEntryEnvelope(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TDWVDAAccountEntryEnvelope()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TDWVDAAccountEntryEnvelope> ITypeConverter<T>.Enumerate_TDWVDAAccountEntryEnvelope(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TDWVDAIdentityRegistryEntryParm ITypeConverter<T>.ConvertTo_TDWVDAIdentityRegistryEntryParm(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<T>.Enumerate_TDWVDAIdentityRegistryEntryParm(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TDWVDAPostInvocationParameters ITypeConverter<T>.ConvertTo_TDWVDAPostInvocationParameters(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TDWVDAPostInvocationParameters()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<T>.Enumerate_TDWVDAPostInvocationParameters(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TDWVDARevocationListEntryParm ITypeConverter<T>.ConvertTo_TDWVDARevocationListEntryParm(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TDWVDARevocationListEntryParm()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<T>.Enumerate_TDWVDARevocationListEntryParm(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TDWVDAServiceEndpointEntryParm ITypeConverter<T>.ConvertTo_TDWVDAServiceEndpointEntryParm(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<T>.Enumerate_TDWVDAServiceEndpointEntryParm(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TDWVDASmartContractEntryClaims ITypeConverter<T>.ConvertTo_TDWVDASmartContractEntryClaims(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TDWVDASmartContractEntryClaims()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TDWVDASmartContractEntryClaims> ITypeConverter<T>.Enumerate_TDWVDASmartContractEntryClaims(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TDWVDASmartContractEntryContent ITypeConverter<T>.ConvertTo_TDWVDASmartContractEntryContent(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TDWVDASmartContractEntryContent()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TDWVDASmartContractEntryContent> ITypeConverter<T>.Enumerate_TDWVDASmartContractEntryContent(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TDWVDASmartContractEntryEnvelope ITypeConverter<T>.ConvertTo_TDWVDASmartContractEntryEnvelope(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TDWVDASmartContractEntryEnvelope> ITypeConverter<T>.Enumerate_TDWVDASmartContractEntryEnvelope(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TRAClaim(TRAClaim value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TRAClaim ITypeConverter<T>.ConvertTo_TRAClaim(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TRAClaim()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TRAClaim> ITypeConverter<T>.Enumerate_TRAClaim(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TRACredential_Content(TRACredential_Content value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TRACredential_Content ITypeConverter<T>.ConvertTo_TRACredential_Content(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TRACredential_Content()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TRACredential_Content> ITypeConverter<T>.Enumerate_TRACredential_Content(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TRACredential_Envelope ITypeConverter<T>.ConvertTo_TRACredential_Envelope(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TRACredential_Envelope()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TRACredential_Envelope> ITypeConverter<T>.Enumerate_TRACredential_Envelope(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TRACredential_EnvelopeSeal ITypeConverter<T>.ConvertTo_TRACredential_EnvelopeSeal(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TRACredential_EnvelopeSeal()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<T>.Enumerate_TRACredential_EnvelopeSeal(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TRACredential_Label(TRACredential_Label value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TRACredential_Label ITypeConverter<T>.ConvertTo_TRACredential_Label(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TRACredential_Label()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TRACredential_Label> ITypeConverter<T>.Enumerate_TRACredential_Label(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TRAKeyValuePair ITypeConverter<T>.ConvertTo_TRAKeyValuePair(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TRAKeyValuePair()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TRAKeyValuePair> ITypeConverter<T>.Enumerate_TRAKeyValuePair(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TRACredentialType(TRACredentialType value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TRACredentialType ITypeConverter<T>.ConvertTo_TRACredentialType(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TRACredentialType()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TRACredentialType> ITypeConverter<T>.Enumerate_TRACredentialType(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TRAEncryptionFlag ITypeConverter<T>.ConvertTo_TRAEncryptionFlag(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TRAEncryptionFlag()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TRAEncryptionFlag> ITypeConverter<T>.Enumerate_TRAEncryptionFlag(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TRAServiceType(TRAServiceType value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TRAServiceType ITypeConverter<T>.ConvertTo_TRAServiceType(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TRAServiceType()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TRAServiceType> ITypeConverter<T>.Enumerate_TRAServiceType(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TRATrustLevel ITypeConverter<T>.ConvertTo_TRATrustLevel(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TRATrustLevel()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TRATrustLevel> ITypeConverter<T>.Enumerate_TRATrustLevel(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        List<List<TRAKeyValuePair>> ITypeConverter<T>.ConvertTo_List_List_TRAKeyValuePair(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_List_List_TRAKeyValuePair()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<T>.Enumerate_List_List_TRAKeyValuePair(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TDWVDAAccountEntryContent? ITypeConverter<T>.ConvertTo_TDWVDAAccountEntryContent_nullable(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TDWVDAAccountEntryContent?> ITypeConverter<T>.Enumerate_TDWVDAAccountEntryContent_nullable(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TDWVDASmartContractEntryContent? ITypeConverter<T>.ConvertTo_TDWVDASmartContractEntryContent_nullable(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TDWVDASmartContractEntryContent?> ITypeConverter<T>.Enumerate_TDWVDASmartContractEntryContent_nullable(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TRACredential_Content_nullable(TRACredential_Content? value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TRACredential_Content? ITypeConverter<T>.ConvertTo_TRACredential_Content_nullable(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TRACredential_Content_nullable()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TRACredential_Content?> ITypeConverter<T>.Enumerate_TRACredential_Content_nullable(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        #endregion
        internal static readonly uint type_id = TypeSystem.GetTypeID(typeof(T));
        
        internal static T ConvertFrom_bool(bool value)
        {
            return s_type_converter.ConvertFrom_bool(value);
        }
        internal static bool ConvertTo_bool(T value)
        {
            return s_type_converter.ConvertTo_bool(value);
        }
        internal static TypeConversionAction GetConversionActionTo_bool()
        {
            return s_type_converter.GetConversionActionTo_bool();
        }
        internal static IEnumerable<bool> Enumerate_bool(T value)
        {
            return s_type_converter.Enumerate_bool(value);
        }
        
        internal static T ConvertFrom_long(long value)
        {
            return s_type_converter.ConvertFrom_long(value);
        }
        internal static long ConvertTo_long(T value)
        {
            return s_type_converter.ConvertTo_long(value);
        }
        internal static TypeConversionAction GetConversionActionTo_long()
        {
            return s_type_converter.GetConversionActionTo_long();
        }
        internal static IEnumerable<long> Enumerate_long(T value)
        {
            return s_type_converter.Enumerate_long(value);
        }
        
        internal static T ConvertFrom_string(string value)
        {
            return s_type_converter.ConvertFrom_string(value);
        }
        internal static string ConvertTo_string(T value)
        {
            return s_type_converter.ConvertTo_string(value);
        }
        internal static TypeConversionAction GetConversionActionTo_string()
        {
            return s_type_converter.GetConversionActionTo_string();
        }
        internal static IEnumerable<string> Enumerate_string(T value)
        {
            return s_type_converter.Enumerate_string(value);
        }
        
        internal static T ConvertFrom_List_string(List<string> value)
        {
            return s_type_converter.ConvertFrom_List_string(value);
        }
        internal static List<string> ConvertTo_List_string(T value)
        {
            return s_type_converter.ConvertTo_List_string(value);
        }
        internal static TypeConversionAction GetConversionActionTo_List_string()
        {
            return s_type_converter.GetConversionActionTo_List_string();
        }
        internal static IEnumerable<List<string>> Enumerate_List_string(T value)
        {
            return s_type_converter.Enumerate_List_string(value);
        }
        
        internal static T ConvertFrom_List_TRAClaim(List<TRAClaim> value)
        {
            return s_type_converter.ConvertFrom_List_TRAClaim(value);
        }
        internal static List<TRAClaim> ConvertTo_List_TRAClaim(T value)
        {
            return s_type_converter.ConvertTo_List_TRAClaim(value);
        }
        internal static TypeConversionAction GetConversionActionTo_List_TRAClaim()
        {
            return s_type_converter.GetConversionActionTo_List_TRAClaim();
        }
        internal static IEnumerable<List<TRAClaim>> Enumerate_List_TRAClaim(T value)
        {
            return s_type_converter.Enumerate_List_TRAClaim(value);
        }
        
        internal static T ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
        {
            return s_type_converter.ConvertFrom_List_TRAKeyValuePair(value);
        }
        internal static List<TRAKeyValuePair> ConvertTo_List_TRAKeyValuePair(T value)
        {
            return s_type_converter.ConvertTo_List_TRAKeyValuePair(value);
        }
        internal static TypeConversionAction GetConversionActionTo_List_TRAKeyValuePair()
        {
            return s_type_converter.GetConversionActionTo_List_TRAKeyValuePair();
        }
        internal static IEnumerable<List<TRAKeyValuePair>> Enumerate_List_TRAKeyValuePair(T value)
        {
            return s_type_converter.Enumerate_List_TRAKeyValuePair(value);
        }
        
        internal static T ConvertFrom_TDWVDAAccountEntryClaims(TDWVDAAccountEntryClaims value)
        {
            return s_type_converter.ConvertFrom_TDWVDAAccountEntryClaims(value);
        }
        internal static TDWVDAAccountEntryClaims ConvertTo_TDWVDAAccountEntryClaims(T value)
        {
            return s_type_converter.ConvertTo_TDWVDAAccountEntryClaims(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TDWVDAAccountEntryClaims()
        {
            return s_type_converter.GetConversionActionTo_TDWVDAAccountEntryClaims();
        }
        internal static IEnumerable<TDWVDAAccountEntryClaims> Enumerate_TDWVDAAccountEntryClaims(T value)
        {
            return s_type_converter.Enumerate_TDWVDAAccountEntryClaims(value);
        }
        
        internal static T ConvertFrom_TDWVDAAccountEntryContent(TDWVDAAccountEntryContent value)
        {
            return s_type_converter.ConvertFrom_TDWVDAAccountEntryContent(value);
        }
        internal static TDWVDAAccountEntryContent ConvertTo_TDWVDAAccountEntryContent(T value)
        {
            return s_type_converter.ConvertTo_TDWVDAAccountEntryContent(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TDWVDAAccountEntryContent()
        {
            return s_type_converter.GetConversionActionTo_TDWVDAAccountEntryContent();
        }
        internal static IEnumerable<TDWVDAAccountEntryContent> Enumerate_TDWVDAAccountEntryContent(T value)
        {
            return s_type_converter.Enumerate_TDWVDAAccountEntryContent(value);
        }
        
        internal static T ConvertFrom_TDWVDAAccountEntryEnvelope(TDWVDAAccountEntryEnvelope value)
        {
            return s_type_converter.ConvertFrom_TDWVDAAccountEntryEnvelope(value);
        }
        internal static TDWVDAAccountEntryEnvelope ConvertTo_TDWVDAAccountEntryEnvelope(T value)
        {
            return s_type_converter.ConvertTo_TDWVDAAccountEntryEnvelope(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TDWVDAAccountEntryEnvelope()
        {
            return s_type_converter.GetConversionActionTo_TDWVDAAccountEntryEnvelope();
        }
        internal static IEnumerable<TDWVDAAccountEntryEnvelope> Enumerate_TDWVDAAccountEntryEnvelope(T value)
        {
            return s_type_converter.Enumerate_TDWVDAAccountEntryEnvelope(value);
        }
        
        internal static T ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
        {
            return s_type_converter.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
        }
        internal static TDWVDAIdentityRegistryEntryParm ConvertTo_TDWVDAIdentityRegistryEntryParm(T value)
        {
            return s_type_converter.ConvertTo_TDWVDAIdentityRegistryEntryParm(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
        {
            return s_type_converter.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm();
        }
        internal static IEnumerable<TDWVDAIdentityRegistryEntryParm> Enumerate_TDWVDAIdentityRegistryEntryParm(T value)
        {
            return s_type_converter.Enumerate_TDWVDAIdentityRegistryEntryParm(value);
        }
        
        internal static T ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
        {
            return s_type_converter.ConvertFrom_TDWVDAPostInvocationParameters(value);
        }
        internal static TDWVDAPostInvocationParameters ConvertTo_TDWVDAPostInvocationParameters(T value)
        {
            return s_type_converter.ConvertTo_TDWVDAPostInvocationParameters(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TDWVDAPostInvocationParameters()
        {
            return s_type_converter.GetConversionActionTo_TDWVDAPostInvocationParameters();
        }
        internal static IEnumerable<TDWVDAPostInvocationParameters> Enumerate_TDWVDAPostInvocationParameters(T value)
        {
            return s_type_converter.Enumerate_TDWVDAPostInvocationParameters(value);
        }
        
        internal static T ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
        {
            return s_type_converter.ConvertFrom_TDWVDARevocationListEntryParm(value);
        }
        internal static TDWVDARevocationListEntryParm ConvertTo_TDWVDARevocationListEntryParm(T value)
        {
            return s_type_converter.ConvertTo_TDWVDARevocationListEntryParm(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TDWVDARevocationListEntryParm()
        {
            return s_type_converter.GetConversionActionTo_TDWVDARevocationListEntryParm();
        }
        internal static IEnumerable<TDWVDARevocationListEntryParm> Enumerate_TDWVDARevocationListEntryParm(T value)
        {
            return s_type_converter.Enumerate_TDWVDARevocationListEntryParm(value);
        }
        
        internal static T ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
        {
            return s_type_converter.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
        }
        internal static TDWVDAServiceEndpointEntryParm ConvertTo_TDWVDAServiceEndpointEntryParm(T value)
        {
            return s_type_converter.ConvertTo_TDWVDAServiceEndpointEntryParm(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
        {
            return s_type_converter.GetConversionActionTo_TDWVDAServiceEndpointEntryParm();
        }
        internal static IEnumerable<TDWVDAServiceEndpointEntryParm> Enumerate_TDWVDAServiceEndpointEntryParm(T value)
        {
            return s_type_converter.Enumerate_TDWVDAServiceEndpointEntryParm(value);
        }
        
        internal static T ConvertFrom_TDWVDASmartContractEntryClaims(TDWVDASmartContractEntryClaims value)
        {
            return s_type_converter.ConvertFrom_TDWVDASmartContractEntryClaims(value);
        }
        internal static TDWVDASmartContractEntryClaims ConvertTo_TDWVDASmartContractEntryClaims(T value)
        {
            return s_type_converter.ConvertTo_TDWVDASmartContractEntryClaims(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TDWVDASmartContractEntryClaims()
        {
            return s_type_converter.GetConversionActionTo_TDWVDASmartContractEntryClaims();
        }
        internal static IEnumerable<TDWVDASmartContractEntryClaims> Enumerate_TDWVDASmartContractEntryClaims(T value)
        {
            return s_type_converter.Enumerate_TDWVDASmartContractEntryClaims(value);
        }
        
        internal static T ConvertFrom_TDWVDASmartContractEntryContent(TDWVDASmartContractEntryContent value)
        {
            return s_type_converter.ConvertFrom_TDWVDASmartContractEntryContent(value);
        }
        internal static TDWVDASmartContractEntryContent ConvertTo_TDWVDASmartContractEntryContent(T value)
        {
            return s_type_converter.ConvertTo_TDWVDASmartContractEntryContent(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TDWVDASmartContractEntryContent()
        {
            return s_type_converter.GetConversionActionTo_TDWVDASmartContractEntryContent();
        }
        internal static IEnumerable<TDWVDASmartContractEntryContent> Enumerate_TDWVDASmartContractEntryContent(T value)
        {
            return s_type_converter.Enumerate_TDWVDASmartContractEntryContent(value);
        }
        
        internal static T ConvertFrom_TDWVDASmartContractEntryEnvelope(TDWVDASmartContractEntryEnvelope value)
        {
            return s_type_converter.ConvertFrom_TDWVDASmartContractEntryEnvelope(value);
        }
        internal static TDWVDASmartContractEntryEnvelope ConvertTo_TDWVDASmartContractEntryEnvelope(T value)
        {
            return s_type_converter.ConvertTo_TDWVDASmartContractEntryEnvelope(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TDWVDASmartContractEntryEnvelope()
        {
            return s_type_converter.GetConversionActionTo_TDWVDASmartContractEntryEnvelope();
        }
        internal static IEnumerable<TDWVDASmartContractEntryEnvelope> Enumerate_TDWVDASmartContractEntryEnvelope(T value)
        {
            return s_type_converter.Enumerate_TDWVDASmartContractEntryEnvelope(value);
        }
        
        internal static T ConvertFrom_TRAClaim(TRAClaim value)
        {
            return s_type_converter.ConvertFrom_TRAClaim(value);
        }
        internal static TRAClaim ConvertTo_TRAClaim(T value)
        {
            return s_type_converter.ConvertTo_TRAClaim(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TRAClaim()
        {
            return s_type_converter.GetConversionActionTo_TRAClaim();
        }
        internal static IEnumerable<TRAClaim> Enumerate_TRAClaim(T value)
        {
            return s_type_converter.Enumerate_TRAClaim(value);
        }
        
        internal static T ConvertFrom_TRACredential_Content(TRACredential_Content value)
        {
            return s_type_converter.ConvertFrom_TRACredential_Content(value);
        }
        internal static TRACredential_Content ConvertTo_TRACredential_Content(T value)
        {
            return s_type_converter.ConvertTo_TRACredential_Content(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TRACredential_Content()
        {
            return s_type_converter.GetConversionActionTo_TRACredential_Content();
        }
        internal static IEnumerable<TRACredential_Content> Enumerate_TRACredential_Content(T value)
        {
            return s_type_converter.Enumerate_TRACredential_Content(value);
        }
        
        internal static T ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
        {
            return s_type_converter.ConvertFrom_TRACredential_Envelope(value);
        }
        internal static TRACredential_Envelope ConvertTo_TRACredential_Envelope(T value)
        {
            return s_type_converter.ConvertTo_TRACredential_Envelope(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TRACredential_Envelope()
        {
            return s_type_converter.GetConversionActionTo_TRACredential_Envelope();
        }
        internal static IEnumerable<TRACredential_Envelope> Enumerate_TRACredential_Envelope(T value)
        {
            return s_type_converter.Enumerate_TRACredential_Envelope(value);
        }
        
        internal static T ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
        {
            return s_type_converter.ConvertFrom_TRACredential_EnvelopeSeal(value);
        }
        internal static TRACredential_EnvelopeSeal ConvertTo_TRACredential_EnvelopeSeal(T value)
        {
            return s_type_converter.ConvertTo_TRACredential_EnvelopeSeal(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TRACredential_EnvelopeSeal()
        {
            return s_type_converter.GetConversionActionTo_TRACredential_EnvelopeSeal();
        }
        internal static IEnumerable<TRACredential_EnvelopeSeal> Enumerate_TRACredential_EnvelopeSeal(T value)
        {
            return s_type_converter.Enumerate_TRACredential_EnvelopeSeal(value);
        }
        
        internal static T ConvertFrom_TRACredential_Label(TRACredential_Label value)
        {
            return s_type_converter.ConvertFrom_TRACredential_Label(value);
        }
        internal static TRACredential_Label ConvertTo_TRACredential_Label(T value)
        {
            return s_type_converter.ConvertTo_TRACredential_Label(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TRACredential_Label()
        {
            return s_type_converter.GetConversionActionTo_TRACredential_Label();
        }
        internal static IEnumerable<TRACredential_Label> Enumerate_TRACredential_Label(T value)
        {
            return s_type_converter.Enumerate_TRACredential_Label(value);
        }
        
        internal static T ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
        {
            return s_type_converter.ConvertFrom_TRAKeyValuePair(value);
        }
        internal static TRAKeyValuePair ConvertTo_TRAKeyValuePair(T value)
        {
            return s_type_converter.ConvertTo_TRAKeyValuePair(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TRAKeyValuePair()
        {
            return s_type_converter.GetConversionActionTo_TRAKeyValuePair();
        }
        internal static IEnumerable<TRAKeyValuePair> Enumerate_TRAKeyValuePair(T value)
        {
            return s_type_converter.Enumerate_TRAKeyValuePair(value);
        }
        
        internal static T ConvertFrom_TRACredentialType(TRACredentialType value)
        {
            return s_type_converter.ConvertFrom_TRACredentialType(value);
        }
        internal static TRACredentialType ConvertTo_TRACredentialType(T value)
        {
            return s_type_converter.ConvertTo_TRACredentialType(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TRACredentialType()
        {
            return s_type_converter.GetConversionActionTo_TRACredentialType();
        }
        internal static IEnumerable<TRACredentialType> Enumerate_TRACredentialType(T value)
        {
            return s_type_converter.Enumerate_TRACredentialType(value);
        }
        
        internal static T ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
        {
            return s_type_converter.ConvertFrom_TRAEncryptionFlag(value);
        }
        internal static TRAEncryptionFlag ConvertTo_TRAEncryptionFlag(T value)
        {
            return s_type_converter.ConvertTo_TRAEncryptionFlag(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TRAEncryptionFlag()
        {
            return s_type_converter.GetConversionActionTo_TRAEncryptionFlag();
        }
        internal static IEnumerable<TRAEncryptionFlag> Enumerate_TRAEncryptionFlag(T value)
        {
            return s_type_converter.Enumerate_TRAEncryptionFlag(value);
        }
        
        internal static T ConvertFrom_TRAServiceType(TRAServiceType value)
        {
            return s_type_converter.ConvertFrom_TRAServiceType(value);
        }
        internal static TRAServiceType ConvertTo_TRAServiceType(T value)
        {
            return s_type_converter.ConvertTo_TRAServiceType(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TRAServiceType()
        {
            return s_type_converter.GetConversionActionTo_TRAServiceType();
        }
        internal static IEnumerable<TRAServiceType> Enumerate_TRAServiceType(T value)
        {
            return s_type_converter.Enumerate_TRAServiceType(value);
        }
        
        internal static T ConvertFrom_TRATrustLevel(TRATrustLevel value)
        {
            return s_type_converter.ConvertFrom_TRATrustLevel(value);
        }
        internal static TRATrustLevel ConvertTo_TRATrustLevel(T value)
        {
            return s_type_converter.ConvertTo_TRATrustLevel(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TRATrustLevel()
        {
            return s_type_converter.GetConversionActionTo_TRATrustLevel();
        }
        internal static IEnumerable<TRATrustLevel> Enumerate_TRATrustLevel(T value)
        {
            return s_type_converter.Enumerate_TRATrustLevel(value);
        }
        
        internal static T ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
        {
            return s_type_converter.ConvertFrom_List_List_TRAKeyValuePair(value);
        }
        internal static List<List<TRAKeyValuePair>> ConvertTo_List_List_TRAKeyValuePair(T value)
        {
            return s_type_converter.ConvertTo_List_List_TRAKeyValuePair(value);
        }
        internal static TypeConversionAction GetConversionActionTo_List_List_TRAKeyValuePair()
        {
            return s_type_converter.GetConversionActionTo_List_List_TRAKeyValuePair();
        }
        internal static IEnumerable<List<List<TRAKeyValuePair>>> Enumerate_List_List_TRAKeyValuePair(T value)
        {
            return s_type_converter.Enumerate_List_List_TRAKeyValuePair(value);
        }
        
        internal static T ConvertFrom_TDWVDAAccountEntryContent_nullable(TDWVDAAccountEntryContent? value)
        {
            return s_type_converter.ConvertFrom_TDWVDAAccountEntryContent_nullable(value);
        }
        internal static TDWVDAAccountEntryContent? ConvertTo_TDWVDAAccountEntryContent_nullable(T value)
        {
            return s_type_converter.ConvertTo_TDWVDAAccountEntryContent_nullable(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TDWVDAAccountEntryContent_nullable()
        {
            return s_type_converter.GetConversionActionTo_TDWVDAAccountEntryContent_nullable();
        }
        internal static IEnumerable<TDWVDAAccountEntryContent?> Enumerate_TDWVDAAccountEntryContent_nullable(T value)
        {
            return s_type_converter.Enumerate_TDWVDAAccountEntryContent_nullable(value);
        }
        
        internal static T ConvertFrom_TDWVDASmartContractEntryContent_nullable(TDWVDASmartContractEntryContent? value)
        {
            return s_type_converter.ConvertFrom_TDWVDASmartContractEntryContent_nullable(value);
        }
        internal static TDWVDASmartContractEntryContent? ConvertTo_TDWVDASmartContractEntryContent_nullable(T value)
        {
            return s_type_converter.ConvertTo_TDWVDASmartContractEntryContent_nullable(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TDWVDASmartContractEntryContent_nullable()
        {
            return s_type_converter.GetConversionActionTo_TDWVDASmartContractEntryContent_nullable();
        }
        internal static IEnumerable<TDWVDASmartContractEntryContent?> Enumerate_TDWVDASmartContractEntryContent_nullable(T value)
        {
            return s_type_converter.Enumerate_TDWVDASmartContractEntryContent_nullable(value);
        }
        
        internal static T ConvertFrom_TRACredential_Content_nullable(TRACredential_Content? value)
        {
            return s_type_converter.ConvertFrom_TRACredential_Content_nullable(value);
        }
        internal static TRACredential_Content? ConvertTo_TRACredential_Content_nullable(T value)
        {
            return s_type_converter.ConvertTo_TRACredential_Content_nullable(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TRACredential_Content_nullable()
        {
            return s_type_converter.GetConversionActionTo_TRACredential_Content_nullable();
        }
        internal static IEnumerable<TRACredential_Content?> Enumerate_TRACredential_Content_nullable(T value)
        {
            return s_type_converter.Enumerate_TRACredential_Content_nullable(value);
        }
        
    }
}

#pragma warning restore 162,168,649,660,661,1522
