#pragma warning disable 162,168,649,660,661,1522

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Trinity.TSL;
using Trinity.TSL.Lib;
namespace TDW.VDAServer
{
    internal class TypeSystem
    {
        #region TypeID lookup table
        private static Dictionary<Type, uint> TypeIDLookupTable = new Dictionary<Type, uint>()
        {
            
            { typeof(bool), 0 }
            ,
            { typeof(long), 1 }
            ,
            { typeof(string), 2 }
            ,
            { typeof(List<string>), 3 }
            ,
            { typeof(List<TRAKeyValuePair>), 4 }
            ,
            { typeof(TDWVDAAccountEntry_Claims), 5 }
            ,
            { typeof(TDWVDAAccountEntry_Envelope), 6 }
            ,
            { typeof(TDWVDAAccountEntry_EnvelopeContent), 7 }
            ,
            { typeof(TDWVDAIdentityRegistryEntryParm), 8 }
            ,
            { typeof(TDWVDAPostInvocationParameters), 9 }
            ,
            { typeof(TDWVDARevocationListEntryParm), 10 }
            ,
            { typeof(TDWVDAServiceEndpointEntryParm), 11 }
            ,
            { typeof(TDWVDASmartContractEntry_Claims), 12 }
            ,
            { typeof(TDWVDASmartContractEntry_Envelope), 13 }
            ,
            { typeof(TDWVDASmartContractEntry_EnvelopeContent), 14 }
            ,
            { typeof(TRAClaim), 15 }
            ,
            { typeof(TRACredential_Envelope), 16 }
            ,
            { typeof(TRACredential_EnvelopeContent), 17 }
            ,
            { typeof(TRACredential_EnvelopeLabel), 18 }
            ,
            { typeof(TRACredential_EnvelopeSeal), 19 }
            ,
            { typeof(TRAEncryptedClaims), 20 }
            ,
            { typeof(TRAKeyValuePair), 21 }
            ,
            { typeof(TRACredentialType), 22 }
            ,
            { typeof(TRAEncryptionFlag), 23 }
            ,
            { typeof(TRAServiceType), 24 }
            ,
            { typeof(TRATrustLevel), 25 }
            ,
            { typeof(List<List<TRAKeyValuePair>>), 27 }
            ,
            { typeof(List<TRAClaim>), 28 }
            ,
            { typeof(TDWVDAAccountEntry_Claims?), 30 }
            ,
            { typeof(TDWVDAAccountEntry_EnvelopeContent?), 31 }
            ,
            { typeof(TDWVDASmartContractEntry_Claims?), 32 }
            ,
            { typeof(TDWVDASmartContractEntry_EnvelopeContent?), 33 }
            ,
            { typeof(TRAEncryptedClaims?), 34 }
            ,
        };
        #endregion
        #region CellTypeID lookup table
        private static Dictionary<Type, uint> CellTypeIDLookupTable = new Dictionary<Type, uint>()
        {
            
            { typeof(TRACredential_Cell), 0 }
            ,
            { typeof(TDWVDAAccountEntry_Cell), 1 }
            ,
            { typeof(TDWVDASmartContractEntry_Cell), 2 }
            
        };
        #endregion
        internal static uint GetTypeID(Type t)
        {
            uint type_id;
            if (!TypeIDLookupTable.TryGetValue(t, out type_id))
                type_id = uint.MaxValue;
            return type_id;
        }
        internal static uint GetCellTypeID(Type t)
        {
            uint type_id;
            if (!CellTypeIDLookupTable.TryGetValue(t, out type_id))
                throw new Exception("Type " + t.ToString() + " is not a cell.");
            return type_id;
        }
    }
    internal enum TypeConversionAction
    {
        TC_NONCONVERTIBLE = 0,
        TC_ASSIGN,
        TC_TOSTRING,
        TC_PARSESTRING,
        TC_TOBOOL,
        TC_CONVERTLIST,
        TC_WRAPINLIST,
        TC_ARRAYTOLIST,
        TC_EXTRACTNULLABLE,
    }
    internal interface ITypeConverter<T>
    {
        
        T ConvertFrom_bool(bool value);
        bool ConvertTo_bool(T value);
        TypeConversionAction GetConversionActionTo_bool();
        IEnumerable<bool> Enumerate_bool(T value);
        
        T ConvertFrom_long(long value);
        long ConvertTo_long(T value);
        TypeConversionAction GetConversionActionTo_long();
        IEnumerable<long> Enumerate_long(T value);
        
        T ConvertFrom_string(string value);
        string ConvertTo_string(T value);
        TypeConversionAction GetConversionActionTo_string();
        IEnumerable<string> Enumerate_string(T value);
        
        T ConvertFrom_List_string(List<string> value);
        List<string> ConvertTo_List_string(T value);
        TypeConversionAction GetConversionActionTo_List_string();
        IEnumerable<List<string>> Enumerate_List_string(T value);
        
        T ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value);
        List<TRAKeyValuePair> ConvertTo_List_TRAKeyValuePair(T value);
        TypeConversionAction GetConversionActionTo_List_TRAKeyValuePair();
        IEnumerable<List<TRAKeyValuePair>> Enumerate_List_TRAKeyValuePair(T value);
        
        T ConvertFrom_TDWVDAAccountEntry_Claims(TDWVDAAccountEntry_Claims value);
        TDWVDAAccountEntry_Claims ConvertTo_TDWVDAAccountEntry_Claims(T value);
        TypeConversionAction GetConversionActionTo_TDWVDAAccountEntry_Claims();
        IEnumerable<TDWVDAAccountEntry_Claims> Enumerate_TDWVDAAccountEntry_Claims(T value);
        
        T ConvertFrom_TDWVDAAccountEntry_Envelope(TDWVDAAccountEntry_Envelope value);
        TDWVDAAccountEntry_Envelope ConvertTo_TDWVDAAccountEntry_Envelope(T value);
        TypeConversionAction GetConversionActionTo_TDWVDAAccountEntry_Envelope();
        IEnumerable<TDWVDAAccountEntry_Envelope> Enumerate_TDWVDAAccountEntry_Envelope(T value);
        
        T ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(TDWVDAAccountEntry_EnvelopeContent value);
        TDWVDAAccountEntry_EnvelopeContent ConvertTo_TDWVDAAccountEntry_EnvelopeContent(T value);
        TypeConversionAction GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent();
        IEnumerable<TDWVDAAccountEntry_EnvelopeContent> Enumerate_TDWVDAAccountEntry_EnvelopeContent(T value);
        
        T ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value);
        TDWVDAIdentityRegistryEntryParm ConvertTo_TDWVDAIdentityRegistryEntryParm(T value);
        TypeConversionAction GetConversionActionTo_TDWVDAIdentityRegistryEntryParm();
        IEnumerable<TDWVDAIdentityRegistryEntryParm> Enumerate_TDWVDAIdentityRegistryEntryParm(T value);
        
        T ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value);
        TDWVDAPostInvocationParameters ConvertTo_TDWVDAPostInvocationParameters(T value);
        TypeConversionAction GetConversionActionTo_TDWVDAPostInvocationParameters();
        IEnumerable<TDWVDAPostInvocationParameters> Enumerate_TDWVDAPostInvocationParameters(T value);
        
        T ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value);
        TDWVDARevocationListEntryParm ConvertTo_TDWVDARevocationListEntryParm(T value);
        TypeConversionAction GetConversionActionTo_TDWVDARevocationListEntryParm();
        IEnumerable<TDWVDARevocationListEntryParm> Enumerate_TDWVDARevocationListEntryParm(T value);
        
        T ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value);
        TDWVDAServiceEndpointEntryParm ConvertTo_TDWVDAServiceEndpointEntryParm(T value);
        TypeConversionAction GetConversionActionTo_TDWVDAServiceEndpointEntryParm();
        IEnumerable<TDWVDAServiceEndpointEntryParm> Enumerate_TDWVDAServiceEndpointEntryParm(T value);
        
        T ConvertFrom_TDWVDASmartContractEntry_Claims(TDWVDASmartContractEntry_Claims value);
        TDWVDASmartContractEntry_Claims ConvertTo_TDWVDASmartContractEntry_Claims(T value);
        TypeConversionAction GetConversionActionTo_TDWVDASmartContractEntry_Claims();
        IEnumerable<TDWVDASmartContractEntry_Claims> Enumerate_TDWVDASmartContractEntry_Claims(T value);
        
        T ConvertFrom_TDWVDASmartContractEntry_Envelope(TDWVDASmartContractEntry_Envelope value);
        TDWVDASmartContractEntry_Envelope ConvertTo_TDWVDASmartContractEntry_Envelope(T value);
        TypeConversionAction GetConversionActionTo_TDWVDASmartContractEntry_Envelope();
        IEnumerable<TDWVDASmartContractEntry_Envelope> Enumerate_TDWVDASmartContractEntry_Envelope(T value);
        
        T ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(TDWVDASmartContractEntry_EnvelopeContent value);
        TDWVDASmartContractEntry_EnvelopeContent ConvertTo_TDWVDASmartContractEntry_EnvelopeContent(T value);
        TypeConversionAction GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent();
        IEnumerable<TDWVDASmartContractEntry_EnvelopeContent> Enumerate_TDWVDASmartContractEntry_EnvelopeContent(T value);
        
        T ConvertFrom_TRAClaim(TRAClaim value);
        TRAClaim ConvertTo_TRAClaim(T value);
        TypeConversionAction GetConversionActionTo_TRAClaim();
        IEnumerable<TRAClaim> Enumerate_TRAClaim(T value);
        
        T ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value);
        TRACredential_Envelope ConvertTo_TRACredential_Envelope(T value);
        TypeConversionAction GetConversionActionTo_TRACredential_Envelope();
        IEnumerable<TRACredential_Envelope> Enumerate_TRACredential_Envelope(T value);
        
        T ConvertFrom_TRACredential_EnvelopeContent(TRACredential_EnvelopeContent value);
        TRACredential_EnvelopeContent ConvertTo_TRACredential_EnvelopeContent(T value);
        TypeConversionAction GetConversionActionTo_TRACredential_EnvelopeContent();
        IEnumerable<TRACredential_EnvelopeContent> Enumerate_TRACredential_EnvelopeContent(T value);
        
        T ConvertFrom_TRACredential_EnvelopeLabel(TRACredential_EnvelopeLabel value);
        TRACredential_EnvelopeLabel ConvertTo_TRACredential_EnvelopeLabel(T value);
        TypeConversionAction GetConversionActionTo_TRACredential_EnvelopeLabel();
        IEnumerable<TRACredential_EnvelopeLabel> Enumerate_TRACredential_EnvelopeLabel(T value);
        
        T ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value);
        TRACredential_EnvelopeSeal ConvertTo_TRACredential_EnvelopeSeal(T value);
        TypeConversionAction GetConversionActionTo_TRACredential_EnvelopeSeal();
        IEnumerable<TRACredential_EnvelopeSeal> Enumerate_TRACredential_EnvelopeSeal(T value);
        
        T ConvertFrom_TRAEncryptedClaims(TRAEncryptedClaims value);
        TRAEncryptedClaims ConvertTo_TRAEncryptedClaims(T value);
        TypeConversionAction GetConversionActionTo_TRAEncryptedClaims();
        IEnumerable<TRAEncryptedClaims> Enumerate_TRAEncryptedClaims(T value);
        
        T ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value);
        TRAKeyValuePair ConvertTo_TRAKeyValuePair(T value);
        TypeConversionAction GetConversionActionTo_TRAKeyValuePair();
        IEnumerable<TRAKeyValuePair> Enumerate_TRAKeyValuePair(T value);
        
        T ConvertFrom_TRACredentialType(TRACredentialType value);
        TRACredentialType ConvertTo_TRACredentialType(T value);
        TypeConversionAction GetConversionActionTo_TRACredentialType();
        IEnumerable<TRACredentialType> Enumerate_TRACredentialType(T value);
        
        T ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value);
        TRAEncryptionFlag ConvertTo_TRAEncryptionFlag(T value);
        TypeConversionAction GetConversionActionTo_TRAEncryptionFlag();
        IEnumerable<TRAEncryptionFlag> Enumerate_TRAEncryptionFlag(T value);
        
        T ConvertFrom_TRAServiceType(TRAServiceType value);
        TRAServiceType ConvertTo_TRAServiceType(T value);
        TypeConversionAction GetConversionActionTo_TRAServiceType();
        IEnumerable<TRAServiceType> Enumerate_TRAServiceType(T value);
        
        T ConvertFrom_TRATrustLevel(TRATrustLevel value);
        TRATrustLevel ConvertTo_TRATrustLevel(T value);
        TypeConversionAction GetConversionActionTo_TRATrustLevel();
        IEnumerable<TRATrustLevel> Enumerate_TRATrustLevel(T value);
        
        T ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value);
        List<List<TRAKeyValuePair>> ConvertTo_List_List_TRAKeyValuePair(T value);
        TypeConversionAction GetConversionActionTo_List_List_TRAKeyValuePair();
        IEnumerable<List<List<TRAKeyValuePair>>> Enumerate_List_List_TRAKeyValuePair(T value);
        
        T ConvertFrom_List_TRAClaim(List<TRAClaim> value);
        List<TRAClaim> ConvertTo_List_TRAClaim(T value);
        TypeConversionAction GetConversionActionTo_List_TRAClaim();
        IEnumerable<List<TRAClaim>> Enumerate_List_TRAClaim(T value);
        
        T ConvertFrom_TDWVDAAccountEntry_Claims_nullable(TDWVDAAccountEntry_Claims? value);
        TDWVDAAccountEntry_Claims? ConvertTo_TDWVDAAccountEntry_Claims_nullable(T value);
        TypeConversionAction GetConversionActionTo_TDWVDAAccountEntry_Claims_nullable();
        IEnumerable<TDWVDAAccountEntry_Claims?> Enumerate_TDWVDAAccountEntry_Claims_nullable(T value);
        
        T ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_EnvelopeContent? value);
        TDWVDAAccountEntry_EnvelopeContent? ConvertTo_TDWVDAAccountEntry_EnvelopeContent_nullable(T value);
        TypeConversionAction GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent_nullable();
        IEnumerable<TDWVDAAccountEntry_EnvelopeContent?> Enumerate_TDWVDAAccountEntry_EnvelopeContent_nullable(T value);
        
        T ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(TDWVDASmartContractEntry_Claims? value);
        TDWVDASmartContractEntry_Claims? ConvertTo_TDWVDASmartContractEntry_Claims_nullable(T value);
        TypeConversionAction GetConversionActionTo_TDWVDASmartContractEntry_Claims_nullable();
        IEnumerable<TDWVDASmartContractEntry_Claims?> Enumerate_TDWVDASmartContractEntry_Claims_nullable(T value);
        
        T ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_EnvelopeContent? value);
        TDWVDASmartContractEntry_EnvelopeContent? ConvertTo_TDWVDASmartContractEntry_EnvelopeContent_nullable(T value);
        TypeConversionAction GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent_nullable();
        IEnumerable<TDWVDASmartContractEntry_EnvelopeContent?> Enumerate_TDWVDASmartContractEntry_EnvelopeContent_nullable(T value);
        
        T ConvertFrom_TRAEncryptedClaims_nullable(TRAEncryptedClaims? value);
        TRAEncryptedClaims? ConvertTo_TRAEncryptedClaims_nullable(T value);
        TypeConversionAction GetConversionActionTo_TRAEncryptedClaims_nullable();
        IEnumerable<TRAEncryptedClaims?> Enumerate_TRAEncryptedClaims_nullable(T value);
        
    }
    internal class TypeConverter<T> : ITypeConverter<T>
    {
        internal class _TypeConverterImpl : ITypeConverter<object>
            
            , ITypeConverter<bool>
        
            , ITypeConverter<long>
        
            , ITypeConverter<string>
        
            , ITypeConverter<List<string>>
        
            , ITypeConverter<List<TRAKeyValuePair>>
        
            , ITypeConverter<TDWVDAAccountEntry_Claims>
        
            , ITypeConverter<TDWVDAAccountEntry_Envelope>
        
            , ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>
        
            , ITypeConverter<TDWVDAIdentityRegistryEntryParm>
        
            , ITypeConverter<TDWVDAPostInvocationParameters>
        
            , ITypeConverter<TDWVDARevocationListEntryParm>
        
            , ITypeConverter<TDWVDAServiceEndpointEntryParm>
        
            , ITypeConverter<TDWVDASmartContractEntry_Claims>
        
            , ITypeConverter<TDWVDASmartContractEntry_Envelope>
        
            , ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>
        
            , ITypeConverter<TRAClaim>
        
            , ITypeConverter<TRACredential_Envelope>
        
            , ITypeConverter<TRACredential_EnvelopeContent>
        
            , ITypeConverter<TRACredential_EnvelopeLabel>
        
            , ITypeConverter<TRACredential_EnvelopeSeal>
        
            , ITypeConverter<TRAEncryptedClaims>
        
            , ITypeConverter<TRAKeyValuePair>
        
            , ITypeConverter<TRACredentialType>
        
            , ITypeConverter<TRAEncryptionFlag>
        
            , ITypeConverter<TRAServiceType>
        
            , ITypeConverter<TRATrustLevel>
        
            , ITypeConverter<List<List<TRAKeyValuePair>>>
        
            , ITypeConverter<List<TRAClaim>>
        
            , ITypeConverter<TDWVDAAccountEntry_Claims?>
        
            , ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>
        
            , ITypeConverter<TDWVDASmartContractEntry_Claims?>
        
            , ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>
        
            , ITypeConverter<TRAEncryptedClaims?>
        
        {
            bool ITypeConverter<bool>.ConvertFrom_bool(bool value)
            {
                
                return (bool)value;
                
            }
            bool ITypeConverter<bool>.ConvertTo_bool(bool value)
            {
                return TypeConverter<bool>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<bool>.Enumerate_bool(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_long(long value)
            {
                
                return (value != 0);
                
            }
            long ITypeConverter<bool>.ConvertTo_long(bool value)
            {
                return TypeConverter<long>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<bool>.Enumerate_long(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    bool intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = ExternalParser.TryParse_bool(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "bool");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<bool>.ConvertTo_string(bool value)
            {
                return TypeConverter<string>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<bool>.Enumerate_string(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'bool'.");
                
            }
            List<string> ITypeConverter<bool>.ConvertTo_List_string(bool value)
            {
                return TypeConverter<List<string>>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<bool>.Enumerate_List_string(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'bool'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<bool>.ConvertTo_List_TRAKeyValuePair(bool value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<bool>.Enumerate_List_TRAKeyValuePair(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TDWVDAAccountEntry_Claims(TDWVDAAccountEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims' to 'bool'.");
                
            }
            TDWVDAAccountEntry_Claims ITypeConverter<bool>.ConvertTo_TDWVDAAccountEntry_Claims(bool value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TDWVDAAccountEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims> ITypeConverter<bool>.Enumerate_TDWVDAAccountEntry_Claims(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TDWVDAAccountEntry_Envelope(TDWVDAAccountEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Envelope' to 'bool'.");
                
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<bool>.ConvertTo_TDWVDAAccountEntry_Envelope(bool value)
            {
                return TypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TDWVDAAccountEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Envelope> ITypeConverter<bool>.Enumerate_TDWVDAAccountEntry_Envelope(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent' to 'bool'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<bool>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent(bool value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent> ITypeConverter<bool>.Enumerate_TDWVDAAccountEntry_EnvelopeContent(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'bool'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<bool>.ConvertTo_TDWVDAIdentityRegistryEntryParm(bool value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<bool>.Enumerate_TDWVDAIdentityRegistryEntryParm(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'bool'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<bool>.ConvertTo_TDWVDAPostInvocationParameters(bool value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<bool>.Enumerate_TDWVDAPostInvocationParameters(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'bool'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<bool>.ConvertTo_TDWVDARevocationListEntryParm(bool value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<bool>.Enumerate_TDWVDARevocationListEntryParm(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'bool'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<bool>.ConvertTo_TDWVDAServiceEndpointEntryParm(bool value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<bool>.Enumerate_TDWVDAServiceEndpointEntryParm(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TDWVDASmartContractEntry_Claims(TDWVDASmartContractEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims' to 'bool'.");
                
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<bool>.ConvertTo_TDWVDASmartContractEntry_Claims(bool value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TDWVDASmartContractEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims> ITypeConverter<bool>.Enumerate_TDWVDASmartContractEntry_Claims(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TDWVDASmartContractEntry_Envelope(TDWVDASmartContractEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Envelope' to 'bool'.");
                
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<bool>.ConvertTo_TDWVDASmartContractEntry_Envelope(bool value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TDWVDASmartContractEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Envelope> ITypeConverter<bool>.Enumerate_TDWVDASmartContractEntry_Envelope(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent' to 'bool'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<bool>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent(bool value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent> ITypeConverter<bool>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'bool'.");
                
            }
            TRAClaim ITypeConverter<bool>.ConvertTo_TRAClaim(bool value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<bool>.Enumerate_TRAClaim(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'bool'.");
                
            }
            TRACredential_Envelope ITypeConverter<bool>.ConvertTo_TRACredential_Envelope(bool value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<bool>.Enumerate_TRACredential_Envelope(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TRACredential_EnvelopeContent(TRACredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeContent' to 'bool'.");
                
            }
            TRACredential_EnvelopeContent ITypeConverter<bool>.ConvertTo_TRACredential_EnvelopeContent(bool value)
            {
                return TypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TRACredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeContent> ITypeConverter<bool>.Enumerate_TRACredential_EnvelopeContent(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TRACredential_EnvelopeLabel(TRACredential_EnvelopeLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeLabel' to 'bool'.");
                
            }
            TRACredential_EnvelopeLabel ITypeConverter<bool>.ConvertTo_TRACredential_EnvelopeLabel(bool value)
            {
                return TypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TRACredential_EnvelopeLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeLabel> ITypeConverter<bool>.Enumerate_TRACredential_EnvelopeLabel(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'bool'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<bool>.ConvertTo_TRACredential_EnvelopeSeal(bool value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<bool>.Enumerate_TRACredential_EnvelopeSeal(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TRAEncryptedClaims(TRAEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims' to 'bool'.");
                
            }
            TRAEncryptedClaims ITypeConverter<bool>.ConvertTo_TRAEncryptedClaims(bool value)
            {
                return TypeConverter<TRAEncryptedClaims>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TRAEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims> ITypeConverter<bool>.Enumerate_TRAEncryptedClaims(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'bool'.");
                
            }
            TRAKeyValuePair ITypeConverter<bool>.ConvertTo_TRAKeyValuePair(bool value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<bool>.Enumerate_TRAKeyValuePair(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'bool'.");
                
            }
            TRACredentialType ITypeConverter<bool>.ConvertTo_TRACredentialType(bool value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<bool>.Enumerate_TRACredentialType(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'bool'.");
                
            }
            TRAEncryptionFlag ITypeConverter<bool>.ConvertTo_TRAEncryptionFlag(bool value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<bool>.Enumerate_TRAEncryptionFlag(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'bool'.");
                
            }
            TRAServiceType ITypeConverter<bool>.ConvertTo_TRAServiceType(bool value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<bool>.Enumerate_TRAServiceType(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'bool'.");
                
            }
            TRATrustLevel ITypeConverter<bool>.ConvertTo_TRATrustLevel(bool value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<bool>.Enumerate_TRATrustLevel(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'bool'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<bool>.ConvertTo_List_List_TRAKeyValuePair(bool value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<bool>.Enumerate_List_List_TRAKeyValuePair(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'bool'.");
                
            }
            List<TRAClaim> ITypeConverter<bool>.ConvertTo_List_TRAClaim(bool value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<bool>.Enumerate_List_TRAClaim(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(TDWVDAAccountEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims?' to 'bool'.");
                
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<bool>.ConvertTo_TDWVDAAccountEntry_Claims_nullable(bool value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TDWVDAAccountEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims?> ITypeConverter<bool>.Enumerate_TDWVDAAccountEntry_Claims_nullable(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent?' to 'bool'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<bool>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent_nullable(bool value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent?> ITypeConverter<bool>.Enumerate_TDWVDAAccountEntry_EnvelopeContent_nullable(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(TDWVDASmartContractEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims?' to 'bool'.");
                
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<bool>.ConvertTo_TDWVDASmartContractEntry_Claims_nullable(bool value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TDWVDASmartContractEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims?> ITypeConverter<bool>.Enumerate_TDWVDASmartContractEntry_Claims_nullable(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent?' to 'bool'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<bool>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent_nullable(bool value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent?> ITypeConverter<bool>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent_nullable(bool value)
            {
                
                yield break;
            }
            bool ITypeConverter<bool>.ConvertFrom_TRAEncryptedClaims_nullable(TRAEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims?' to 'bool'.");
                
            }
            TRAEncryptedClaims? ITypeConverter<bool>.ConvertTo_TRAEncryptedClaims_nullable(bool value)
            {
                return TypeConverter<TRAEncryptedClaims?>.ConvertFrom_bool(value);
            }
            TypeConversionAction ITypeConverter<bool>.GetConversionActionTo_TRAEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims?> ITypeConverter<bool>.Enumerate_TRAEncryptedClaims_nullable(bool value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'long'.");
                
            }
            bool ITypeConverter<long>.ConvertTo_bool(long value)
            {
                return TypeConverter<bool>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_TOBOOL;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<long>.Enumerate_bool(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_long(long value)
            {
                
                return (long)value;
                
            }
            long ITypeConverter<long>.ConvertTo_long(long value)
            {
                return TypeConverter<long>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<long>.Enumerate_long(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    long intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = long.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "long");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<long>.ConvertTo_string(long value)
            {
                return TypeConverter<string>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<long>.Enumerate_string(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'long'.");
                
            }
            List<string> ITypeConverter<long>.ConvertTo_List_string(long value)
            {
                return TypeConverter<List<string>>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<long>.Enumerate_List_string(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'long'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<long>.ConvertTo_List_TRAKeyValuePair(long value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<long>.Enumerate_List_TRAKeyValuePair(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TDWVDAAccountEntry_Claims(TDWVDAAccountEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims' to 'long'.");
                
            }
            TDWVDAAccountEntry_Claims ITypeConverter<long>.ConvertTo_TDWVDAAccountEntry_Claims(long value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TDWVDAAccountEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims> ITypeConverter<long>.Enumerate_TDWVDAAccountEntry_Claims(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TDWVDAAccountEntry_Envelope(TDWVDAAccountEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Envelope' to 'long'.");
                
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<long>.ConvertTo_TDWVDAAccountEntry_Envelope(long value)
            {
                return TypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TDWVDAAccountEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Envelope> ITypeConverter<long>.Enumerate_TDWVDAAccountEntry_Envelope(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent' to 'long'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<long>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent(long value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent> ITypeConverter<long>.Enumerate_TDWVDAAccountEntry_EnvelopeContent(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'long'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<long>.ConvertTo_TDWVDAIdentityRegistryEntryParm(long value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<long>.Enumerate_TDWVDAIdentityRegistryEntryParm(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'long'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<long>.ConvertTo_TDWVDAPostInvocationParameters(long value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<long>.Enumerate_TDWVDAPostInvocationParameters(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'long'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<long>.ConvertTo_TDWVDARevocationListEntryParm(long value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<long>.Enumerate_TDWVDARevocationListEntryParm(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'long'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<long>.ConvertTo_TDWVDAServiceEndpointEntryParm(long value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<long>.Enumerate_TDWVDAServiceEndpointEntryParm(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TDWVDASmartContractEntry_Claims(TDWVDASmartContractEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims' to 'long'.");
                
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<long>.ConvertTo_TDWVDASmartContractEntry_Claims(long value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TDWVDASmartContractEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims> ITypeConverter<long>.Enumerate_TDWVDASmartContractEntry_Claims(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TDWVDASmartContractEntry_Envelope(TDWVDASmartContractEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Envelope' to 'long'.");
                
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<long>.ConvertTo_TDWVDASmartContractEntry_Envelope(long value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TDWVDASmartContractEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Envelope> ITypeConverter<long>.Enumerate_TDWVDASmartContractEntry_Envelope(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent' to 'long'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<long>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent(long value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent> ITypeConverter<long>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'long'.");
                
            }
            TRAClaim ITypeConverter<long>.ConvertTo_TRAClaim(long value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<long>.Enumerate_TRAClaim(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'long'.");
                
            }
            TRACredential_Envelope ITypeConverter<long>.ConvertTo_TRACredential_Envelope(long value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<long>.Enumerate_TRACredential_Envelope(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TRACredential_EnvelopeContent(TRACredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeContent' to 'long'.");
                
            }
            TRACredential_EnvelopeContent ITypeConverter<long>.ConvertTo_TRACredential_EnvelopeContent(long value)
            {
                return TypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TRACredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeContent> ITypeConverter<long>.Enumerate_TRACredential_EnvelopeContent(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TRACredential_EnvelopeLabel(TRACredential_EnvelopeLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeLabel' to 'long'.");
                
            }
            TRACredential_EnvelopeLabel ITypeConverter<long>.ConvertTo_TRACredential_EnvelopeLabel(long value)
            {
                return TypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TRACredential_EnvelopeLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeLabel> ITypeConverter<long>.Enumerate_TRACredential_EnvelopeLabel(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'long'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<long>.ConvertTo_TRACredential_EnvelopeSeal(long value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<long>.Enumerate_TRACredential_EnvelopeSeal(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TRAEncryptedClaims(TRAEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims' to 'long'.");
                
            }
            TRAEncryptedClaims ITypeConverter<long>.ConvertTo_TRAEncryptedClaims(long value)
            {
                return TypeConverter<TRAEncryptedClaims>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TRAEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims> ITypeConverter<long>.Enumerate_TRAEncryptedClaims(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'long'.");
                
            }
            TRAKeyValuePair ITypeConverter<long>.ConvertTo_TRAKeyValuePair(long value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<long>.Enumerate_TRAKeyValuePair(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'long'.");
                
            }
            TRACredentialType ITypeConverter<long>.ConvertTo_TRACredentialType(long value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<long>.Enumerate_TRACredentialType(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'long'.");
                
            }
            TRAEncryptionFlag ITypeConverter<long>.ConvertTo_TRAEncryptionFlag(long value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<long>.Enumerate_TRAEncryptionFlag(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'long'.");
                
            }
            TRAServiceType ITypeConverter<long>.ConvertTo_TRAServiceType(long value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<long>.Enumerate_TRAServiceType(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'long'.");
                
            }
            TRATrustLevel ITypeConverter<long>.ConvertTo_TRATrustLevel(long value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<long>.Enumerate_TRATrustLevel(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'long'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<long>.ConvertTo_List_List_TRAKeyValuePair(long value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<long>.Enumerate_List_List_TRAKeyValuePair(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'long'.");
                
            }
            List<TRAClaim> ITypeConverter<long>.ConvertTo_List_TRAClaim(long value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<long>.Enumerate_List_TRAClaim(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(TDWVDAAccountEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims?' to 'long'.");
                
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<long>.ConvertTo_TDWVDAAccountEntry_Claims_nullable(long value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TDWVDAAccountEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims?> ITypeConverter<long>.Enumerate_TDWVDAAccountEntry_Claims_nullable(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent?' to 'long'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<long>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent_nullable(long value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent?> ITypeConverter<long>.Enumerate_TDWVDAAccountEntry_EnvelopeContent_nullable(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(TDWVDASmartContractEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims?' to 'long'.");
                
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<long>.ConvertTo_TDWVDASmartContractEntry_Claims_nullable(long value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TDWVDASmartContractEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims?> ITypeConverter<long>.Enumerate_TDWVDASmartContractEntry_Claims_nullable(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent?' to 'long'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<long>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent_nullable(long value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent?> ITypeConverter<long>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent_nullable(long value)
            {
                
                yield break;
            }
            long ITypeConverter<long>.ConvertFrom_TRAEncryptedClaims_nullable(TRAEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims?' to 'long'.");
                
            }
            TRAEncryptedClaims? ITypeConverter<long>.ConvertTo_TRAEncryptedClaims_nullable(long value)
            {
                return TypeConverter<TRAEncryptedClaims?>.ConvertFrom_long(value);
            }
            TypeConversionAction ITypeConverter<long>.GetConversionActionTo_TRAEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims?> ITypeConverter<long>.Enumerate_TRAEncryptedClaims_nullable(long value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_bool(bool value)
            {
                
                return Serializer.ToString(value);
                
            }
            bool ITypeConverter<string>.ConvertTo_bool(string value)
            {
                return TypeConverter<bool>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<string>.Enumerate_bool(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_long(long value)
            {
                
                return Serializer.ToString(value);
                
            }
            long ITypeConverter<string>.ConvertTo_long(string value)
            {
                return TypeConverter<long>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<string>.Enumerate_long(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_string(string value)
            {
                
                return (string)value;
                
            }
            string ITypeConverter<string>.ConvertTo_string(string value)
            {
                return TypeConverter<string>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<string>.Enumerate_string(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_List_string(List<string> value)
            {
                
                return Serializer.ToString(value);
                
            }
            List<string> ITypeConverter<string>.ConvertTo_List_string(string value)
            {
                return TypeConverter<List<string>>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<string>.Enumerate_List_string(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                return Serializer.ToString(value);
                
            }
            List<TRAKeyValuePair> ITypeConverter<string>.ConvertTo_List_TRAKeyValuePair(string value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<string>.Enumerate_List_TRAKeyValuePair(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TDWVDAAccountEntry_Claims(TDWVDAAccountEntry_Claims value)
            {
                
                return Serializer.ToString(value);
                
            }
            TDWVDAAccountEntry_Claims ITypeConverter<string>.ConvertTo_TDWVDAAccountEntry_Claims(string value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TDWVDAAccountEntry_Claims()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims> ITypeConverter<string>.Enumerate_TDWVDAAccountEntry_Claims(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TDWVDAAccountEntry_Envelope(TDWVDAAccountEntry_Envelope value)
            {
                
                return Serializer.ToString(value);
                
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<string>.ConvertTo_TDWVDAAccountEntry_Envelope(string value)
            {
                return TypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TDWVDAAccountEntry_Envelope()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Envelope> ITypeConverter<string>.Enumerate_TDWVDAAccountEntry_Envelope(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                return Serializer.ToString(value);
                
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<string>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent(string value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent> ITypeConverter<string>.Enumerate_TDWVDAAccountEntry_EnvelopeContent(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                return Serializer.ToString(value);
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<string>.ConvertTo_TDWVDAIdentityRegistryEntryParm(string value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<string>.Enumerate_TDWVDAIdentityRegistryEntryParm(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                return Serializer.ToString(value);
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<string>.ConvertTo_TDWVDAPostInvocationParameters(string value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<string>.Enumerate_TDWVDAPostInvocationParameters(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                return Serializer.ToString(value);
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<string>.ConvertTo_TDWVDARevocationListEntryParm(string value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<string>.Enumerate_TDWVDARevocationListEntryParm(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                return Serializer.ToString(value);
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<string>.ConvertTo_TDWVDAServiceEndpointEntryParm(string value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<string>.Enumerate_TDWVDAServiceEndpointEntryParm(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TDWVDASmartContractEntry_Claims(TDWVDASmartContractEntry_Claims value)
            {
                
                return Serializer.ToString(value);
                
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<string>.ConvertTo_TDWVDASmartContractEntry_Claims(string value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TDWVDASmartContractEntry_Claims()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims> ITypeConverter<string>.Enumerate_TDWVDASmartContractEntry_Claims(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TDWVDASmartContractEntry_Envelope(TDWVDASmartContractEntry_Envelope value)
            {
                
                return Serializer.ToString(value);
                
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<string>.ConvertTo_TDWVDASmartContractEntry_Envelope(string value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TDWVDASmartContractEntry_Envelope()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Envelope> ITypeConverter<string>.Enumerate_TDWVDASmartContractEntry_Envelope(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                return Serializer.ToString(value);
                
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<string>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent(string value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent> ITypeConverter<string>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                return Serializer.ToString(value);
                
            }
            TRAClaim ITypeConverter<string>.ConvertTo_TRAClaim(string value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<string>.Enumerate_TRAClaim(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                return Serializer.ToString(value);
                
            }
            TRACredential_Envelope ITypeConverter<string>.ConvertTo_TRACredential_Envelope(string value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<string>.Enumerate_TRACredential_Envelope(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TRACredential_EnvelopeContent(TRACredential_EnvelopeContent value)
            {
                
                return Serializer.ToString(value);
                
            }
            TRACredential_EnvelopeContent ITypeConverter<string>.ConvertTo_TRACredential_EnvelopeContent(string value)
            {
                return TypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TRACredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeContent> ITypeConverter<string>.Enumerate_TRACredential_EnvelopeContent(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TRACredential_EnvelopeLabel(TRACredential_EnvelopeLabel value)
            {
                
                return Serializer.ToString(value);
                
            }
            TRACredential_EnvelopeLabel ITypeConverter<string>.ConvertTo_TRACredential_EnvelopeLabel(string value)
            {
                return TypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TRACredential_EnvelopeLabel()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeLabel> ITypeConverter<string>.Enumerate_TRACredential_EnvelopeLabel(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                return Serializer.ToString(value);
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<string>.ConvertTo_TRACredential_EnvelopeSeal(string value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<string>.Enumerate_TRACredential_EnvelopeSeal(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TRAEncryptedClaims(TRAEncryptedClaims value)
            {
                
                return Serializer.ToString(value);
                
            }
            TRAEncryptedClaims ITypeConverter<string>.ConvertTo_TRAEncryptedClaims(string value)
            {
                return TypeConverter<TRAEncryptedClaims>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TRAEncryptedClaims()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims> ITypeConverter<string>.Enumerate_TRAEncryptedClaims(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                return Serializer.ToString(value);
                
            }
            TRAKeyValuePair ITypeConverter<string>.ConvertTo_TRAKeyValuePair(string value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<string>.Enumerate_TRAKeyValuePair(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                return Serializer.ToString(value);
                
            }
            TRACredentialType ITypeConverter<string>.ConvertTo_TRACredentialType(string value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<string>.Enumerate_TRACredentialType(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                return Serializer.ToString(value);
                
            }
            TRAEncryptionFlag ITypeConverter<string>.ConvertTo_TRAEncryptionFlag(string value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<string>.Enumerate_TRAEncryptionFlag(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                return Serializer.ToString(value);
                
            }
            TRAServiceType ITypeConverter<string>.ConvertTo_TRAServiceType(string value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<string>.Enumerate_TRAServiceType(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                return Serializer.ToString(value);
                
            }
            TRATrustLevel ITypeConverter<string>.ConvertTo_TRATrustLevel(string value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<string>.Enumerate_TRATrustLevel(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                return Serializer.ToString(value);
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<string>.ConvertTo_List_List_TRAKeyValuePair(string value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<string>.Enumerate_List_List_TRAKeyValuePair(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                return Serializer.ToString(value);
                
            }
            List<TRAClaim> ITypeConverter<string>.ConvertTo_List_TRAClaim(string value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<string>.Enumerate_List_TRAClaim(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(TDWVDAAccountEntry_Claims? value)
            {
                
                return Serializer.ToString(value);
                
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<string>.ConvertTo_TDWVDAAccountEntry_Claims_nullable(string value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TDWVDAAccountEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims?> ITypeConverter<string>.Enumerate_TDWVDAAccountEntry_Claims_nullable(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                return Serializer.ToString(value);
                
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<string>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent_nullable(string value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent?> ITypeConverter<string>.Enumerate_TDWVDAAccountEntry_EnvelopeContent_nullable(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(TDWVDASmartContractEntry_Claims? value)
            {
                
                return Serializer.ToString(value);
                
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<string>.ConvertTo_TDWVDASmartContractEntry_Claims_nullable(string value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TDWVDASmartContractEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims?> ITypeConverter<string>.Enumerate_TDWVDASmartContractEntry_Claims_nullable(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                return Serializer.ToString(value);
                
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<string>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent_nullable(string value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent?> ITypeConverter<string>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent_nullable(string value)
            {
                
                yield break;
            }
            string ITypeConverter<string>.ConvertFrom_TRAEncryptedClaims_nullable(TRAEncryptedClaims? value)
            {
                
                return Serializer.ToString(value);
                
            }
            TRAEncryptedClaims? ITypeConverter<string>.ConvertTo_TRAEncryptedClaims_nullable(string value)
            {
                return TypeConverter<TRAEncryptedClaims?>.ConvertFrom_string(value);
            }
            TypeConversionAction ITypeConverter<string>.GetConversionActionTo_TRAEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_PARSESTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims?> ITypeConverter<string>.Enumerate_TRAEncryptedClaims_nullable(string value)
            {
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_bool(bool value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_bool(value));
                    return intermediate_result;
                }
                
            }
            bool ITypeConverter<List<string>>.ConvertTo_bool(List<string> value)
            {
                return TypeConverter<bool>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<List<string>>.Enumerate_bool(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<bool>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_long(long value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_long(value));
                    return intermediate_result;
                }
                
            }
            long ITypeConverter<List<string>>.ConvertTo_long(List<string> value)
            {
                return TypeConverter<long>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<List<string>>.Enumerate_long(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<long>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    List<string> intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = ExternalParser.TryParse_List_string(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        try
                        {
                            string element = TypeConverter<string>.ConvertFrom_string(value);
                            intermediate_result = new List<string>();
                            intermediate_result.Add(element);
                        }
                        catch
                        {
                            throw new ArgumentException("Cannot parse \"" + value + "\" into either 'List<string>' or 'string'.");
                        }
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<List<string>>.ConvertTo_string(List<string> value)
            {
                return TypeConverter<string>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<List<string>>.Enumerate_string(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<string>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_List_string(List<string> value)
            {
                
                return (List<string>)value;
                
            }
            List<string> ITypeConverter<List<string>>.ConvertTo_List_string(List<string> value)
            {
                return TypeConverter<List<string>>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<List<string>>.Enumerate_List_string(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<List<string>>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    foreach (var element in value)
                    {
                        intermediate_result.Add(TypeConverter<string>.ConvertFrom_TRAKeyValuePair(element));
                    }
                    return intermediate_result;
                }
                
            }
            List<TRAKeyValuePair> ITypeConverter<List<string>>.ConvertTo_List_TRAKeyValuePair(List<string> value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_CONVERTLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<List<string>>.Enumerate_List_TRAKeyValuePair(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TDWVDAAccountEntry_Claims(TDWVDAAccountEntry_Claims value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TDWVDAAccountEntry_Claims(value));
                    return intermediate_result;
                }
                
            }
            TDWVDAAccountEntry_Claims ITypeConverter<List<string>>.ConvertTo_TDWVDAAccountEntry_Claims(List<string> value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TDWVDAAccountEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims> ITypeConverter<List<string>>.Enumerate_TDWVDAAccountEntry_Claims(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TDWVDAAccountEntry_Envelope(TDWVDAAccountEntry_Envelope value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TDWVDAAccountEntry_Envelope(value));
                    return intermediate_result;
                }
                
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<List<string>>.ConvertTo_TDWVDAAccountEntry_Envelope(List<string> value)
            {
                return TypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TDWVDAAccountEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Envelope> ITypeConverter<List<string>>.Enumerate_TDWVDAAccountEntry_Envelope(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(value));
                    return intermediate_result;
                }
                
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<List<string>>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent(List<string> value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent> ITypeConverter<List<string>>.Enumerate_TDWVDAAccountEntry_EnvelopeContent(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value));
                    return intermediate_result;
                }
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<List<string>>.ConvertTo_TDWVDAIdentityRegistryEntryParm(List<string> value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<List<string>>.Enumerate_TDWVDAIdentityRegistryEntryParm(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TDWVDAPostInvocationParameters(value));
                    return intermediate_result;
                }
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<List<string>>.ConvertTo_TDWVDAPostInvocationParameters(List<string> value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<List<string>>.Enumerate_TDWVDAPostInvocationParameters(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TDWVDARevocationListEntryParm(value));
                    return intermediate_result;
                }
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<List<string>>.ConvertTo_TDWVDARevocationListEntryParm(List<string> value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<List<string>>.Enumerate_TDWVDARevocationListEntryParm(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value));
                    return intermediate_result;
                }
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<List<string>>.ConvertTo_TDWVDAServiceEndpointEntryParm(List<string> value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<List<string>>.Enumerate_TDWVDAServiceEndpointEntryParm(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TDWVDASmartContractEntry_Claims(TDWVDASmartContractEntry_Claims value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TDWVDASmartContractEntry_Claims(value));
                    return intermediate_result;
                }
                
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<List<string>>.ConvertTo_TDWVDASmartContractEntry_Claims(List<string> value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TDWVDASmartContractEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims> ITypeConverter<List<string>>.Enumerate_TDWVDASmartContractEntry_Claims(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TDWVDASmartContractEntry_Envelope(TDWVDASmartContractEntry_Envelope value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TDWVDASmartContractEntry_Envelope(value));
                    return intermediate_result;
                }
                
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<List<string>>.ConvertTo_TDWVDASmartContractEntry_Envelope(List<string> value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TDWVDASmartContractEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Envelope> ITypeConverter<List<string>>.Enumerate_TDWVDASmartContractEntry_Envelope(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(value));
                    return intermediate_result;
                }
                
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<List<string>>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent(List<string> value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent> ITypeConverter<List<string>>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TRAClaim(value));
                    return intermediate_result;
                }
                
            }
            TRAClaim ITypeConverter<List<string>>.ConvertTo_TRAClaim(List<string> value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<List<string>>.Enumerate_TRAClaim(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TRAClaim>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TRACredential_Envelope(value));
                    return intermediate_result;
                }
                
            }
            TRACredential_Envelope ITypeConverter<List<string>>.ConvertTo_TRACredential_Envelope(List<string> value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<List<string>>.Enumerate_TRACredential_Envelope(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TRACredential_Envelope>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TRACredential_EnvelopeContent(TRACredential_EnvelopeContent value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TRACredential_EnvelopeContent(value));
                    return intermediate_result;
                }
                
            }
            TRACredential_EnvelopeContent ITypeConverter<List<string>>.ConvertTo_TRACredential_EnvelopeContent(List<string> value)
            {
                return TypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TRACredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeContent> ITypeConverter<List<string>>.Enumerate_TRACredential_EnvelopeContent(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TRACredential_EnvelopeLabel(TRACredential_EnvelopeLabel value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TRACredential_EnvelopeLabel(value));
                    return intermediate_result;
                }
                
            }
            TRACredential_EnvelopeLabel ITypeConverter<List<string>>.ConvertTo_TRACredential_EnvelopeLabel(List<string> value)
            {
                return TypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TRACredential_EnvelopeLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeLabel> ITypeConverter<List<string>>.Enumerate_TRACredential_EnvelopeLabel(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TRACredential_EnvelopeSeal(value));
                    return intermediate_result;
                }
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<List<string>>.ConvertTo_TRACredential_EnvelopeSeal(List<string> value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<List<string>>.Enumerate_TRACredential_EnvelopeSeal(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TRAEncryptedClaims(TRAEncryptedClaims value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TRAEncryptedClaims(value));
                    return intermediate_result;
                }
                
            }
            TRAEncryptedClaims ITypeConverter<List<string>>.ConvertTo_TRAEncryptedClaims(List<string> value)
            {
                return TypeConverter<TRAEncryptedClaims>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TRAEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims> ITypeConverter<List<string>>.Enumerate_TRAEncryptedClaims(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TRAEncryptedClaims>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TRAKeyValuePair(value));
                    return intermediate_result;
                }
                
            }
            TRAKeyValuePair ITypeConverter<List<string>>.ConvertTo_TRAKeyValuePair(List<string> value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<List<string>>.Enumerate_TRAKeyValuePair(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TRAKeyValuePair>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TRACredentialType(value));
                    return intermediate_result;
                }
                
            }
            TRACredentialType ITypeConverter<List<string>>.ConvertTo_TRACredentialType(List<string> value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<List<string>>.Enumerate_TRACredentialType(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TRACredentialType>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TRAEncryptionFlag(value));
                    return intermediate_result;
                }
                
            }
            TRAEncryptionFlag ITypeConverter<List<string>>.ConvertTo_TRAEncryptionFlag(List<string> value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<List<string>>.Enumerate_TRAEncryptionFlag(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TRAEncryptionFlag>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TRAServiceType(value));
                    return intermediate_result;
                }
                
            }
            TRAServiceType ITypeConverter<List<string>>.ConvertTo_TRAServiceType(List<string> value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<List<string>>.Enumerate_TRAServiceType(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TRAServiceType>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TRATrustLevel(value));
                    return intermediate_result;
                }
                
            }
            TRATrustLevel ITypeConverter<List<string>>.ConvertTo_TRATrustLevel(List<string> value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<List<string>>.Enumerate_TRATrustLevel(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TRATrustLevel>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    foreach (var element in value)
                    {
                        intermediate_result.Add(TypeConverter<string>.ConvertFrom_List_TRAKeyValuePair(element));
                    }
                    return intermediate_result;
                }
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<string>>.ConvertTo_List_List_TRAKeyValuePair(List<string> value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_CONVERTLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<List<string>>.Enumerate_List_List_TRAKeyValuePair(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    foreach (var element in value)
                    {
                        intermediate_result.Add(TypeConverter<string>.ConvertFrom_TRAClaim(element));
                    }
                    return intermediate_result;
                }
                
            }
            List<TRAClaim> ITypeConverter<List<string>>.ConvertTo_List_TRAClaim(List<string> value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_CONVERTLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<List<string>>.Enumerate_List_TRAClaim(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<List<TRAClaim>>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(TDWVDAAccountEntry_Claims? value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(value));
                    return intermediate_result;
                }
                
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<List<string>>.ConvertTo_TDWVDAAccountEntry_Claims_nullable(List<string> value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TDWVDAAccountEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims?> ITypeConverter<List<string>>.Enumerate_TDWVDAAccountEntry_Claims_nullable(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(value));
                    return intermediate_result;
                }
                
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<List<string>>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent_nullable(List<string> value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent?> ITypeConverter<List<string>>.Enumerate_TDWVDAAccountEntry_EnvelopeContent_nullable(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(TDWVDASmartContractEntry_Claims? value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(value));
                    return intermediate_result;
                }
                
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<List<string>>.ConvertTo_TDWVDASmartContractEntry_Claims_nullable(List<string> value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TDWVDASmartContractEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims?> ITypeConverter<List<string>>.Enumerate_TDWVDASmartContractEntry_Claims_nullable(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(value));
                    return intermediate_result;
                }
                
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<List<string>>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent_nullable(List<string> value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent?> ITypeConverter<List<string>>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent_nullable(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_string(element);
                
                yield break;
            }
            List<string> ITypeConverter<List<string>>.ConvertFrom_TRAEncryptedClaims_nullable(TRAEncryptedClaims? value)
            {
                
                {
                    List<string> intermediate_result = new List<string>();
                    intermediate_result.Add(TypeConverter<string>.ConvertFrom_TRAEncryptedClaims_nullable(value));
                    return intermediate_result;
                }
                
            }
            TRAEncryptedClaims? ITypeConverter<List<string>>.ConvertTo_TRAEncryptedClaims_nullable(List<string> value)
            {
                return TypeConverter<TRAEncryptedClaims?>.ConvertFrom_List_string(value);
            }
            TypeConversionAction ITypeConverter<List<string>>.GetConversionActionTo_TRAEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims?> ITypeConverter<List<string>>.Enumerate_TRAEncryptedClaims_nullable(List<string> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TRAEncryptedClaims?>.ConvertFrom_string(element);
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'List<TRAKeyValuePair>'.");
                
            }
            bool ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_bool(List<TRAKeyValuePair> value)
            {
                return TypeConverter<bool>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_bool(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'List<TRAKeyValuePair>'.");
                
            }
            long ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_long(List<TRAKeyValuePair> value)
            {
                return TypeConverter<long>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_long(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    List<TRAKeyValuePair> intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = ExternalParser.TryParse_List_TRAKeyValuePair(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        try
                        {
                            TRAKeyValuePair element = TypeConverter<TRAKeyValuePair>.ConvertFrom_string(value);
                            intermediate_result = new List<TRAKeyValuePair>();
                            intermediate_result.Add(element);
                        }
                        catch
                        {
                            throw new ArgumentException("Cannot parse \"" + value + "\" into either 'List<TRAKeyValuePair>' or 'TRAKeyValuePair'.");
                        }
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_string(List<TRAKeyValuePair> value)
            {
                return TypeConverter<string>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_string(List<TRAKeyValuePair> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<string>.ConvertFrom_TRAKeyValuePair(element);
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_List_string(List<string> value)
            {
                
                {
                    List<TRAKeyValuePair> intermediate_result = new List<TRAKeyValuePair>();
                    foreach (var element in value)
                    {
                        intermediate_result.Add(TypeConverter<TRAKeyValuePair>.ConvertFrom_string(element));
                    }
                    return intermediate_result;
                }
                
            }
            List<string> ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_List_string(List<TRAKeyValuePair> value)
            {
                return TypeConverter<List<string>>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_CONVERTLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_List_string(List<TRAKeyValuePair> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<List<string>>.ConvertFrom_TRAKeyValuePair(element);
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                return (List<TRAKeyValuePair>)value;
                
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRAKeyValuePair(element);
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDAAccountEntry_Claims(TDWVDAAccountEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims' to 'List<TRAKeyValuePair>'.");
                
            }
            TDWVDAAccountEntry_Claims ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TDWVDAAccountEntry_Claims(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TDWVDAAccountEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TDWVDAAccountEntry_Claims(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDAAccountEntry_Envelope(TDWVDAAccountEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Envelope' to 'List<TRAKeyValuePair>'.");
                
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TDWVDAAccountEntry_Envelope(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TDWVDAAccountEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Envelope> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TDWVDAAccountEntry_Envelope(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent' to 'List<TRAKeyValuePair>'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TDWVDAAccountEntry_EnvelopeContent(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'List<TRAKeyValuePair>'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TDWVDAIdentityRegistryEntryParm(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TDWVDAIdentityRegistryEntryParm(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'List<TRAKeyValuePair>'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TDWVDAPostInvocationParameters(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TDWVDAPostInvocationParameters(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'List<TRAKeyValuePair>'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TDWVDARevocationListEntryParm(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TDWVDARevocationListEntryParm(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'List<TRAKeyValuePair>'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TDWVDAServiceEndpointEntryParm(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TDWVDAServiceEndpointEntryParm(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDASmartContractEntry_Claims(TDWVDASmartContractEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims' to 'List<TRAKeyValuePair>'.");
                
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TDWVDASmartContractEntry_Claims(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TDWVDASmartContractEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TDWVDASmartContractEntry_Claims(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDASmartContractEntry_Envelope(TDWVDASmartContractEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Envelope' to 'List<TRAKeyValuePair>'.");
                
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TDWVDASmartContractEntry_Envelope(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TDWVDASmartContractEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Envelope> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TDWVDASmartContractEntry_Envelope(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent' to 'List<TRAKeyValuePair>'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'List<TRAKeyValuePair>'.");
                
            }
            TRAClaim ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TRAClaim(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TRAClaim(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'List<TRAKeyValuePair>'.");
                
            }
            TRACredential_Envelope ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TRACredential_Envelope(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TRACredential_Envelope(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRACredential_EnvelopeContent(TRACredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeContent' to 'List<TRAKeyValuePair>'.");
                
            }
            TRACredential_EnvelopeContent ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TRACredential_EnvelopeContent(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TRACredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeContent> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TRACredential_EnvelopeContent(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRACredential_EnvelopeLabel(TRACredential_EnvelopeLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeLabel' to 'List<TRAKeyValuePair>'.");
                
            }
            TRACredential_EnvelopeLabel ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TRACredential_EnvelopeLabel(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TRACredential_EnvelopeLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeLabel> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TRACredential_EnvelopeLabel(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'List<TRAKeyValuePair>'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TRACredential_EnvelopeSeal(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TRACredential_EnvelopeSeal(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRAEncryptedClaims(TRAEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims' to 'List<TRAKeyValuePair>'.");
                
            }
            TRAEncryptedClaims ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TRAEncryptedClaims(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TRAEncryptedClaims>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TRAEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TRAEncryptedClaims(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                {
                    List<TRAKeyValuePair> intermediate_result = new List<TRAKeyValuePair>();
                    intermediate_result.Add(TypeConverter<TRAKeyValuePair>.ConvertFrom_TRAKeyValuePair(value));
                    return intermediate_result;
                }
                
            }
            TRAKeyValuePair ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TRAKeyValuePair>.ConvertFrom_TRAKeyValuePair(element);
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'List<TRAKeyValuePair>'.");
                
            }
            TRACredentialType ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TRACredentialType(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TRACredentialType(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'List<TRAKeyValuePair>'.");
                
            }
            TRAEncryptionFlag ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TRAEncryptionFlag(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TRAEncryptionFlag(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'List<TRAKeyValuePair>'.");
                
            }
            TRAServiceType ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TRAServiceType(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TRAServiceType(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'List<TRAKeyValuePair>'.");
                
            }
            TRATrustLevel ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TRATrustLevel(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TRATrustLevel(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'List<TRAKeyValuePair>'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_List_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_CONVERTLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_List_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRAKeyValuePair(element);
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'List<TRAKeyValuePair>'.");
                
            }
            List<TRAClaim> ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_List_TRAClaim(List<TRAKeyValuePair> value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_List_TRAClaim(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(TDWVDAAccountEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims?' to 'List<TRAKeyValuePair>'.");
                
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TDWVDAAccountEntry_Claims_nullable(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TDWVDAAccountEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims?> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TDWVDAAccountEntry_Claims_nullable(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent?' to 'List<TRAKeyValuePair>'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent_nullable(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent?> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TDWVDAAccountEntry_EnvelopeContent_nullable(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(TDWVDASmartContractEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims?' to 'List<TRAKeyValuePair>'.");
                
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TDWVDASmartContractEntry_Claims_nullable(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TDWVDASmartContractEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims?> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TDWVDASmartContractEntry_Claims_nullable(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent?' to 'List<TRAKeyValuePair>'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent_nullable(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent?> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent_nullable(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRAEncryptedClaims_nullable(TRAEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims?' to 'List<TRAKeyValuePair>'.");
                
            }
            TRAEncryptedClaims? ITypeConverter<List<TRAKeyValuePair>>.ConvertTo_TRAEncryptedClaims_nullable(List<TRAKeyValuePair> value)
            {
                return TypeConverter<TRAEncryptedClaims?>.ConvertFrom_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<TRAKeyValuePair>>.GetConversionActionTo_TRAEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims?> ITypeConverter<List<TRAKeyValuePair>>.Enumerate_TRAEncryptedClaims_nullable(List<TRAKeyValuePair> value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TDWVDAAccountEntry_Claims'.");
                
            }
            bool ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertTo_bool(TDWVDAAccountEntry_Claims value)
            {
                return TypeConverter<bool>.ConvertFrom_TDWVDAAccountEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TDWVDAAccountEntry_Claims>.Enumerate_bool(TDWVDAAccountEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TDWVDAAccountEntry_Claims'.");
                
            }
            long ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertTo_long(TDWVDAAccountEntry_Claims value)
            {
                return TypeConverter<long>.ConvertFrom_TDWVDAAccountEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TDWVDAAccountEntry_Claims>.Enumerate_long(TDWVDAAccountEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TDWVDAAccountEntry_Claims intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TDWVDAAccountEntry_Claims.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TDWVDAAccountEntry_Claims");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertTo_string(TDWVDAAccountEntry_Claims value)
            {
                return TypeConverter<string>.ConvertFrom_TDWVDAAccountEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TDWVDAAccountEntry_Claims>.Enumerate_string(TDWVDAAccountEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TDWVDAAccountEntry_Claims'.");
                
            }
            List<string> ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertTo_List_string(TDWVDAAccountEntry_Claims value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TDWVDAAccountEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TDWVDAAccountEntry_Claims>.Enumerate_List_string(TDWVDAAccountEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TDWVDAAccountEntry_Claims'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertTo_List_TRAKeyValuePair(TDWVDAAccountEntry_Claims value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDAAccountEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TDWVDAAccountEntry_Claims>.Enumerate_List_TRAKeyValuePair(TDWVDAAccountEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TDWVDAAccountEntry_Claims(TDWVDAAccountEntry_Claims value)
            {
                
                return (TDWVDAAccountEntry_Claims)value;
                
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertTo_TDWVDAAccountEntry_Claims(TDWVDAAccountEntry_Claims value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TDWVDAAccountEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims>.GetConversionActionTo_TDWVDAAccountEntry_Claims()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims> ITypeConverter<TDWVDAAccountEntry_Claims>.Enumerate_TDWVDAAccountEntry_Claims(TDWVDAAccountEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TDWVDAAccountEntry_Envelope(TDWVDAAccountEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Envelope' to 'TDWVDAAccountEntry_Claims'.");
                
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertTo_TDWVDAAccountEntry_Envelope(TDWVDAAccountEntry_Claims value)
            {
                return TypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TDWVDAAccountEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims>.GetConversionActionTo_TDWVDAAccountEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Envelope> ITypeConverter<TDWVDAAccountEntry_Claims>.Enumerate_TDWVDAAccountEntry_Envelope(TDWVDAAccountEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent' to 'TDWVDAAccountEntry_Claims'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent(TDWVDAAccountEntry_Claims value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TDWVDAAccountEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent> ITypeConverter<TDWVDAAccountEntry_Claims>.Enumerate_TDWVDAAccountEntry_EnvelopeContent(TDWVDAAccountEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TDWVDAAccountEntry_Claims'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TDWVDAAccountEntry_Claims value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDAAccountEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TDWVDAAccountEntry_Claims>.Enumerate_TDWVDAIdentityRegistryEntryParm(TDWVDAAccountEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TDWVDAAccountEntry_Claims'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertTo_TDWVDAPostInvocationParameters(TDWVDAAccountEntry_Claims value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDAAccountEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TDWVDAAccountEntry_Claims>.Enumerate_TDWVDAPostInvocationParameters(TDWVDAAccountEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TDWVDAAccountEntry_Claims'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertTo_TDWVDARevocationListEntryParm(TDWVDAAccountEntry_Claims value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDAAccountEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TDWVDAAccountEntry_Claims>.Enumerate_TDWVDARevocationListEntryParm(TDWVDAAccountEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TDWVDAAccountEntry_Claims'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertTo_TDWVDAServiceEndpointEntryParm(TDWVDAAccountEntry_Claims value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDAAccountEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TDWVDAAccountEntry_Claims>.Enumerate_TDWVDAServiceEndpointEntryParm(TDWVDAAccountEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TDWVDASmartContractEntry_Claims(TDWVDASmartContractEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims' to 'TDWVDAAccountEntry_Claims'.");
                
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertTo_TDWVDASmartContractEntry_Claims(TDWVDAAccountEntry_Claims value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TDWVDAAccountEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims>.GetConversionActionTo_TDWVDASmartContractEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims> ITypeConverter<TDWVDAAccountEntry_Claims>.Enumerate_TDWVDASmartContractEntry_Claims(TDWVDAAccountEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TDWVDASmartContractEntry_Envelope(TDWVDASmartContractEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Envelope' to 'TDWVDAAccountEntry_Claims'.");
                
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertTo_TDWVDASmartContractEntry_Envelope(TDWVDAAccountEntry_Claims value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TDWVDAAccountEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims>.GetConversionActionTo_TDWVDASmartContractEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Envelope> ITypeConverter<TDWVDAAccountEntry_Claims>.Enumerate_TDWVDASmartContractEntry_Envelope(TDWVDAAccountEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent' to 'TDWVDAAccountEntry_Claims'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent(TDWVDAAccountEntry_Claims value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TDWVDAAccountEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent> ITypeConverter<TDWVDAAccountEntry_Claims>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent(TDWVDAAccountEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TDWVDAAccountEntry_Claims'.");
                
            }
            TRAClaim ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertTo_TRAClaim(TDWVDAAccountEntry_Claims value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TDWVDAAccountEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TDWVDAAccountEntry_Claims>.Enumerate_TRAClaim(TDWVDAAccountEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'TDWVDAAccountEntry_Claims'.");
                
            }
            TRACredential_Envelope ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertTo_TRACredential_Envelope(TDWVDAAccountEntry_Claims value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDAAccountEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<TDWVDAAccountEntry_Claims>.Enumerate_TRACredential_Envelope(TDWVDAAccountEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TRACredential_EnvelopeContent(TRACredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeContent' to 'TDWVDAAccountEntry_Claims'.");
                
            }
            TRACredential_EnvelopeContent ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertTo_TRACredential_EnvelopeContent(TDWVDAAccountEntry_Claims value)
            {
                return TypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TDWVDAAccountEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims>.GetConversionActionTo_TRACredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeContent> ITypeConverter<TDWVDAAccountEntry_Claims>.Enumerate_TRACredential_EnvelopeContent(TDWVDAAccountEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TRACredential_EnvelopeLabel(TRACredential_EnvelopeLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeLabel' to 'TDWVDAAccountEntry_Claims'.");
                
            }
            TRACredential_EnvelopeLabel ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertTo_TRACredential_EnvelopeLabel(TDWVDAAccountEntry_Claims value)
            {
                return TypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TDWVDAAccountEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims>.GetConversionActionTo_TRACredential_EnvelopeLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeLabel> ITypeConverter<TDWVDAAccountEntry_Claims>.Enumerate_TRACredential_EnvelopeLabel(TDWVDAAccountEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'TDWVDAAccountEntry_Claims'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertTo_TRACredential_EnvelopeSeal(TDWVDAAccountEntry_Claims value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDAAccountEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<TDWVDAAccountEntry_Claims>.Enumerate_TRACredential_EnvelopeSeal(TDWVDAAccountEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TRAEncryptedClaims(TRAEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims' to 'TDWVDAAccountEntry_Claims'.");
                
            }
            TRAEncryptedClaims ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertTo_TRAEncryptedClaims(TDWVDAAccountEntry_Claims value)
            {
                return TypeConverter<TRAEncryptedClaims>.ConvertFrom_TDWVDAAccountEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims>.GetConversionActionTo_TRAEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims> ITypeConverter<TDWVDAAccountEntry_Claims>.Enumerate_TRAEncryptedClaims(TDWVDAAccountEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TDWVDAAccountEntry_Claims'.");
                
            }
            TRAKeyValuePair ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertTo_TRAKeyValuePair(TDWVDAAccountEntry_Claims value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDAAccountEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TDWVDAAccountEntry_Claims>.Enumerate_TRAKeyValuePair(TDWVDAAccountEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TDWVDAAccountEntry_Claims'.");
                
            }
            TRACredentialType ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertTo_TRACredentialType(TDWVDAAccountEntry_Claims value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TDWVDAAccountEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TDWVDAAccountEntry_Claims>.Enumerate_TRACredentialType(TDWVDAAccountEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TDWVDAAccountEntry_Claims'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertTo_TRAEncryptionFlag(TDWVDAAccountEntry_Claims value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDAAccountEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TDWVDAAccountEntry_Claims>.Enumerate_TRAEncryptionFlag(TDWVDAAccountEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TDWVDAAccountEntry_Claims'.");
                
            }
            TRAServiceType ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertTo_TRAServiceType(TDWVDAAccountEntry_Claims value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TDWVDAAccountEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TDWVDAAccountEntry_Claims>.Enumerate_TRAServiceType(TDWVDAAccountEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TDWVDAAccountEntry_Claims'.");
                
            }
            TRATrustLevel ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertTo_TRATrustLevel(TDWVDAAccountEntry_Claims value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TDWVDAAccountEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TDWVDAAccountEntry_Claims>.Enumerate_TRATrustLevel(TDWVDAAccountEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TDWVDAAccountEntry_Claims'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertTo_List_List_TRAKeyValuePair(TDWVDAAccountEntry_Claims value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDAAccountEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TDWVDAAccountEntry_Claims>.Enumerate_List_List_TRAKeyValuePair(TDWVDAAccountEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TDWVDAAccountEntry_Claims'.");
                
            }
            List<TRAClaim> ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertTo_List_TRAClaim(TDWVDAAccountEntry_Claims value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDAAccountEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TDWVDAAccountEntry_Claims>.Enumerate_List_TRAClaim(TDWVDAAccountEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(TDWVDAAccountEntry_Claims? value)
            {
                
                return TypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TDWVDAAccountEntry_Claims(value.Value);
                
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertTo_TDWVDAAccountEntry_Claims_nullable(TDWVDAAccountEntry_Claims value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TDWVDAAccountEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims>.GetConversionActionTo_TDWVDAAccountEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims?> ITypeConverter<TDWVDAAccountEntry_Claims>.Enumerate_TDWVDAAccountEntry_Claims_nullable(TDWVDAAccountEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent?' to 'TDWVDAAccountEntry_Claims'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_Claims value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TDWVDAAccountEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent?> ITypeConverter<TDWVDAAccountEntry_Claims>.Enumerate_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(TDWVDASmartContractEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims?' to 'TDWVDAAccountEntry_Claims'.");
                
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertTo_TDWVDASmartContractEntry_Claims_nullable(TDWVDAAccountEntry_Claims value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TDWVDAAccountEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims>.GetConversionActionTo_TDWVDASmartContractEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims?> ITypeConverter<TDWVDAAccountEntry_Claims>.Enumerate_TDWVDASmartContractEntry_Claims_nullable(TDWVDAAccountEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent?' to 'TDWVDAAccountEntry_Claims'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_Claims value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TDWVDAAccountEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent?> ITypeConverter<TDWVDAAccountEntry_Claims>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TRAEncryptedClaims_nullable(TRAEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims?' to 'TDWVDAAccountEntry_Claims'.");
                
            }
            TRAEncryptedClaims? ITypeConverter<TDWVDAAccountEntry_Claims>.ConvertTo_TRAEncryptedClaims_nullable(TDWVDAAccountEntry_Claims value)
            {
                return TypeConverter<TRAEncryptedClaims?>.ConvertFrom_TDWVDAAccountEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims>.GetConversionActionTo_TRAEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims?> ITypeConverter<TDWVDAAccountEntry_Claims>.Enumerate_TRAEncryptedClaims_nullable(TDWVDAAccountEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TDWVDAAccountEntry_Envelope'.");
                
            }
            bool ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertTo_bool(TDWVDAAccountEntry_Envelope value)
            {
                return TypeConverter<bool>.ConvertFrom_TDWVDAAccountEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Envelope>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TDWVDAAccountEntry_Envelope>.Enumerate_bool(TDWVDAAccountEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TDWVDAAccountEntry_Envelope'.");
                
            }
            long ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertTo_long(TDWVDAAccountEntry_Envelope value)
            {
                return TypeConverter<long>.ConvertFrom_TDWVDAAccountEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Envelope>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TDWVDAAccountEntry_Envelope>.Enumerate_long(TDWVDAAccountEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TDWVDAAccountEntry_Envelope intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TDWVDAAccountEntry_Envelope.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TDWVDAAccountEntry_Envelope");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertTo_string(TDWVDAAccountEntry_Envelope value)
            {
                return TypeConverter<string>.ConvertFrom_TDWVDAAccountEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Envelope>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TDWVDAAccountEntry_Envelope>.Enumerate_string(TDWVDAAccountEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TDWVDAAccountEntry_Envelope'.");
                
            }
            List<string> ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertTo_List_string(TDWVDAAccountEntry_Envelope value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TDWVDAAccountEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Envelope>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TDWVDAAccountEntry_Envelope>.Enumerate_List_string(TDWVDAAccountEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TDWVDAAccountEntry_Envelope'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertTo_List_TRAKeyValuePair(TDWVDAAccountEntry_Envelope value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDAAccountEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Envelope>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TDWVDAAccountEntry_Envelope>.Enumerate_List_TRAKeyValuePair(TDWVDAAccountEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TDWVDAAccountEntry_Claims(TDWVDAAccountEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims' to 'TDWVDAAccountEntry_Envelope'.");
                
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertTo_TDWVDAAccountEntry_Claims(TDWVDAAccountEntry_Envelope value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TDWVDAAccountEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Envelope>.GetConversionActionTo_TDWVDAAccountEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims> ITypeConverter<TDWVDAAccountEntry_Envelope>.Enumerate_TDWVDAAccountEntry_Claims(TDWVDAAccountEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TDWVDAAccountEntry_Envelope(TDWVDAAccountEntry_Envelope value)
            {
                
                return (TDWVDAAccountEntry_Envelope)value;
                
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertTo_TDWVDAAccountEntry_Envelope(TDWVDAAccountEntry_Envelope value)
            {
                return TypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TDWVDAAccountEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Envelope>.GetConversionActionTo_TDWVDAAccountEntry_Envelope()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Envelope> ITypeConverter<TDWVDAAccountEntry_Envelope>.Enumerate_TDWVDAAccountEntry_Envelope(TDWVDAAccountEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent' to 'TDWVDAAccountEntry_Envelope'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent(TDWVDAAccountEntry_Envelope value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TDWVDAAccountEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Envelope>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent> ITypeConverter<TDWVDAAccountEntry_Envelope>.Enumerate_TDWVDAAccountEntry_EnvelopeContent(TDWVDAAccountEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TDWVDAAccountEntry_Envelope'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TDWVDAAccountEntry_Envelope value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDAAccountEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Envelope>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TDWVDAAccountEntry_Envelope>.Enumerate_TDWVDAIdentityRegistryEntryParm(TDWVDAAccountEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TDWVDAAccountEntry_Envelope'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertTo_TDWVDAPostInvocationParameters(TDWVDAAccountEntry_Envelope value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDAAccountEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Envelope>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TDWVDAAccountEntry_Envelope>.Enumerate_TDWVDAPostInvocationParameters(TDWVDAAccountEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TDWVDAAccountEntry_Envelope'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertTo_TDWVDARevocationListEntryParm(TDWVDAAccountEntry_Envelope value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDAAccountEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Envelope>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TDWVDAAccountEntry_Envelope>.Enumerate_TDWVDARevocationListEntryParm(TDWVDAAccountEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TDWVDAAccountEntry_Envelope'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertTo_TDWVDAServiceEndpointEntryParm(TDWVDAAccountEntry_Envelope value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDAAccountEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Envelope>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TDWVDAAccountEntry_Envelope>.Enumerate_TDWVDAServiceEndpointEntryParm(TDWVDAAccountEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TDWVDASmartContractEntry_Claims(TDWVDASmartContractEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims' to 'TDWVDAAccountEntry_Envelope'.");
                
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertTo_TDWVDASmartContractEntry_Claims(TDWVDAAccountEntry_Envelope value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TDWVDAAccountEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Envelope>.GetConversionActionTo_TDWVDASmartContractEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims> ITypeConverter<TDWVDAAccountEntry_Envelope>.Enumerate_TDWVDASmartContractEntry_Claims(TDWVDAAccountEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TDWVDASmartContractEntry_Envelope(TDWVDASmartContractEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Envelope' to 'TDWVDAAccountEntry_Envelope'.");
                
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertTo_TDWVDASmartContractEntry_Envelope(TDWVDAAccountEntry_Envelope value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TDWVDAAccountEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Envelope>.GetConversionActionTo_TDWVDASmartContractEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Envelope> ITypeConverter<TDWVDAAccountEntry_Envelope>.Enumerate_TDWVDASmartContractEntry_Envelope(TDWVDAAccountEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent' to 'TDWVDAAccountEntry_Envelope'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent(TDWVDAAccountEntry_Envelope value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TDWVDAAccountEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Envelope>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent> ITypeConverter<TDWVDAAccountEntry_Envelope>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent(TDWVDAAccountEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TDWVDAAccountEntry_Envelope'.");
                
            }
            TRAClaim ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertTo_TRAClaim(TDWVDAAccountEntry_Envelope value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TDWVDAAccountEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Envelope>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TDWVDAAccountEntry_Envelope>.Enumerate_TRAClaim(TDWVDAAccountEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'TDWVDAAccountEntry_Envelope'.");
                
            }
            TRACredential_Envelope ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertTo_TRACredential_Envelope(TDWVDAAccountEntry_Envelope value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDAAccountEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Envelope>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<TDWVDAAccountEntry_Envelope>.Enumerate_TRACredential_Envelope(TDWVDAAccountEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TRACredential_EnvelopeContent(TRACredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeContent' to 'TDWVDAAccountEntry_Envelope'.");
                
            }
            TRACredential_EnvelopeContent ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertTo_TRACredential_EnvelopeContent(TDWVDAAccountEntry_Envelope value)
            {
                return TypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TDWVDAAccountEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Envelope>.GetConversionActionTo_TRACredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeContent> ITypeConverter<TDWVDAAccountEntry_Envelope>.Enumerate_TRACredential_EnvelopeContent(TDWVDAAccountEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TRACredential_EnvelopeLabel(TRACredential_EnvelopeLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeLabel' to 'TDWVDAAccountEntry_Envelope'.");
                
            }
            TRACredential_EnvelopeLabel ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertTo_TRACredential_EnvelopeLabel(TDWVDAAccountEntry_Envelope value)
            {
                return TypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TDWVDAAccountEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Envelope>.GetConversionActionTo_TRACredential_EnvelopeLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeLabel> ITypeConverter<TDWVDAAccountEntry_Envelope>.Enumerate_TRACredential_EnvelopeLabel(TDWVDAAccountEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'TDWVDAAccountEntry_Envelope'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertTo_TRACredential_EnvelopeSeal(TDWVDAAccountEntry_Envelope value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDAAccountEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Envelope>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<TDWVDAAccountEntry_Envelope>.Enumerate_TRACredential_EnvelopeSeal(TDWVDAAccountEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TRAEncryptedClaims(TRAEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims' to 'TDWVDAAccountEntry_Envelope'.");
                
            }
            TRAEncryptedClaims ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertTo_TRAEncryptedClaims(TDWVDAAccountEntry_Envelope value)
            {
                return TypeConverter<TRAEncryptedClaims>.ConvertFrom_TDWVDAAccountEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Envelope>.GetConversionActionTo_TRAEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims> ITypeConverter<TDWVDAAccountEntry_Envelope>.Enumerate_TRAEncryptedClaims(TDWVDAAccountEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TDWVDAAccountEntry_Envelope'.");
                
            }
            TRAKeyValuePair ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertTo_TRAKeyValuePair(TDWVDAAccountEntry_Envelope value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDAAccountEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Envelope>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TDWVDAAccountEntry_Envelope>.Enumerate_TRAKeyValuePair(TDWVDAAccountEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TDWVDAAccountEntry_Envelope'.");
                
            }
            TRACredentialType ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertTo_TRACredentialType(TDWVDAAccountEntry_Envelope value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TDWVDAAccountEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Envelope>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TDWVDAAccountEntry_Envelope>.Enumerate_TRACredentialType(TDWVDAAccountEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TDWVDAAccountEntry_Envelope'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertTo_TRAEncryptionFlag(TDWVDAAccountEntry_Envelope value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDAAccountEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Envelope>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TDWVDAAccountEntry_Envelope>.Enumerate_TRAEncryptionFlag(TDWVDAAccountEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TDWVDAAccountEntry_Envelope'.");
                
            }
            TRAServiceType ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertTo_TRAServiceType(TDWVDAAccountEntry_Envelope value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TDWVDAAccountEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Envelope>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TDWVDAAccountEntry_Envelope>.Enumerate_TRAServiceType(TDWVDAAccountEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TDWVDAAccountEntry_Envelope'.");
                
            }
            TRATrustLevel ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertTo_TRATrustLevel(TDWVDAAccountEntry_Envelope value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TDWVDAAccountEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Envelope>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TDWVDAAccountEntry_Envelope>.Enumerate_TRATrustLevel(TDWVDAAccountEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TDWVDAAccountEntry_Envelope'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertTo_List_List_TRAKeyValuePair(TDWVDAAccountEntry_Envelope value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDAAccountEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Envelope>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TDWVDAAccountEntry_Envelope>.Enumerate_List_List_TRAKeyValuePair(TDWVDAAccountEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TDWVDAAccountEntry_Envelope'.");
                
            }
            List<TRAClaim> ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertTo_List_TRAClaim(TDWVDAAccountEntry_Envelope value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDAAccountEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Envelope>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TDWVDAAccountEntry_Envelope>.Enumerate_List_TRAClaim(TDWVDAAccountEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(TDWVDAAccountEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims?' to 'TDWVDAAccountEntry_Envelope'.");
                
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertTo_TDWVDAAccountEntry_Claims_nullable(TDWVDAAccountEntry_Envelope value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TDWVDAAccountEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Envelope>.GetConversionActionTo_TDWVDAAccountEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims?> ITypeConverter<TDWVDAAccountEntry_Envelope>.Enumerate_TDWVDAAccountEntry_Claims_nullable(TDWVDAAccountEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent?' to 'TDWVDAAccountEntry_Envelope'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_Envelope value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TDWVDAAccountEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Envelope>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent?> ITypeConverter<TDWVDAAccountEntry_Envelope>.Enumerate_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(TDWVDASmartContractEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims?' to 'TDWVDAAccountEntry_Envelope'.");
                
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertTo_TDWVDASmartContractEntry_Claims_nullable(TDWVDAAccountEntry_Envelope value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TDWVDAAccountEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Envelope>.GetConversionActionTo_TDWVDASmartContractEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims?> ITypeConverter<TDWVDAAccountEntry_Envelope>.Enumerate_TDWVDASmartContractEntry_Claims_nullable(TDWVDAAccountEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent?' to 'TDWVDAAccountEntry_Envelope'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_Envelope value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TDWVDAAccountEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Envelope>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent?> ITypeConverter<TDWVDAAccountEntry_Envelope>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TRAEncryptedClaims_nullable(TRAEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims?' to 'TDWVDAAccountEntry_Envelope'.");
                
            }
            TRAEncryptedClaims? ITypeConverter<TDWVDAAccountEntry_Envelope>.ConvertTo_TRAEncryptedClaims_nullable(TDWVDAAccountEntry_Envelope value)
            {
                return TypeConverter<TRAEncryptedClaims?>.ConvertFrom_TDWVDAAccountEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Envelope>.GetConversionActionTo_TRAEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims?> ITypeConverter<TDWVDAAccountEntry_Envelope>.Enumerate_TRAEncryptedClaims_nullable(TDWVDAAccountEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TDWVDAAccountEntry_EnvelopeContent'.");
                
            }
            bool ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertTo_bool(TDWVDAAccountEntry_EnvelopeContent value)
            {
                return TypeConverter<bool>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.Enumerate_bool(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TDWVDAAccountEntry_EnvelopeContent'.");
                
            }
            long ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertTo_long(TDWVDAAccountEntry_EnvelopeContent value)
            {
                return TypeConverter<long>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.Enumerate_long(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TDWVDAAccountEntry_EnvelopeContent intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TDWVDAAccountEntry_EnvelopeContent.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TDWVDAAccountEntry_EnvelopeContent");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertTo_string(TDWVDAAccountEntry_EnvelopeContent value)
            {
                return TypeConverter<string>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.Enumerate_string(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TDWVDAAccountEntry_EnvelopeContent'.");
                
            }
            List<string> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertTo_List_string(TDWVDAAccountEntry_EnvelopeContent value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.Enumerate_List_string(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TDWVDAAccountEntry_EnvelopeContent'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertTo_List_TRAKeyValuePair(TDWVDAAccountEntry_EnvelopeContent value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.Enumerate_List_TRAKeyValuePair(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TDWVDAAccountEntry_Claims(TDWVDAAccountEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims' to 'TDWVDAAccountEntry_EnvelopeContent'.");
                
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertTo_TDWVDAAccountEntry_Claims(TDWVDAAccountEntry_EnvelopeContent value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.GetConversionActionTo_TDWVDAAccountEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.Enumerate_TDWVDAAccountEntry_Claims(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TDWVDAAccountEntry_Envelope(TDWVDAAccountEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Envelope' to 'TDWVDAAccountEntry_EnvelopeContent'.");
                
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertTo_TDWVDAAccountEntry_Envelope(TDWVDAAccountEntry_EnvelopeContent value)
            {
                return TypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.GetConversionActionTo_TDWVDAAccountEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Envelope> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.Enumerate_TDWVDAAccountEntry_Envelope(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                return (TDWVDAAccountEntry_EnvelopeContent)value;
                
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent(TDWVDAAccountEntry_EnvelopeContent value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.Enumerate_TDWVDAAccountEntry_EnvelopeContent(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TDWVDAAccountEntry_EnvelopeContent'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TDWVDAAccountEntry_EnvelopeContent value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.Enumerate_TDWVDAIdentityRegistryEntryParm(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TDWVDAAccountEntry_EnvelopeContent'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertTo_TDWVDAPostInvocationParameters(TDWVDAAccountEntry_EnvelopeContent value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.Enumerate_TDWVDAPostInvocationParameters(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TDWVDAAccountEntry_EnvelopeContent'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertTo_TDWVDARevocationListEntryParm(TDWVDAAccountEntry_EnvelopeContent value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.Enumerate_TDWVDARevocationListEntryParm(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TDWVDAAccountEntry_EnvelopeContent'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertTo_TDWVDAServiceEndpointEntryParm(TDWVDAAccountEntry_EnvelopeContent value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.Enumerate_TDWVDAServiceEndpointEntryParm(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TDWVDASmartContractEntry_Claims(TDWVDASmartContractEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims' to 'TDWVDAAccountEntry_EnvelopeContent'.");
                
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertTo_TDWVDASmartContractEntry_Claims(TDWVDAAccountEntry_EnvelopeContent value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.GetConversionActionTo_TDWVDASmartContractEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.Enumerate_TDWVDASmartContractEntry_Claims(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TDWVDASmartContractEntry_Envelope(TDWVDASmartContractEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Envelope' to 'TDWVDAAccountEntry_EnvelopeContent'.");
                
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertTo_TDWVDASmartContractEntry_Envelope(TDWVDAAccountEntry_EnvelopeContent value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.GetConversionActionTo_TDWVDASmartContractEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Envelope> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.Enumerate_TDWVDASmartContractEntry_Envelope(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent' to 'TDWVDAAccountEntry_EnvelopeContent'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent(TDWVDAAccountEntry_EnvelopeContent value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TDWVDAAccountEntry_EnvelopeContent'.");
                
            }
            TRAClaim ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertTo_TRAClaim(TDWVDAAccountEntry_EnvelopeContent value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.Enumerate_TRAClaim(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'TDWVDAAccountEntry_EnvelopeContent'.");
                
            }
            TRACredential_Envelope ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertTo_TRACredential_Envelope(TDWVDAAccountEntry_EnvelopeContent value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.Enumerate_TRACredential_Envelope(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TRACredential_EnvelopeContent(TRACredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeContent' to 'TDWVDAAccountEntry_EnvelopeContent'.");
                
            }
            TRACredential_EnvelopeContent ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertTo_TRACredential_EnvelopeContent(TDWVDAAccountEntry_EnvelopeContent value)
            {
                return TypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.GetConversionActionTo_TRACredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeContent> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.Enumerate_TRACredential_EnvelopeContent(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TRACredential_EnvelopeLabel(TRACredential_EnvelopeLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeLabel' to 'TDWVDAAccountEntry_EnvelopeContent'.");
                
            }
            TRACredential_EnvelopeLabel ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertTo_TRACredential_EnvelopeLabel(TDWVDAAccountEntry_EnvelopeContent value)
            {
                return TypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.GetConversionActionTo_TRACredential_EnvelopeLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeLabel> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.Enumerate_TRACredential_EnvelopeLabel(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'TDWVDAAccountEntry_EnvelopeContent'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertTo_TRACredential_EnvelopeSeal(TDWVDAAccountEntry_EnvelopeContent value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.Enumerate_TRACredential_EnvelopeSeal(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TRAEncryptedClaims(TRAEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims' to 'TDWVDAAccountEntry_EnvelopeContent'.");
                
            }
            TRAEncryptedClaims ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertTo_TRAEncryptedClaims(TDWVDAAccountEntry_EnvelopeContent value)
            {
                return TypeConverter<TRAEncryptedClaims>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.GetConversionActionTo_TRAEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.Enumerate_TRAEncryptedClaims(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TDWVDAAccountEntry_EnvelopeContent'.");
                
            }
            TRAKeyValuePair ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertTo_TRAKeyValuePair(TDWVDAAccountEntry_EnvelopeContent value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.Enumerate_TRAKeyValuePair(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TDWVDAAccountEntry_EnvelopeContent'.");
                
            }
            TRACredentialType ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertTo_TRACredentialType(TDWVDAAccountEntry_EnvelopeContent value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.Enumerate_TRACredentialType(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TDWVDAAccountEntry_EnvelopeContent'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertTo_TRAEncryptionFlag(TDWVDAAccountEntry_EnvelopeContent value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.Enumerate_TRAEncryptionFlag(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TDWVDAAccountEntry_EnvelopeContent'.");
                
            }
            TRAServiceType ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertTo_TRAServiceType(TDWVDAAccountEntry_EnvelopeContent value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.Enumerate_TRAServiceType(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TDWVDAAccountEntry_EnvelopeContent'.");
                
            }
            TRATrustLevel ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertTo_TRATrustLevel(TDWVDAAccountEntry_EnvelopeContent value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.Enumerate_TRATrustLevel(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TDWVDAAccountEntry_EnvelopeContent'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertTo_List_List_TRAKeyValuePair(TDWVDAAccountEntry_EnvelopeContent value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.Enumerate_List_List_TRAKeyValuePair(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TDWVDAAccountEntry_EnvelopeContent'.");
                
            }
            List<TRAClaim> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertTo_List_TRAClaim(TDWVDAAccountEntry_EnvelopeContent value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.Enumerate_List_TRAClaim(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(TDWVDAAccountEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims?' to 'TDWVDAAccountEntry_EnvelopeContent'.");
                
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertTo_TDWVDAAccountEntry_Claims_nullable(TDWVDAAccountEntry_EnvelopeContent value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.GetConversionActionTo_TDWVDAAccountEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims?> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.Enumerate_TDWVDAAccountEntry_Claims_nullable(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(value.Value);
                
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_EnvelopeContent value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent?> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.Enumerate_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(TDWVDASmartContractEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims?' to 'TDWVDAAccountEntry_EnvelopeContent'.");
                
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertTo_TDWVDASmartContractEntry_Claims_nullable(TDWVDAAccountEntry_EnvelopeContent value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.GetConversionActionTo_TDWVDASmartContractEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims?> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.Enumerate_TDWVDASmartContractEntry_Claims_nullable(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent?' to 'TDWVDAAccountEntry_EnvelopeContent'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_EnvelopeContent value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent?> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TRAEncryptedClaims_nullable(TRAEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims?' to 'TDWVDAAccountEntry_EnvelopeContent'.");
                
            }
            TRAEncryptedClaims? ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertTo_TRAEncryptedClaims_nullable(TDWVDAAccountEntry_EnvelopeContent value)
            {
                return TypeConverter<TRAEncryptedClaims?>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.GetConversionActionTo_TRAEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims?> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent>.Enumerate_TRAEncryptedClaims_nullable(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            bool ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_bool(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<bool>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_bool(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            long ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_long(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<long>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_long(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TDWVDAIdentityRegistryEntryParm intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TDWVDAIdentityRegistryEntryParm.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TDWVDAIdentityRegistryEntryParm");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_string(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<string>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_string(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            List<string> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_List_string(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_List_string(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_List_TRAKeyValuePair(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_List_TRAKeyValuePair(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDAAccountEntry_Claims(TDWVDAAccountEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TDWVDAAccountEntry_Claims(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TDWVDAAccountEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TDWVDAAccountEntry_Claims(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDAAccountEntry_Envelope(TDWVDAAccountEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Envelope' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TDWVDAAccountEntry_Envelope(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TDWVDAAccountEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Envelope> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TDWVDAAccountEntry_Envelope(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TDWVDAAccountEntry_EnvelopeContent(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                return (TDWVDAIdentityRegistryEntryParm)value;
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TDWVDAPostInvocationParameters(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TDWVDAPostInvocationParameters(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TDWVDARevocationListEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TDWVDARevocationListEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TDWVDAServiceEndpointEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TDWVDAServiceEndpointEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDASmartContractEntry_Claims(TDWVDASmartContractEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TDWVDASmartContractEntry_Claims(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TDWVDASmartContractEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TDWVDASmartContractEntry_Claims(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDASmartContractEntry_Envelope(TDWVDASmartContractEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Envelope' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TDWVDASmartContractEntry_Envelope(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TDWVDASmartContractEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Envelope> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TDWVDASmartContractEntry_Envelope(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TRAClaim ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TRAClaim(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TRAClaim(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TRACredential_Envelope ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TRACredential_Envelope(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TRACredential_Envelope(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRACredential_EnvelopeContent(TRACredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeContent' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TRACredential_EnvelopeContent ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TRACredential_EnvelopeContent(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TRACredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeContent> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TRACredential_EnvelopeContent(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRACredential_EnvelopeLabel(TRACredential_EnvelopeLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeLabel' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TRACredential_EnvelopeLabel ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TRACredential_EnvelopeLabel(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TRACredential_EnvelopeLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeLabel> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TRACredential_EnvelopeLabel(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TRACredential_EnvelopeSeal(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TRACredential_EnvelopeSeal(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRAEncryptedClaims(TRAEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TRAEncryptedClaims ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TRAEncryptedClaims(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TRAEncryptedClaims>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TRAEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TRAEncryptedClaims(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TRAKeyValuePair ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TRAKeyValuePair(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TRAKeyValuePair(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TRACredentialType ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TRACredentialType(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TRACredentialType(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TRAEncryptionFlag(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TRAEncryptionFlag(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TRAServiceType ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TRAServiceType(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TRAServiceType(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TRATrustLevel ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TRATrustLevel(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TRATrustLevel(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_List_List_TRAKeyValuePair(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_List_List_TRAKeyValuePair(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            List<TRAClaim> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_List_TRAClaim(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_List_TRAClaim(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(TDWVDAAccountEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims?' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TDWVDAAccountEntry_Claims_nullable(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TDWVDAAccountEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims?> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TDWVDAAccountEntry_Claims_nullable(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent?' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent?> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(TDWVDASmartContractEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims?' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TDWVDASmartContractEntry_Claims_nullable(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TDWVDASmartContractEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims?> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TDWVDASmartContractEntry_Claims_nullable(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent?' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent?> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRAEncryptedClaims_nullable(TRAEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims?' to 'TDWVDAIdentityRegistryEntryParm'.");
                
            }
            TRAEncryptedClaims? ITypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertTo_TRAEncryptedClaims_nullable(TDWVDAIdentityRegistryEntryParm value)
            {
                return TypeConverter<TRAEncryptedClaims?>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAIdentityRegistryEntryParm>.GetConversionActionTo_TRAEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims?> ITypeConverter<TDWVDAIdentityRegistryEntryParm>.Enumerate_TRAEncryptedClaims_nullable(TDWVDAIdentityRegistryEntryParm value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TDWVDAPostInvocationParameters'.");
                
            }
            bool ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_bool(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<bool>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_bool(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TDWVDAPostInvocationParameters'.");
                
            }
            long ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_long(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<long>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_long(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TDWVDAPostInvocationParameters intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TDWVDAPostInvocationParameters.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TDWVDAPostInvocationParameters");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_string(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<string>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_string(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TDWVDAPostInvocationParameters'.");
                
            }
            List<string> ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_List_string(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_List_string(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TDWVDAPostInvocationParameters'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_List_TRAKeyValuePair(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_List_TRAKeyValuePair(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDAAccountEntry_Claims(TDWVDAAccountEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TDWVDAAccountEntry_Claims(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TDWVDAAccountEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TDWVDAAccountEntry_Claims(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDAAccountEntry_Envelope(TDWVDAAccountEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Envelope' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TDWVDAAccountEntry_Envelope(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TDWVDAAccountEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Envelope> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TDWVDAAccountEntry_Envelope(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TDWVDAAccountEntry_EnvelopeContent(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TDWVDAIdentityRegistryEntryParm(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                return (TDWVDAPostInvocationParameters)value;
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TDWVDARevocationListEntryParm(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TDWVDARevocationListEntryParm(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TDWVDAServiceEndpointEntryParm(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TDWVDAServiceEndpointEntryParm(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDASmartContractEntry_Claims(TDWVDASmartContractEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TDWVDASmartContractEntry_Claims(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TDWVDASmartContractEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TDWVDASmartContractEntry_Claims(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDASmartContractEntry_Envelope(TDWVDASmartContractEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Envelope' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TDWVDASmartContractEntry_Envelope(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TDWVDASmartContractEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Envelope> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TDWVDASmartContractEntry_Envelope(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TRAClaim ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TRAClaim(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TRAClaim(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TRACredential_Envelope ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TRACredential_Envelope(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TRACredential_Envelope(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRACredential_EnvelopeContent(TRACredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeContent' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TRACredential_EnvelopeContent ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TRACredential_EnvelopeContent(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TRACredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeContent> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TRACredential_EnvelopeContent(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRACredential_EnvelopeLabel(TRACredential_EnvelopeLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeLabel' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TRACredential_EnvelopeLabel ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TRACredential_EnvelopeLabel(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TRACredential_EnvelopeLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeLabel> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TRACredential_EnvelopeLabel(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TRACredential_EnvelopeSeal(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TRACredential_EnvelopeSeal(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRAEncryptedClaims(TRAEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TRAEncryptedClaims ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TRAEncryptedClaims(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TRAEncryptedClaims>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TRAEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TRAEncryptedClaims(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TRAKeyValuePair ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TRAKeyValuePair(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TRAKeyValuePair(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TRACredentialType ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TRACredentialType(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TRACredentialType(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TRAEncryptionFlag(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TRAEncryptionFlag(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TRAServiceType ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TRAServiceType(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TRAServiceType(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TRATrustLevel ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TRATrustLevel(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TRATrustLevel(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TDWVDAPostInvocationParameters'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_List_List_TRAKeyValuePair(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_List_List_TRAKeyValuePair(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TDWVDAPostInvocationParameters'.");
                
            }
            List<TRAClaim> ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_List_TRAClaim(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_List_TRAClaim(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(TDWVDAAccountEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims?' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TDWVDAAccountEntry_Claims_nullable(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TDWVDAAccountEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims?> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TDWVDAAccountEntry_Claims_nullable(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent?' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent?> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(TDWVDASmartContractEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims?' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TDWVDASmartContractEntry_Claims_nullable(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TDWVDASmartContractEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims?> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TDWVDASmartContractEntry_Claims_nullable(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent?' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent?> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRAEncryptedClaims_nullable(TRAEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims?' to 'TDWVDAPostInvocationParameters'.");
                
            }
            TRAEncryptedClaims? ITypeConverter<TDWVDAPostInvocationParameters>.ConvertTo_TRAEncryptedClaims_nullable(TDWVDAPostInvocationParameters value)
            {
                return TypeConverter<TRAEncryptedClaims?>.ConvertFrom_TDWVDAPostInvocationParameters(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAPostInvocationParameters>.GetConversionActionTo_TRAEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims?> ITypeConverter<TDWVDAPostInvocationParameters>.Enumerate_TRAEncryptedClaims_nullable(TDWVDAPostInvocationParameters value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TDWVDARevocationListEntryParm'.");
                
            }
            bool ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_bool(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<bool>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_bool(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TDWVDARevocationListEntryParm'.");
                
            }
            long ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_long(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<long>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_long(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TDWVDARevocationListEntryParm intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TDWVDARevocationListEntryParm.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TDWVDARevocationListEntryParm");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_string(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<string>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_string(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TDWVDARevocationListEntryParm'.");
                
            }
            List<string> ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_List_string(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_List_string(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TDWVDARevocationListEntryParm'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_List_TRAKeyValuePair(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_List_TRAKeyValuePair(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDAAccountEntry_Claims(TDWVDAAccountEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TDWVDAAccountEntry_Claims(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TDWVDAAccountEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TDWVDAAccountEntry_Claims(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDAAccountEntry_Envelope(TDWVDAAccountEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Envelope' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TDWVDAAccountEntry_Envelope(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TDWVDAAccountEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Envelope> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TDWVDAAccountEntry_Envelope(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TDWVDAAccountEntry_EnvelopeContent(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TDWVDAIdentityRegistryEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TDWVDAPostInvocationParameters(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TDWVDAPostInvocationParameters(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                return (TDWVDARevocationListEntryParm)value;
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TDWVDAServiceEndpointEntryParm(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TDWVDAServiceEndpointEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDASmartContractEntry_Claims(TDWVDASmartContractEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TDWVDASmartContractEntry_Claims(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TDWVDASmartContractEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TDWVDASmartContractEntry_Claims(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDASmartContractEntry_Envelope(TDWVDASmartContractEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Envelope' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TDWVDASmartContractEntry_Envelope(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TDWVDASmartContractEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Envelope> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TDWVDASmartContractEntry_Envelope(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TRAClaim ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TRAClaim(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TRAClaim(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TRACredential_Envelope ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TRACredential_Envelope(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TRACredential_Envelope(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRACredential_EnvelopeContent(TRACredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeContent' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TRACredential_EnvelopeContent ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TRACredential_EnvelopeContent(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TRACredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeContent> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TRACredential_EnvelopeContent(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRACredential_EnvelopeLabel(TRACredential_EnvelopeLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeLabel' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TRACredential_EnvelopeLabel ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TRACredential_EnvelopeLabel(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TRACredential_EnvelopeLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeLabel> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TRACredential_EnvelopeLabel(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TRACredential_EnvelopeSeal(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TRACredential_EnvelopeSeal(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRAEncryptedClaims(TRAEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TRAEncryptedClaims ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TRAEncryptedClaims(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TRAEncryptedClaims>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TRAEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TRAEncryptedClaims(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TRAKeyValuePair ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TRAKeyValuePair(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TRAKeyValuePair(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TRACredentialType ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TRACredentialType(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TRACredentialType(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TRAEncryptionFlag(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TRAEncryptionFlag(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TRAServiceType ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TRAServiceType(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TRAServiceType(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TRATrustLevel ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TRATrustLevel(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TRATrustLevel(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TDWVDARevocationListEntryParm'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_List_List_TRAKeyValuePair(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_List_List_TRAKeyValuePair(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TDWVDARevocationListEntryParm'.");
                
            }
            List<TRAClaim> ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_List_TRAClaim(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_List_TRAClaim(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(TDWVDAAccountEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims?' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TDWVDAAccountEntry_Claims_nullable(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TDWVDAAccountEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims?> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TDWVDAAccountEntry_Claims_nullable(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent?' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent?> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(TDWVDASmartContractEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims?' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TDWVDASmartContractEntry_Claims_nullable(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TDWVDASmartContractEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims?> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TDWVDASmartContractEntry_Claims_nullable(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent?' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent?> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRAEncryptedClaims_nullable(TRAEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims?' to 'TDWVDARevocationListEntryParm'.");
                
            }
            TRAEncryptedClaims? ITypeConverter<TDWVDARevocationListEntryParm>.ConvertTo_TRAEncryptedClaims_nullable(TDWVDARevocationListEntryParm value)
            {
                return TypeConverter<TRAEncryptedClaims?>.ConvertFrom_TDWVDARevocationListEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDARevocationListEntryParm>.GetConversionActionTo_TRAEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims?> ITypeConverter<TDWVDARevocationListEntryParm>.Enumerate_TRAEncryptedClaims_nullable(TDWVDARevocationListEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            bool ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_bool(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<bool>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_bool(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            long ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_long(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<long>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_long(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TDWVDAServiceEndpointEntryParm intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TDWVDAServiceEndpointEntryParm.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TDWVDAServiceEndpointEntryParm");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_string(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<string>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_string(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            List<string> ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_List_string(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_List_string(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_List_TRAKeyValuePair(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_List_TRAKeyValuePair(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDAAccountEntry_Claims(TDWVDAAccountEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TDWVDAAccountEntry_Claims(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TDWVDAAccountEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TDWVDAAccountEntry_Claims(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDAAccountEntry_Envelope(TDWVDAAccountEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Envelope' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TDWVDAAccountEntry_Envelope(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TDWVDAAccountEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Envelope> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TDWVDAAccountEntry_Envelope(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TDWVDAAccountEntry_EnvelopeContent(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TDWVDAIdentityRegistryEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TDWVDAPostInvocationParameters(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TDWVDAPostInvocationParameters(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TDWVDARevocationListEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TDWVDARevocationListEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                return (TDWVDAServiceEndpointEntryParm)value;
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDASmartContractEntry_Claims(TDWVDASmartContractEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TDWVDASmartContractEntry_Claims(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TDWVDASmartContractEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TDWVDASmartContractEntry_Claims(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDASmartContractEntry_Envelope(TDWVDASmartContractEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Envelope' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TDWVDASmartContractEntry_Envelope(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TDWVDASmartContractEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Envelope> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TDWVDASmartContractEntry_Envelope(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TRAClaim ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TRAClaim(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TRAClaim(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TRACredential_Envelope ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TRACredential_Envelope(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TRACredential_Envelope(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRACredential_EnvelopeContent(TRACredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeContent' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TRACredential_EnvelopeContent ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TRACredential_EnvelopeContent(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TRACredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeContent> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TRACredential_EnvelopeContent(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRACredential_EnvelopeLabel(TRACredential_EnvelopeLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeLabel' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TRACredential_EnvelopeLabel ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TRACredential_EnvelopeLabel(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TRACredential_EnvelopeLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeLabel> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TRACredential_EnvelopeLabel(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TRACredential_EnvelopeSeal(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TRACredential_EnvelopeSeal(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRAEncryptedClaims(TRAEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TRAEncryptedClaims ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TRAEncryptedClaims(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TRAEncryptedClaims>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TRAEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TRAEncryptedClaims(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TRAKeyValuePair ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TRAKeyValuePair(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TRAKeyValuePair(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TRACredentialType ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TRACredentialType(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TRACredentialType(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TRAEncryptionFlag(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TRAEncryptionFlag(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TRAServiceType ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TRAServiceType(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TRAServiceType(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TRATrustLevel ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TRATrustLevel(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TRATrustLevel(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_List_List_TRAKeyValuePair(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_List_List_TRAKeyValuePair(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            List<TRAClaim> ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_List_TRAClaim(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_List_TRAClaim(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(TDWVDAAccountEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims?' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TDWVDAAccountEntry_Claims_nullable(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TDWVDAAccountEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims?> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TDWVDAAccountEntry_Claims_nullable(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent?' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent?> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(TDWVDASmartContractEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims?' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TDWVDASmartContractEntry_Claims_nullable(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TDWVDASmartContractEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims?> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TDWVDASmartContractEntry_Claims_nullable(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent?' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent?> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRAEncryptedClaims_nullable(TRAEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims?' to 'TDWVDAServiceEndpointEntryParm'.");
                
            }
            TRAEncryptedClaims? ITypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertTo_TRAEncryptedClaims_nullable(TDWVDAServiceEndpointEntryParm value)
            {
                return TypeConverter<TRAEncryptedClaims?>.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAServiceEndpointEntryParm>.GetConversionActionTo_TRAEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims?> ITypeConverter<TDWVDAServiceEndpointEntryParm>.Enumerate_TRAEncryptedClaims_nullable(TDWVDAServiceEndpointEntryParm value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TDWVDASmartContractEntry_Claims'.");
                
            }
            bool ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertTo_bool(TDWVDASmartContractEntry_Claims value)
            {
                return TypeConverter<bool>.ConvertFrom_TDWVDASmartContractEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TDWVDASmartContractEntry_Claims>.Enumerate_bool(TDWVDASmartContractEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TDWVDASmartContractEntry_Claims'.");
                
            }
            long ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertTo_long(TDWVDASmartContractEntry_Claims value)
            {
                return TypeConverter<long>.ConvertFrom_TDWVDASmartContractEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TDWVDASmartContractEntry_Claims>.Enumerate_long(TDWVDASmartContractEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TDWVDASmartContractEntry_Claims intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TDWVDASmartContractEntry_Claims.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TDWVDASmartContractEntry_Claims");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertTo_string(TDWVDASmartContractEntry_Claims value)
            {
                return TypeConverter<string>.ConvertFrom_TDWVDASmartContractEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TDWVDASmartContractEntry_Claims>.Enumerate_string(TDWVDASmartContractEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TDWVDASmartContractEntry_Claims'.");
                
            }
            List<string> ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertTo_List_string(TDWVDASmartContractEntry_Claims value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TDWVDASmartContractEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TDWVDASmartContractEntry_Claims>.Enumerate_List_string(TDWVDASmartContractEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TDWVDASmartContractEntry_Claims'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertTo_List_TRAKeyValuePair(TDWVDASmartContractEntry_Claims value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDASmartContractEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TDWVDASmartContractEntry_Claims>.Enumerate_List_TRAKeyValuePair(TDWVDASmartContractEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TDWVDAAccountEntry_Claims(TDWVDAAccountEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims' to 'TDWVDASmartContractEntry_Claims'.");
                
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertTo_TDWVDAAccountEntry_Claims(TDWVDASmartContractEntry_Claims value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TDWVDASmartContractEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims>.GetConversionActionTo_TDWVDAAccountEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims> ITypeConverter<TDWVDASmartContractEntry_Claims>.Enumerate_TDWVDAAccountEntry_Claims(TDWVDASmartContractEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TDWVDAAccountEntry_Envelope(TDWVDAAccountEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Envelope' to 'TDWVDASmartContractEntry_Claims'.");
                
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertTo_TDWVDAAccountEntry_Envelope(TDWVDASmartContractEntry_Claims value)
            {
                return TypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TDWVDASmartContractEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims>.GetConversionActionTo_TDWVDAAccountEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Envelope> ITypeConverter<TDWVDASmartContractEntry_Claims>.Enumerate_TDWVDAAccountEntry_Envelope(TDWVDASmartContractEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent' to 'TDWVDASmartContractEntry_Claims'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent(TDWVDASmartContractEntry_Claims value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TDWVDASmartContractEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent> ITypeConverter<TDWVDASmartContractEntry_Claims>.Enumerate_TDWVDAAccountEntry_EnvelopeContent(TDWVDASmartContractEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TDWVDASmartContractEntry_Claims'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TDWVDASmartContractEntry_Claims value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDASmartContractEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TDWVDASmartContractEntry_Claims>.Enumerate_TDWVDAIdentityRegistryEntryParm(TDWVDASmartContractEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TDWVDASmartContractEntry_Claims'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertTo_TDWVDAPostInvocationParameters(TDWVDASmartContractEntry_Claims value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDASmartContractEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TDWVDASmartContractEntry_Claims>.Enumerate_TDWVDAPostInvocationParameters(TDWVDASmartContractEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TDWVDASmartContractEntry_Claims'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertTo_TDWVDARevocationListEntryParm(TDWVDASmartContractEntry_Claims value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDASmartContractEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TDWVDASmartContractEntry_Claims>.Enumerate_TDWVDARevocationListEntryParm(TDWVDASmartContractEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TDWVDASmartContractEntry_Claims'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertTo_TDWVDAServiceEndpointEntryParm(TDWVDASmartContractEntry_Claims value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDASmartContractEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TDWVDASmartContractEntry_Claims>.Enumerate_TDWVDAServiceEndpointEntryParm(TDWVDASmartContractEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TDWVDASmartContractEntry_Claims(TDWVDASmartContractEntry_Claims value)
            {
                
                return (TDWVDASmartContractEntry_Claims)value;
                
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertTo_TDWVDASmartContractEntry_Claims(TDWVDASmartContractEntry_Claims value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TDWVDASmartContractEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims>.GetConversionActionTo_TDWVDASmartContractEntry_Claims()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims> ITypeConverter<TDWVDASmartContractEntry_Claims>.Enumerate_TDWVDASmartContractEntry_Claims(TDWVDASmartContractEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TDWVDASmartContractEntry_Envelope(TDWVDASmartContractEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Envelope' to 'TDWVDASmartContractEntry_Claims'.");
                
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertTo_TDWVDASmartContractEntry_Envelope(TDWVDASmartContractEntry_Claims value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TDWVDASmartContractEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims>.GetConversionActionTo_TDWVDASmartContractEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Envelope> ITypeConverter<TDWVDASmartContractEntry_Claims>.Enumerate_TDWVDASmartContractEntry_Envelope(TDWVDASmartContractEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent' to 'TDWVDASmartContractEntry_Claims'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent(TDWVDASmartContractEntry_Claims value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TDWVDASmartContractEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent> ITypeConverter<TDWVDASmartContractEntry_Claims>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent(TDWVDASmartContractEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TDWVDASmartContractEntry_Claims'.");
                
            }
            TRAClaim ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertTo_TRAClaim(TDWVDASmartContractEntry_Claims value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TDWVDASmartContractEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TDWVDASmartContractEntry_Claims>.Enumerate_TRAClaim(TDWVDASmartContractEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'TDWVDASmartContractEntry_Claims'.");
                
            }
            TRACredential_Envelope ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertTo_TRACredential_Envelope(TDWVDASmartContractEntry_Claims value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDASmartContractEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<TDWVDASmartContractEntry_Claims>.Enumerate_TRACredential_Envelope(TDWVDASmartContractEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TRACredential_EnvelopeContent(TRACredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeContent' to 'TDWVDASmartContractEntry_Claims'.");
                
            }
            TRACredential_EnvelopeContent ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertTo_TRACredential_EnvelopeContent(TDWVDASmartContractEntry_Claims value)
            {
                return TypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TDWVDASmartContractEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims>.GetConversionActionTo_TRACredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeContent> ITypeConverter<TDWVDASmartContractEntry_Claims>.Enumerate_TRACredential_EnvelopeContent(TDWVDASmartContractEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TRACredential_EnvelopeLabel(TRACredential_EnvelopeLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeLabel' to 'TDWVDASmartContractEntry_Claims'.");
                
            }
            TRACredential_EnvelopeLabel ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertTo_TRACredential_EnvelopeLabel(TDWVDASmartContractEntry_Claims value)
            {
                return TypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TDWVDASmartContractEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims>.GetConversionActionTo_TRACredential_EnvelopeLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeLabel> ITypeConverter<TDWVDASmartContractEntry_Claims>.Enumerate_TRACredential_EnvelopeLabel(TDWVDASmartContractEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'TDWVDASmartContractEntry_Claims'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertTo_TRACredential_EnvelopeSeal(TDWVDASmartContractEntry_Claims value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDASmartContractEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<TDWVDASmartContractEntry_Claims>.Enumerate_TRACredential_EnvelopeSeal(TDWVDASmartContractEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TRAEncryptedClaims(TRAEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims' to 'TDWVDASmartContractEntry_Claims'.");
                
            }
            TRAEncryptedClaims ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertTo_TRAEncryptedClaims(TDWVDASmartContractEntry_Claims value)
            {
                return TypeConverter<TRAEncryptedClaims>.ConvertFrom_TDWVDASmartContractEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims>.GetConversionActionTo_TRAEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims> ITypeConverter<TDWVDASmartContractEntry_Claims>.Enumerate_TRAEncryptedClaims(TDWVDASmartContractEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TDWVDASmartContractEntry_Claims'.");
                
            }
            TRAKeyValuePair ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertTo_TRAKeyValuePair(TDWVDASmartContractEntry_Claims value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDASmartContractEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TDWVDASmartContractEntry_Claims>.Enumerate_TRAKeyValuePair(TDWVDASmartContractEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TDWVDASmartContractEntry_Claims'.");
                
            }
            TRACredentialType ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertTo_TRACredentialType(TDWVDASmartContractEntry_Claims value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TDWVDASmartContractEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TDWVDASmartContractEntry_Claims>.Enumerate_TRACredentialType(TDWVDASmartContractEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TDWVDASmartContractEntry_Claims'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertTo_TRAEncryptionFlag(TDWVDASmartContractEntry_Claims value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDASmartContractEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TDWVDASmartContractEntry_Claims>.Enumerate_TRAEncryptionFlag(TDWVDASmartContractEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TDWVDASmartContractEntry_Claims'.");
                
            }
            TRAServiceType ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertTo_TRAServiceType(TDWVDASmartContractEntry_Claims value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TDWVDASmartContractEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TDWVDASmartContractEntry_Claims>.Enumerate_TRAServiceType(TDWVDASmartContractEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TDWVDASmartContractEntry_Claims'.");
                
            }
            TRATrustLevel ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertTo_TRATrustLevel(TDWVDASmartContractEntry_Claims value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TDWVDASmartContractEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TDWVDASmartContractEntry_Claims>.Enumerate_TRATrustLevel(TDWVDASmartContractEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TDWVDASmartContractEntry_Claims'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertTo_List_List_TRAKeyValuePair(TDWVDASmartContractEntry_Claims value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDASmartContractEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TDWVDASmartContractEntry_Claims>.Enumerate_List_List_TRAKeyValuePair(TDWVDASmartContractEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TDWVDASmartContractEntry_Claims'.");
                
            }
            List<TRAClaim> ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertTo_List_TRAClaim(TDWVDASmartContractEntry_Claims value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDASmartContractEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TDWVDASmartContractEntry_Claims>.Enumerate_List_TRAClaim(TDWVDASmartContractEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(TDWVDAAccountEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims?' to 'TDWVDASmartContractEntry_Claims'.");
                
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertTo_TDWVDAAccountEntry_Claims_nullable(TDWVDASmartContractEntry_Claims value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TDWVDASmartContractEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims>.GetConversionActionTo_TDWVDAAccountEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims?> ITypeConverter<TDWVDASmartContractEntry_Claims>.Enumerate_TDWVDAAccountEntry_Claims_nullable(TDWVDASmartContractEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent?' to 'TDWVDASmartContractEntry_Claims'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_Claims value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TDWVDASmartContractEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent?> ITypeConverter<TDWVDASmartContractEntry_Claims>.Enumerate_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(TDWVDASmartContractEntry_Claims? value)
            {
                
                return TypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TDWVDASmartContractEntry_Claims(value.Value);
                
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertTo_TDWVDASmartContractEntry_Claims_nullable(TDWVDASmartContractEntry_Claims value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TDWVDASmartContractEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims>.GetConversionActionTo_TDWVDASmartContractEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims?> ITypeConverter<TDWVDASmartContractEntry_Claims>.Enumerate_TDWVDASmartContractEntry_Claims_nullable(TDWVDASmartContractEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent?' to 'TDWVDASmartContractEntry_Claims'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_Claims value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TDWVDASmartContractEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent?> ITypeConverter<TDWVDASmartContractEntry_Claims>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TRAEncryptedClaims_nullable(TRAEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims?' to 'TDWVDASmartContractEntry_Claims'.");
                
            }
            TRAEncryptedClaims? ITypeConverter<TDWVDASmartContractEntry_Claims>.ConvertTo_TRAEncryptedClaims_nullable(TDWVDASmartContractEntry_Claims value)
            {
                return TypeConverter<TRAEncryptedClaims?>.ConvertFrom_TDWVDASmartContractEntry_Claims(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims>.GetConversionActionTo_TRAEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims?> ITypeConverter<TDWVDASmartContractEntry_Claims>.Enumerate_TRAEncryptedClaims_nullable(TDWVDASmartContractEntry_Claims value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TDWVDASmartContractEntry_Envelope'.");
                
            }
            bool ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertTo_bool(TDWVDASmartContractEntry_Envelope value)
            {
                return TypeConverter<bool>.ConvertFrom_TDWVDASmartContractEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Envelope>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TDWVDASmartContractEntry_Envelope>.Enumerate_bool(TDWVDASmartContractEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TDWVDASmartContractEntry_Envelope'.");
                
            }
            long ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertTo_long(TDWVDASmartContractEntry_Envelope value)
            {
                return TypeConverter<long>.ConvertFrom_TDWVDASmartContractEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Envelope>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TDWVDASmartContractEntry_Envelope>.Enumerate_long(TDWVDASmartContractEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TDWVDASmartContractEntry_Envelope intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TDWVDASmartContractEntry_Envelope.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TDWVDASmartContractEntry_Envelope");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertTo_string(TDWVDASmartContractEntry_Envelope value)
            {
                return TypeConverter<string>.ConvertFrom_TDWVDASmartContractEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Envelope>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TDWVDASmartContractEntry_Envelope>.Enumerate_string(TDWVDASmartContractEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TDWVDASmartContractEntry_Envelope'.");
                
            }
            List<string> ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertTo_List_string(TDWVDASmartContractEntry_Envelope value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TDWVDASmartContractEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Envelope>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TDWVDASmartContractEntry_Envelope>.Enumerate_List_string(TDWVDASmartContractEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TDWVDASmartContractEntry_Envelope'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertTo_List_TRAKeyValuePair(TDWVDASmartContractEntry_Envelope value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDASmartContractEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Envelope>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TDWVDASmartContractEntry_Envelope>.Enumerate_List_TRAKeyValuePair(TDWVDASmartContractEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TDWVDAAccountEntry_Claims(TDWVDAAccountEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims' to 'TDWVDASmartContractEntry_Envelope'.");
                
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertTo_TDWVDAAccountEntry_Claims(TDWVDASmartContractEntry_Envelope value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TDWVDASmartContractEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Envelope>.GetConversionActionTo_TDWVDAAccountEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims> ITypeConverter<TDWVDASmartContractEntry_Envelope>.Enumerate_TDWVDAAccountEntry_Claims(TDWVDASmartContractEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TDWVDAAccountEntry_Envelope(TDWVDAAccountEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Envelope' to 'TDWVDASmartContractEntry_Envelope'.");
                
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertTo_TDWVDAAccountEntry_Envelope(TDWVDASmartContractEntry_Envelope value)
            {
                return TypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TDWVDASmartContractEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Envelope>.GetConversionActionTo_TDWVDAAccountEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Envelope> ITypeConverter<TDWVDASmartContractEntry_Envelope>.Enumerate_TDWVDAAccountEntry_Envelope(TDWVDASmartContractEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent' to 'TDWVDASmartContractEntry_Envelope'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent(TDWVDASmartContractEntry_Envelope value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TDWVDASmartContractEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Envelope>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent> ITypeConverter<TDWVDASmartContractEntry_Envelope>.Enumerate_TDWVDAAccountEntry_EnvelopeContent(TDWVDASmartContractEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TDWVDASmartContractEntry_Envelope'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TDWVDASmartContractEntry_Envelope value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDASmartContractEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Envelope>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TDWVDASmartContractEntry_Envelope>.Enumerate_TDWVDAIdentityRegistryEntryParm(TDWVDASmartContractEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TDWVDASmartContractEntry_Envelope'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertTo_TDWVDAPostInvocationParameters(TDWVDASmartContractEntry_Envelope value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDASmartContractEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Envelope>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TDWVDASmartContractEntry_Envelope>.Enumerate_TDWVDAPostInvocationParameters(TDWVDASmartContractEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TDWVDASmartContractEntry_Envelope'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertTo_TDWVDARevocationListEntryParm(TDWVDASmartContractEntry_Envelope value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDASmartContractEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Envelope>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TDWVDASmartContractEntry_Envelope>.Enumerate_TDWVDARevocationListEntryParm(TDWVDASmartContractEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TDWVDASmartContractEntry_Envelope'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertTo_TDWVDAServiceEndpointEntryParm(TDWVDASmartContractEntry_Envelope value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDASmartContractEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Envelope>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TDWVDASmartContractEntry_Envelope>.Enumerate_TDWVDAServiceEndpointEntryParm(TDWVDASmartContractEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TDWVDASmartContractEntry_Claims(TDWVDASmartContractEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims' to 'TDWVDASmartContractEntry_Envelope'.");
                
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertTo_TDWVDASmartContractEntry_Claims(TDWVDASmartContractEntry_Envelope value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TDWVDASmartContractEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Envelope>.GetConversionActionTo_TDWVDASmartContractEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims> ITypeConverter<TDWVDASmartContractEntry_Envelope>.Enumerate_TDWVDASmartContractEntry_Claims(TDWVDASmartContractEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TDWVDASmartContractEntry_Envelope(TDWVDASmartContractEntry_Envelope value)
            {
                
                return (TDWVDASmartContractEntry_Envelope)value;
                
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertTo_TDWVDASmartContractEntry_Envelope(TDWVDASmartContractEntry_Envelope value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TDWVDASmartContractEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Envelope>.GetConversionActionTo_TDWVDASmartContractEntry_Envelope()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Envelope> ITypeConverter<TDWVDASmartContractEntry_Envelope>.Enumerate_TDWVDASmartContractEntry_Envelope(TDWVDASmartContractEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent' to 'TDWVDASmartContractEntry_Envelope'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent(TDWVDASmartContractEntry_Envelope value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TDWVDASmartContractEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Envelope>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent> ITypeConverter<TDWVDASmartContractEntry_Envelope>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent(TDWVDASmartContractEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TDWVDASmartContractEntry_Envelope'.");
                
            }
            TRAClaim ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertTo_TRAClaim(TDWVDASmartContractEntry_Envelope value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TDWVDASmartContractEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Envelope>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TDWVDASmartContractEntry_Envelope>.Enumerate_TRAClaim(TDWVDASmartContractEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'TDWVDASmartContractEntry_Envelope'.");
                
            }
            TRACredential_Envelope ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertTo_TRACredential_Envelope(TDWVDASmartContractEntry_Envelope value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDASmartContractEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Envelope>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<TDWVDASmartContractEntry_Envelope>.Enumerate_TRACredential_Envelope(TDWVDASmartContractEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TRACredential_EnvelopeContent(TRACredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeContent' to 'TDWVDASmartContractEntry_Envelope'.");
                
            }
            TRACredential_EnvelopeContent ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertTo_TRACredential_EnvelopeContent(TDWVDASmartContractEntry_Envelope value)
            {
                return TypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TDWVDASmartContractEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Envelope>.GetConversionActionTo_TRACredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeContent> ITypeConverter<TDWVDASmartContractEntry_Envelope>.Enumerate_TRACredential_EnvelopeContent(TDWVDASmartContractEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TRACredential_EnvelopeLabel(TRACredential_EnvelopeLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeLabel' to 'TDWVDASmartContractEntry_Envelope'.");
                
            }
            TRACredential_EnvelopeLabel ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertTo_TRACredential_EnvelopeLabel(TDWVDASmartContractEntry_Envelope value)
            {
                return TypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TDWVDASmartContractEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Envelope>.GetConversionActionTo_TRACredential_EnvelopeLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeLabel> ITypeConverter<TDWVDASmartContractEntry_Envelope>.Enumerate_TRACredential_EnvelopeLabel(TDWVDASmartContractEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'TDWVDASmartContractEntry_Envelope'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertTo_TRACredential_EnvelopeSeal(TDWVDASmartContractEntry_Envelope value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDASmartContractEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Envelope>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<TDWVDASmartContractEntry_Envelope>.Enumerate_TRACredential_EnvelopeSeal(TDWVDASmartContractEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TRAEncryptedClaims(TRAEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims' to 'TDWVDASmartContractEntry_Envelope'.");
                
            }
            TRAEncryptedClaims ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertTo_TRAEncryptedClaims(TDWVDASmartContractEntry_Envelope value)
            {
                return TypeConverter<TRAEncryptedClaims>.ConvertFrom_TDWVDASmartContractEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Envelope>.GetConversionActionTo_TRAEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims> ITypeConverter<TDWVDASmartContractEntry_Envelope>.Enumerate_TRAEncryptedClaims(TDWVDASmartContractEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TDWVDASmartContractEntry_Envelope'.");
                
            }
            TRAKeyValuePair ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertTo_TRAKeyValuePair(TDWVDASmartContractEntry_Envelope value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDASmartContractEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Envelope>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TDWVDASmartContractEntry_Envelope>.Enumerate_TRAKeyValuePair(TDWVDASmartContractEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TDWVDASmartContractEntry_Envelope'.");
                
            }
            TRACredentialType ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertTo_TRACredentialType(TDWVDASmartContractEntry_Envelope value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TDWVDASmartContractEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Envelope>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TDWVDASmartContractEntry_Envelope>.Enumerate_TRACredentialType(TDWVDASmartContractEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TDWVDASmartContractEntry_Envelope'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertTo_TRAEncryptionFlag(TDWVDASmartContractEntry_Envelope value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDASmartContractEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Envelope>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TDWVDASmartContractEntry_Envelope>.Enumerate_TRAEncryptionFlag(TDWVDASmartContractEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TDWVDASmartContractEntry_Envelope'.");
                
            }
            TRAServiceType ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertTo_TRAServiceType(TDWVDASmartContractEntry_Envelope value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TDWVDASmartContractEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Envelope>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TDWVDASmartContractEntry_Envelope>.Enumerate_TRAServiceType(TDWVDASmartContractEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TDWVDASmartContractEntry_Envelope'.");
                
            }
            TRATrustLevel ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertTo_TRATrustLevel(TDWVDASmartContractEntry_Envelope value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TDWVDASmartContractEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Envelope>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TDWVDASmartContractEntry_Envelope>.Enumerate_TRATrustLevel(TDWVDASmartContractEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TDWVDASmartContractEntry_Envelope'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertTo_List_List_TRAKeyValuePair(TDWVDASmartContractEntry_Envelope value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDASmartContractEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Envelope>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TDWVDASmartContractEntry_Envelope>.Enumerate_List_List_TRAKeyValuePair(TDWVDASmartContractEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TDWVDASmartContractEntry_Envelope'.");
                
            }
            List<TRAClaim> ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertTo_List_TRAClaim(TDWVDASmartContractEntry_Envelope value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDASmartContractEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Envelope>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TDWVDASmartContractEntry_Envelope>.Enumerate_List_TRAClaim(TDWVDASmartContractEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(TDWVDAAccountEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims?' to 'TDWVDASmartContractEntry_Envelope'.");
                
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertTo_TDWVDAAccountEntry_Claims_nullable(TDWVDASmartContractEntry_Envelope value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TDWVDASmartContractEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Envelope>.GetConversionActionTo_TDWVDAAccountEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims?> ITypeConverter<TDWVDASmartContractEntry_Envelope>.Enumerate_TDWVDAAccountEntry_Claims_nullable(TDWVDASmartContractEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent?' to 'TDWVDASmartContractEntry_Envelope'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_Envelope value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TDWVDASmartContractEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Envelope>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent?> ITypeConverter<TDWVDASmartContractEntry_Envelope>.Enumerate_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(TDWVDASmartContractEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims?' to 'TDWVDASmartContractEntry_Envelope'.");
                
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertTo_TDWVDASmartContractEntry_Claims_nullable(TDWVDASmartContractEntry_Envelope value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TDWVDASmartContractEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Envelope>.GetConversionActionTo_TDWVDASmartContractEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims?> ITypeConverter<TDWVDASmartContractEntry_Envelope>.Enumerate_TDWVDASmartContractEntry_Claims_nullable(TDWVDASmartContractEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent?' to 'TDWVDASmartContractEntry_Envelope'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_Envelope value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TDWVDASmartContractEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Envelope>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent?> ITypeConverter<TDWVDASmartContractEntry_Envelope>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TRAEncryptedClaims_nullable(TRAEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims?' to 'TDWVDASmartContractEntry_Envelope'.");
                
            }
            TRAEncryptedClaims? ITypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertTo_TRAEncryptedClaims_nullable(TDWVDASmartContractEntry_Envelope value)
            {
                return TypeConverter<TRAEncryptedClaims?>.ConvertFrom_TDWVDASmartContractEntry_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Envelope>.GetConversionActionTo_TRAEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims?> ITypeConverter<TDWVDASmartContractEntry_Envelope>.Enumerate_TRAEncryptedClaims_nullable(TDWVDASmartContractEntry_Envelope value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TDWVDASmartContractEntry_EnvelopeContent'.");
                
            }
            bool ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertTo_bool(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                return TypeConverter<bool>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.Enumerate_bool(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TDWVDASmartContractEntry_EnvelopeContent'.");
                
            }
            long ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertTo_long(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                return TypeConverter<long>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.Enumerate_long(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TDWVDASmartContractEntry_EnvelopeContent intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TDWVDASmartContractEntry_EnvelopeContent.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TDWVDASmartContractEntry_EnvelopeContent");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertTo_string(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                return TypeConverter<string>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.Enumerate_string(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TDWVDASmartContractEntry_EnvelopeContent'.");
                
            }
            List<string> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertTo_List_string(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.Enumerate_List_string(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TDWVDASmartContractEntry_EnvelopeContent'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertTo_List_TRAKeyValuePair(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.Enumerate_List_TRAKeyValuePair(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TDWVDAAccountEntry_Claims(TDWVDAAccountEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims' to 'TDWVDASmartContractEntry_EnvelopeContent'.");
                
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertTo_TDWVDAAccountEntry_Claims(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.GetConversionActionTo_TDWVDAAccountEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.Enumerate_TDWVDAAccountEntry_Claims(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TDWVDAAccountEntry_Envelope(TDWVDAAccountEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Envelope' to 'TDWVDASmartContractEntry_EnvelopeContent'.");
                
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertTo_TDWVDAAccountEntry_Envelope(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                return TypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.GetConversionActionTo_TDWVDAAccountEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Envelope> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.Enumerate_TDWVDAAccountEntry_Envelope(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent' to 'TDWVDASmartContractEntry_EnvelopeContent'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.Enumerate_TDWVDAAccountEntry_EnvelopeContent(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TDWVDASmartContractEntry_EnvelopeContent'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.Enumerate_TDWVDAIdentityRegistryEntryParm(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TDWVDASmartContractEntry_EnvelopeContent'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertTo_TDWVDAPostInvocationParameters(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.Enumerate_TDWVDAPostInvocationParameters(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TDWVDASmartContractEntry_EnvelopeContent'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertTo_TDWVDARevocationListEntryParm(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.Enumerate_TDWVDARevocationListEntryParm(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TDWVDASmartContractEntry_EnvelopeContent'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertTo_TDWVDAServiceEndpointEntryParm(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.Enumerate_TDWVDAServiceEndpointEntryParm(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TDWVDASmartContractEntry_Claims(TDWVDASmartContractEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims' to 'TDWVDASmartContractEntry_EnvelopeContent'.");
                
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertTo_TDWVDASmartContractEntry_Claims(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.GetConversionActionTo_TDWVDASmartContractEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.Enumerate_TDWVDASmartContractEntry_Claims(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TDWVDASmartContractEntry_Envelope(TDWVDASmartContractEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Envelope' to 'TDWVDASmartContractEntry_EnvelopeContent'.");
                
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertTo_TDWVDASmartContractEntry_Envelope(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.GetConversionActionTo_TDWVDASmartContractEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Envelope> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.Enumerate_TDWVDASmartContractEntry_Envelope(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                return (TDWVDASmartContractEntry_EnvelopeContent)value;
                
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TDWVDASmartContractEntry_EnvelopeContent'.");
                
            }
            TRAClaim ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertTo_TRAClaim(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.Enumerate_TRAClaim(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'TDWVDASmartContractEntry_EnvelopeContent'.");
                
            }
            TRACredential_Envelope ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertTo_TRACredential_Envelope(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.Enumerate_TRACredential_Envelope(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TRACredential_EnvelopeContent(TRACredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeContent' to 'TDWVDASmartContractEntry_EnvelopeContent'.");
                
            }
            TRACredential_EnvelopeContent ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertTo_TRACredential_EnvelopeContent(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                return TypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.GetConversionActionTo_TRACredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeContent> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.Enumerate_TRACredential_EnvelopeContent(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TRACredential_EnvelopeLabel(TRACredential_EnvelopeLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeLabel' to 'TDWVDASmartContractEntry_EnvelopeContent'.");
                
            }
            TRACredential_EnvelopeLabel ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertTo_TRACredential_EnvelopeLabel(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                return TypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.GetConversionActionTo_TRACredential_EnvelopeLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeLabel> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.Enumerate_TRACredential_EnvelopeLabel(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'TDWVDASmartContractEntry_EnvelopeContent'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertTo_TRACredential_EnvelopeSeal(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.Enumerate_TRACredential_EnvelopeSeal(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TRAEncryptedClaims(TRAEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims' to 'TDWVDASmartContractEntry_EnvelopeContent'.");
                
            }
            TRAEncryptedClaims ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertTo_TRAEncryptedClaims(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                return TypeConverter<TRAEncryptedClaims>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.GetConversionActionTo_TRAEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.Enumerate_TRAEncryptedClaims(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TDWVDASmartContractEntry_EnvelopeContent'.");
                
            }
            TRAKeyValuePair ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertTo_TRAKeyValuePair(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.Enumerate_TRAKeyValuePair(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TDWVDASmartContractEntry_EnvelopeContent'.");
                
            }
            TRACredentialType ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertTo_TRACredentialType(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.Enumerate_TRACredentialType(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TDWVDASmartContractEntry_EnvelopeContent'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertTo_TRAEncryptionFlag(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.Enumerate_TRAEncryptionFlag(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TDWVDASmartContractEntry_EnvelopeContent'.");
                
            }
            TRAServiceType ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertTo_TRAServiceType(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.Enumerate_TRAServiceType(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TDWVDASmartContractEntry_EnvelopeContent'.");
                
            }
            TRATrustLevel ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertTo_TRATrustLevel(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.Enumerate_TRATrustLevel(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TDWVDASmartContractEntry_EnvelopeContent'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertTo_List_List_TRAKeyValuePair(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.Enumerate_List_List_TRAKeyValuePair(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TDWVDASmartContractEntry_EnvelopeContent'.");
                
            }
            List<TRAClaim> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertTo_List_TRAClaim(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.Enumerate_List_TRAClaim(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(TDWVDAAccountEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims?' to 'TDWVDASmartContractEntry_EnvelopeContent'.");
                
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertTo_TDWVDAAccountEntry_Claims_nullable(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.GetConversionActionTo_TDWVDAAccountEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims?> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.Enumerate_TDWVDAAccountEntry_Claims_nullable(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent?' to 'TDWVDASmartContractEntry_EnvelopeContent'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent?> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.Enumerate_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(TDWVDASmartContractEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims?' to 'TDWVDASmartContractEntry_EnvelopeContent'.");
                
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertTo_TDWVDASmartContractEntry_Claims_nullable(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.GetConversionActionTo_TDWVDASmartContractEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims?> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.Enumerate_TDWVDASmartContractEntry_Claims_nullable(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(value.Value);
                
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent?> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TRAEncryptedClaims_nullable(TRAEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims?' to 'TDWVDASmartContractEntry_EnvelopeContent'.");
                
            }
            TRAEncryptedClaims? ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertTo_TRAEncryptedClaims_nullable(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                return TypeConverter<TRAEncryptedClaims?>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.GetConversionActionTo_TRAEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims?> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.Enumerate_TRAEncryptedClaims_nullable(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TRAClaim'.");
                
            }
            bool ITypeConverter<TRAClaim>.ConvertTo_bool(TRAClaim value)
            {
                return TypeConverter<bool>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TRAClaim>.Enumerate_bool(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TRAClaim'.");
                
            }
            long ITypeConverter<TRAClaim>.ConvertTo_long(TRAClaim value)
            {
                return TypeConverter<long>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TRAClaim>.Enumerate_long(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TRAClaim intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TRAClaim.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TRAClaim");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TRAClaim>.ConvertTo_string(TRAClaim value)
            {
                return TypeConverter<string>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TRAClaim>.Enumerate_string(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TRAClaim'.");
                
            }
            List<string> ITypeConverter<TRAClaim>.ConvertTo_List_string(TRAClaim value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TRAClaim>.Enumerate_List_string(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TRAClaim'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TRAClaim>.ConvertTo_List_TRAKeyValuePair(TRAClaim value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TRAClaim>.Enumerate_List_TRAKeyValuePair(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TDWVDAAccountEntry_Claims(TDWVDAAccountEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims' to 'TRAClaim'.");
                
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TRAClaim>.ConvertTo_TDWVDAAccountEntry_Claims(TRAClaim value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TDWVDAAccountEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims> ITypeConverter<TRAClaim>.Enumerate_TDWVDAAccountEntry_Claims(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TDWVDAAccountEntry_Envelope(TDWVDAAccountEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Envelope' to 'TRAClaim'.");
                
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TRAClaim>.ConvertTo_TDWVDAAccountEntry_Envelope(TRAClaim value)
            {
                return TypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TDWVDAAccountEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Envelope> ITypeConverter<TRAClaim>.Enumerate_TDWVDAAccountEntry_Envelope(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent' to 'TRAClaim'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TRAClaim>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent(TRAClaim value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent> ITypeConverter<TRAClaim>.Enumerate_TDWVDAAccountEntry_EnvelopeContent(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TRAClaim'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TRAClaim>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TRAClaim value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TRAClaim>.Enumerate_TDWVDAIdentityRegistryEntryParm(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TRAClaim'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TRAClaim>.ConvertTo_TDWVDAPostInvocationParameters(TRAClaim value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TRAClaim>.Enumerate_TDWVDAPostInvocationParameters(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TRAClaim'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TRAClaim>.ConvertTo_TDWVDARevocationListEntryParm(TRAClaim value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TRAClaim>.Enumerate_TDWVDARevocationListEntryParm(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TRAClaim'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TRAClaim>.ConvertTo_TDWVDAServiceEndpointEntryParm(TRAClaim value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TRAClaim>.Enumerate_TDWVDAServiceEndpointEntryParm(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TDWVDASmartContractEntry_Claims(TDWVDASmartContractEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims' to 'TRAClaim'.");
                
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TRAClaim>.ConvertTo_TDWVDASmartContractEntry_Claims(TRAClaim value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TDWVDASmartContractEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims> ITypeConverter<TRAClaim>.Enumerate_TDWVDASmartContractEntry_Claims(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TDWVDASmartContractEntry_Envelope(TDWVDASmartContractEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Envelope' to 'TRAClaim'.");
                
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TRAClaim>.ConvertTo_TDWVDASmartContractEntry_Envelope(TRAClaim value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TDWVDASmartContractEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Envelope> ITypeConverter<TRAClaim>.Enumerate_TDWVDASmartContractEntry_Envelope(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent' to 'TRAClaim'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TRAClaim>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent(TRAClaim value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent> ITypeConverter<TRAClaim>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                return (TRAClaim)value;
                
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertTo_TRAClaim(TRAClaim value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TRAClaim>.Enumerate_TRAClaim(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'TRAClaim'.");
                
            }
            TRACredential_Envelope ITypeConverter<TRAClaim>.ConvertTo_TRACredential_Envelope(TRAClaim value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<TRAClaim>.Enumerate_TRACredential_Envelope(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TRACredential_EnvelopeContent(TRACredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeContent' to 'TRAClaim'.");
                
            }
            TRACredential_EnvelopeContent ITypeConverter<TRAClaim>.ConvertTo_TRACredential_EnvelopeContent(TRAClaim value)
            {
                return TypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TRACredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeContent> ITypeConverter<TRAClaim>.Enumerate_TRACredential_EnvelopeContent(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TRACredential_EnvelopeLabel(TRACredential_EnvelopeLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeLabel' to 'TRAClaim'.");
                
            }
            TRACredential_EnvelopeLabel ITypeConverter<TRAClaim>.ConvertTo_TRACredential_EnvelopeLabel(TRAClaim value)
            {
                return TypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TRACredential_EnvelopeLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeLabel> ITypeConverter<TRAClaim>.Enumerate_TRACredential_EnvelopeLabel(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'TRAClaim'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRAClaim>.ConvertTo_TRACredential_EnvelopeSeal(TRAClaim value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<TRAClaim>.Enumerate_TRACredential_EnvelopeSeal(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TRAEncryptedClaims(TRAEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims' to 'TRAClaim'.");
                
            }
            TRAEncryptedClaims ITypeConverter<TRAClaim>.ConvertTo_TRAEncryptedClaims(TRAClaim value)
            {
                return TypeConverter<TRAEncryptedClaims>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TRAEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims> ITypeConverter<TRAClaim>.Enumerate_TRAEncryptedClaims(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TRAClaim'.");
                
            }
            TRAKeyValuePair ITypeConverter<TRAClaim>.ConvertTo_TRAKeyValuePair(TRAClaim value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TRAClaim>.Enumerate_TRAKeyValuePair(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TRAClaim'.");
                
            }
            TRACredentialType ITypeConverter<TRAClaim>.ConvertTo_TRACredentialType(TRAClaim value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TRAClaim>.Enumerate_TRACredentialType(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TRAClaim'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TRAClaim>.ConvertTo_TRAEncryptionFlag(TRAClaim value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TRAClaim>.Enumerate_TRAEncryptionFlag(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TRAClaim'.");
                
            }
            TRAServiceType ITypeConverter<TRAClaim>.ConvertTo_TRAServiceType(TRAClaim value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TRAClaim>.Enumerate_TRAServiceType(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TRAClaim'.");
                
            }
            TRATrustLevel ITypeConverter<TRAClaim>.ConvertTo_TRATrustLevel(TRAClaim value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TRAClaim>.Enumerate_TRATrustLevel(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TRAClaim'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TRAClaim>.ConvertTo_List_List_TRAKeyValuePair(TRAClaim value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TRAClaim>.Enumerate_List_List_TRAKeyValuePair(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TRAClaim'.");
                
            }
            List<TRAClaim> ITypeConverter<TRAClaim>.ConvertTo_List_TRAClaim(TRAClaim value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TRAClaim>.Enumerate_List_TRAClaim(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(TDWVDAAccountEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims?' to 'TRAClaim'.");
                
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TRAClaim>.ConvertTo_TDWVDAAccountEntry_Claims_nullable(TRAClaim value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TDWVDAAccountEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims?> ITypeConverter<TRAClaim>.Enumerate_TDWVDAAccountEntry_Claims_nullable(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent?' to 'TRAClaim'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TRAClaim>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent_nullable(TRAClaim value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent?> ITypeConverter<TRAClaim>.Enumerate_TDWVDAAccountEntry_EnvelopeContent_nullable(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(TDWVDASmartContractEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims?' to 'TRAClaim'.");
                
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TRAClaim>.ConvertTo_TDWVDASmartContractEntry_Claims_nullable(TRAClaim value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TDWVDASmartContractEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims?> ITypeConverter<TRAClaim>.Enumerate_TDWVDASmartContractEntry_Claims_nullable(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent?' to 'TRAClaim'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TRAClaim>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent_nullable(TRAClaim value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent?> ITypeConverter<TRAClaim>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent_nullable(TRAClaim value)
            {
                
                yield break;
            }
            TRAClaim ITypeConverter<TRAClaim>.ConvertFrom_TRAEncryptedClaims_nullable(TRAEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims?' to 'TRAClaim'.");
                
            }
            TRAEncryptedClaims? ITypeConverter<TRAClaim>.ConvertTo_TRAEncryptedClaims_nullable(TRAClaim value)
            {
                return TypeConverter<TRAEncryptedClaims?>.ConvertFrom_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<TRAClaim>.GetConversionActionTo_TRAEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims?> ITypeConverter<TRAClaim>.Enumerate_TRAEncryptedClaims_nullable(TRAClaim value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TRACredential_Envelope'.");
                
            }
            bool ITypeConverter<TRACredential_Envelope>.ConvertTo_bool(TRACredential_Envelope value)
            {
                return TypeConverter<bool>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TRACredential_Envelope>.Enumerate_bool(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TRACredential_Envelope'.");
                
            }
            long ITypeConverter<TRACredential_Envelope>.ConvertTo_long(TRACredential_Envelope value)
            {
                return TypeConverter<long>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TRACredential_Envelope>.Enumerate_long(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TRACredential_Envelope intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TRACredential_Envelope.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TRACredential_Envelope");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TRACredential_Envelope>.ConvertTo_string(TRACredential_Envelope value)
            {
                return TypeConverter<string>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TRACredential_Envelope>.Enumerate_string(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TRACredential_Envelope'.");
                
            }
            List<string> ITypeConverter<TRACredential_Envelope>.ConvertTo_List_string(TRACredential_Envelope value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TRACredential_Envelope>.Enumerate_List_string(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TRACredential_Envelope'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TRACredential_Envelope>.ConvertTo_List_TRAKeyValuePair(TRACredential_Envelope value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TRACredential_Envelope>.Enumerate_List_TRAKeyValuePair(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDAAccountEntry_Claims(TDWVDAAccountEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims' to 'TRACredential_Envelope'.");
                
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TRACredential_Envelope>.ConvertTo_TDWVDAAccountEntry_Claims(TRACredential_Envelope value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_TDWVDAAccountEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims> ITypeConverter<TRACredential_Envelope>.Enumerate_TDWVDAAccountEntry_Claims(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDAAccountEntry_Envelope(TDWVDAAccountEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Envelope' to 'TRACredential_Envelope'.");
                
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TRACredential_Envelope>.ConvertTo_TDWVDAAccountEntry_Envelope(TRACredential_Envelope value)
            {
                return TypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_TDWVDAAccountEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Envelope> ITypeConverter<TRACredential_Envelope>.Enumerate_TDWVDAAccountEntry_Envelope(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent' to 'TRACredential_Envelope'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TRACredential_Envelope>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent(TRACredential_Envelope value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent> ITypeConverter<TRACredential_Envelope>.Enumerate_TDWVDAAccountEntry_EnvelopeContent(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TRACredential_Envelope'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TRACredential_Envelope>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TRACredential_Envelope value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TRACredential_Envelope>.Enumerate_TDWVDAIdentityRegistryEntryParm(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TRACredential_Envelope'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TRACredential_Envelope>.ConvertTo_TDWVDAPostInvocationParameters(TRACredential_Envelope value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TRACredential_Envelope>.Enumerate_TDWVDAPostInvocationParameters(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TRACredential_Envelope'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TRACredential_Envelope>.ConvertTo_TDWVDARevocationListEntryParm(TRACredential_Envelope value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TRACredential_Envelope>.Enumerate_TDWVDARevocationListEntryParm(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TRACredential_Envelope'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TRACredential_Envelope>.ConvertTo_TDWVDAServiceEndpointEntryParm(TRACredential_Envelope value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TRACredential_Envelope>.Enumerate_TDWVDAServiceEndpointEntryParm(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDASmartContractEntry_Claims(TDWVDASmartContractEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims' to 'TRACredential_Envelope'.");
                
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TRACredential_Envelope>.ConvertTo_TDWVDASmartContractEntry_Claims(TRACredential_Envelope value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_TDWVDASmartContractEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims> ITypeConverter<TRACredential_Envelope>.Enumerate_TDWVDASmartContractEntry_Claims(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDASmartContractEntry_Envelope(TDWVDASmartContractEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Envelope' to 'TRACredential_Envelope'.");
                
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TRACredential_Envelope>.ConvertTo_TDWVDASmartContractEntry_Envelope(TRACredential_Envelope value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_TDWVDASmartContractEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Envelope> ITypeConverter<TRACredential_Envelope>.Enumerate_TDWVDASmartContractEntry_Envelope(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent' to 'TRACredential_Envelope'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TRACredential_Envelope>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent(TRACredential_Envelope value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent> ITypeConverter<TRACredential_Envelope>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TRACredential_Envelope'.");
                
            }
            TRAClaim ITypeConverter<TRACredential_Envelope>.ConvertTo_TRAClaim(TRACredential_Envelope value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TRACredential_Envelope>.Enumerate_TRAClaim(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                return (TRACredential_Envelope)value;
                
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertTo_TRACredential_Envelope(TRACredential_Envelope value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<TRACredential_Envelope>.Enumerate_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_TRACredential_EnvelopeContent(TRACredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeContent' to 'TRACredential_Envelope'.");
                
            }
            TRACredential_EnvelopeContent ITypeConverter<TRACredential_Envelope>.ConvertTo_TRACredential_EnvelopeContent(TRACredential_Envelope value)
            {
                return TypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_TRACredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeContent> ITypeConverter<TRACredential_Envelope>.Enumerate_TRACredential_EnvelopeContent(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_TRACredential_EnvelopeLabel(TRACredential_EnvelopeLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeLabel' to 'TRACredential_Envelope'.");
                
            }
            TRACredential_EnvelopeLabel ITypeConverter<TRACredential_Envelope>.ConvertTo_TRACredential_EnvelopeLabel(TRACredential_Envelope value)
            {
                return TypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_TRACredential_EnvelopeLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeLabel> ITypeConverter<TRACredential_Envelope>.Enumerate_TRACredential_EnvelopeLabel(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'TRACredential_Envelope'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_Envelope>.ConvertTo_TRACredential_EnvelopeSeal(TRACredential_Envelope value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<TRACredential_Envelope>.Enumerate_TRACredential_EnvelopeSeal(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_TRAEncryptedClaims(TRAEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims' to 'TRACredential_Envelope'.");
                
            }
            TRAEncryptedClaims ITypeConverter<TRACredential_Envelope>.ConvertTo_TRAEncryptedClaims(TRACredential_Envelope value)
            {
                return TypeConverter<TRAEncryptedClaims>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_TRAEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims> ITypeConverter<TRACredential_Envelope>.Enumerate_TRAEncryptedClaims(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TRACredential_Envelope'.");
                
            }
            TRAKeyValuePair ITypeConverter<TRACredential_Envelope>.ConvertTo_TRAKeyValuePair(TRACredential_Envelope value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TRACredential_Envelope>.Enumerate_TRAKeyValuePair(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TRACredential_Envelope'.");
                
            }
            TRACredentialType ITypeConverter<TRACredential_Envelope>.ConvertTo_TRACredentialType(TRACredential_Envelope value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TRACredential_Envelope>.Enumerate_TRACredentialType(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TRACredential_Envelope'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TRACredential_Envelope>.ConvertTo_TRAEncryptionFlag(TRACredential_Envelope value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TRACredential_Envelope>.Enumerate_TRAEncryptionFlag(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TRACredential_Envelope'.");
                
            }
            TRAServiceType ITypeConverter<TRACredential_Envelope>.ConvertTo_TRAServiceType(TRACredential_Envelope value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TRACredential_Envelope>.Enumerate_TRAServiceType(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TRACredential_Envelope'.");
                
            }
            TRATrustLevel ITypeConverter<TRACredential_Envelope>.ConvertTo_TRATrustLevel(TRACredential_Envelope value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TRACredential_Envelope>.Enumerate_TRATrustLevel(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TRACredential_Envelope'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TRACredential_Envelope>.ConvertTo_List_List_TRAKeyValuePair(TRACredential_Envelope value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TRACredential_Envelope>.Enumerate_List_List_TRAKeyValuePair(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TRACredential_Envelope'.");
                
            }
            List<TRAClaim> ITypeConverter<TRACredential_Envelope>.ConvertTo_List_TRAClaim(TRACredential_Envelope value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TRACredential_Envelope>.Enumerate_List_TRAClaim(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(TDWVDAAccountEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims?' to 'TRACredential_Envelope'.");
                
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TRACredential_Envelope>.ConvertTo_TDWVDAAccountEntry_Claims_nullable(TRACredential_Envelope value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_TDWVDAAccountEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims?> ITypeConverter<TRACredential_Envelope>.Enumerate_TDWVDAAccountEntry_Claims_nullable(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent?' to 'TRACredential_Envelope'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TRACredential_Envelope>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent_nullable(TRACredential_Envelope value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent?> ITypeConverter<TRACredential_Envelope>.Enumerate_TDWVDAAccountEntry_EnvelopeContent_nullable(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(TDWVDASmartContractEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims?' to 'TRACredential_Envelope'.");
                
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TRACredential_Envelope>.ConvertTo_TDWVDASmartContractEntry_Claims_nullable(TRACredential_Envelope value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_TDWVDASmartContractEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims?> ITypeConverter<TRACredential_Envelope>.Enumerate_TDWVDASmartContractEntry_Claims_nullable(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent?' to 'TRACredential_Envelope'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TRACredential_Envelope>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent_nullable(TRACredential_Envelope value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent?> ITypeConverter<TRACredential_Envelope>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent_nullable(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_Envelope ITypeConverter<TRACredential_Envelope>.ConvertFrom_TRAEncryptedClaims_nullable(TRAEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims?' to 'TRACredential_Envelope'.");
                
            }
            TRAEncryptedClaims? ITypeConverter<TRACredential_Envelope>.ConvertTo_TRAEncryptedClaims_nullable(TRACredential_Envelope value)
            {
                return TypeConverter<TRAEncryptedClaims?>.ConvertFrom_TRACredential_Envelope(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_Envelope>.GetConversionActionTo_TRAEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims?> ITypeConverter<TRACredential_Envelope>.Enumerate_TRAEncryptedClaims_nullable(TRACredential_Envelope value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeContent ITypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TRACredential_EnvelopeContent'.");
                
            }
            bool ITypeConverter<TRACredential_EnvelopeContent>.ConvertTo_bool(TRACredential_EnvelopeContent value)
            {
                return TypeConverter<bool>.ConvertFrom_TRACredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeContent>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TRACredential_EnvelopeContent>.Enumerate_bool(TRACredential_EnvelopeContent value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeContent ITypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TRACredential_EnvelopeContent'.");
                
            }
            long ITypeConverter<TRACredential_EnvelopeContent>.ConvertTo_long(TRACredential_EnvelopeContent value)
            {
                return TypeConverter<long>.ConvertFrom_TRACredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeContent>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TRACredential_EnvelopeContent>.Enumerate_long(TRACredential_EnvelopeContent value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeContent ITypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TRACredential_EnvelopeContent intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TRACredential_EnvelopeContent.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TRACredential_EnvelopeContent");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TRACredential_EnvelopeContent>.ConvertTo_string(TRACredential_EnvelopeContent value)
            {
                return TypeConverter<string>.ConvertFrom_TRACredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeContent>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TRACredential_EnvelopeContent>.Enumerate_string(TRACredential_EnvelopeContent value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeContent ITypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TRACredential_EnvelopeContent'.");
                
            }
            List<string> ITypeConverter<TRACredential_EnvelopeContent>.ConvertTo_List_string(TRACredential_EnvelopeContent value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TRACredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeContent>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TRACredential_EnvelopeContent>.Enumerate_List_string(TRACredential_EnvelopeContent value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeContent ITypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TRACredential_EnvelopeContent'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TRACredential_EnvelopeContent>.ConvertTo_List_TRAKeyValuePair(TRACredential_EnvelopeContent value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRACredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeContent>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TRACredential_EnvelopeContent>.Enumerate_List_TRAKeyValuePair(TRACredential_EnvelopeContent value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeContent ITypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TDWVDAAccountEntry_Claims(TDWVDAAccountEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims' to 'TRACredential_EnvelopeContent'.");
                
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TRACredential_EnvelopeContent>.ConvertTo_TDWVDAAccountEntry_Claims(TRACredential_EnvelopeContent value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TRACredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeContent>.GetConversionActionTo_TDWVDAAccountEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims> ITypeConverter<TRACredential_EnvelopeContent>.Enumerate_TDWVDAAccountEntry_Claims(TRACredential_EnvelopeContent value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeContent ITypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TDWVDAAccountEntry_Envelope(TDWVDAAccountEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Envelope' to 'TRACredential_EnvelopeContent'.");
                
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TRACredential_EnvelopeContent>.ConvertTo_TDWVDAAccountEntry_Envelope(TRACredential_EnvelopeContent value)
            {
                return TypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TRACredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeContent>.GetConversionActionTo_TDWVDAAccountEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Envelope> ITypeConverter<TRACredential_EnvelopeContent>.Enumerate_TDWVDAAccountEntry_Envelope(TRACredential_EnvelopeContent value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeContent ITypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent' to 'TRACredential_EnvelopeContent'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TRACredential_EnvelopeContent>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent(TRACredential_EnvelopeContent value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TRACredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeContent>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent> ITypeConverter<TRACredential_EnvelopeContent>.Enumerate_TDWVDAAccountEntry_EnvelopeContent(TRACredential_EnvelopeContent value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeContent ITypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TRACredential_EnvelopeContent'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TRACredential_EnvelopeContent>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TRACredential_EnvelopeContent value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRACredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeContent>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TRACredential_EnvelopeContent>.Enumerate_TDWVDAIdentityRegistryEntryParm(TRACredential_EnvelopeContent value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeContent ITypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TRACredential_EnvelopeContent'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TRACredential_EnvelopeContent>.ConvertTo_TDWVDAPostInvocationParameters(TRACredential_EnvelopeContent value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRACredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeContent>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TRACredential_EnvelopeContent>.Enumerate_TDWVDAPostInvocationParameters(TRACredential_EnvelopeContent value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeContent ITypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TRACredential_EnvelopeContent'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TRACredential_EnvelopeContent>.ConvertTo_TDWVDARevocationListEntryParm(TRACredential_EnvelopeContent value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRACredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeContent>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TRACredential_EnvelopeContent>.Enumerate_TDWVDARevocationListEntryParm(TRACredential_EnvelopeContent value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeContent ITypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TRACredential_EnvelopeContent'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TRACredential_EnvelopeContent>.ConvertTo_TDWVDAServiceEndpointEntryParm(TRACredential_EnvelopeContent value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRACredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeContent>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TRACredential_EnvelopeContent>.Enumerate_TDWVDAServiceEndpointEntryParm(TRACredential_EnvelopeContent value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeContent ITypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TDWVDASmartContractEntry_Claims(TDWVDASmartContractEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims' to 'TRACredential_EnvelopeContent'.");
                
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TRACredential_EnvelopeContent>.ConvertTo_TDWVDASmartContractEntry_Claims(TRACredential_EnvelopeContent value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TRACredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeContent>.GetConversionActionTo_TDWVDASmartContractEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims> ITypeConverter<TRACredential_EnvelopeContent>.Enumerate_TDWVDASmartContractEntry_Claims(TRACredential_EnvelopeContent value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeContent ITypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TDWVDASmartContractEntry_Envelope(TDWVDASmartContractEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Envelope' to 'TRACredential_EnvelopeContent'.");
                
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TRACredential_EnvelopeContent>.ConvertTo_TDWVDASmartContractEntry_Envelope(TRACredential_EnvelopeContent value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TRACredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeContent>.GetConversionActionTo_TDWVDASmartContractEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Envelope> ITypeConverter<TRACredential_EnvelopeContent>.Enumerate_TDWVDASmartContractEntry_Envelope(TRACredential_EnvelopeContent value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeContent ITypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent' to 'TRACredential_EnvelopeContent'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TRACredential_EnvelopeContent>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent(TRACredential_EnvelopeContent value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TRACredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeContent>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent> ITypeConverter<TRACredential_EnvelopeContent>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent(TRACredential_EnvelopeContent value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeContent ITypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TRACredential_EnvelopeContent'.");
                
            }
            TRAClaim ITypeConverter<TRACredential_EnvelopeContent>.ConvertTo_TRAClaim(TRACredential_EnvelopeContent value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TRACredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeContent>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TRACredential_EnvelopeContent>.Enumerate_TRAClaim(TRACredential_EnvelopeContent value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeContent ITypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'TRACredential_EnvelopeContent'.");
                
            }
            TRACredential_Envelope ITypeConverter<TRACredential_EnvelopeContent>.ConvertTo_TRACredential_Envelope(TRACredential_EnvelopeContent value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_TRACredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeContent>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<TRACredential_EnvelopeContent>.Enumerate_TRACredential_Envelope(TRACredential_EnvelopeContent value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeContent ITypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TRACredential_EnvelopeContent(TRACredential_EnvelopeContent value)
            {
                
                return (TRACredential_EnvelopeContent)value;
                
            }
            TRACredential_EnvelopeContent ITypeConverter<TRACredential_EnvelopeContent>.ConvertTo_TRACredential_EnvelopeContent(TRACredential_EnvelopeContent value)
            {
                return TypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TRACredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeContent>.GetConversionActionTo_TRACredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeContent> ITypeConverter<TRACredential_EnvelopeContent>.Enumerate_TRACredential_EnvelopeContent(TRACredential_EnvelopeContent value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeContent ITypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TRACredential_EnvelopeLabel(TRACredential_EnvelopeLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeLabel' to 'TRACredential_EnvelopeContent'.");
                
            }
            TRACredential_EnvelopeLabel ITypeConverter<TRACredential_EnvelopeContent>.ConvertTo_TRACredential_EnvelopeLabel(TRACredential_EnvelopeContent value)
            {
                return TypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TRACredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeContent>.GetConversionActionTo_TRACredential_EnvelopeLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeLabel> ITypeConverter<TRACredential_EnvelopeContent>.Enumerate_TRACredential_EnvelopeLabel(TRACredential_EnvelopeContent value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeContent ITypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'TRACredential_EnvelopeContent'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeContent>.ConvertTo_TRACredential_EnvelopeSeal(TRACredential_EnvelopeContent value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TRACredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeContent>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<TRACredential_EnvelopeContent>.Enumerate_TRACredential_EnvelopeSeal(TRACredential_EnvelopeContent value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeContent ITypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TRAEncryptedClaims(TRAEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims' to 'TRACredential_EnvelopeContent'.");
                
            }
            TRAEncryptedClaims ITypeConverter<TRACredential_EnvelopeContent>.ConvertTo_TRAEncryptedClaims(TRACredential_EnvelopeContent value)
            {
                return TypeConverter<TRAEncryptedClaims>.ConvertFrom_TRACredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeContent>.GetConversionActionTo_TRAEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims> ITypeConverter<TRACredential_EnvelopeContent>.Enumerate_TRAEncryptedClaims(TRACredential_EnvelopeContent value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeContent ITypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TRACredential_EnvelopeContent'.");
                
            }
            TRAKeyValuePair ITypeConverter<TRACredential_EnvelopeContent>.ConvertTo_TRAKeyValuePair(TRACredential_EnvelopeContent value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TRACredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeContent>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TRACredential_EnvelopeContent>.Enumerate_TRAKeyValuePair(TRACredential_EnvelopeContent value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeContent ITypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TRACredential_EnvelopeContent'.");
                
            }
            TRACredentialType ITypeConverter<TRACredential_EnvelopeContent>.ConvertTo_TRACredentialType(TRACredential_EnvelopeContent value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TRACredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeContent>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TRACredential_EnvelopeContent>.Enumerate_TRACredentialType(TRACredential_EnvelopeContent value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeContent ITypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TRACredential_EnvelopeContent'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TRACredential_EnvelopeContent>.ConvertTo_TRAEncryptionFlag(TRACredential_EnvelopeContent value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TRACredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeContent>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TRACredential_EnvelopeContent>.Enumerate_TRAEncryptionFlag(TRACredential_EnvelopeContent value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeContent ITypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TRACredential_EnvelopeContent'.");
                
            }
            TRAServiceType ITypeConverter<TRACredential_EnvelopeContent>.ConvertTo_TRAServiceType(TRACredential_EnvelopeContent value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TRACredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeContent>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TRACredential_EnvelopeContent>.Enumerate_TRAServiceType(TRACredential_EnvelopeContent value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeContent ITypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TRACredential_EnvelopeContent'.");
                
            }
            TRATrustLevel ITypeConverter<TRACredential_EnvelopeContent>.ConvertTo_TRATrustLevel(TRACredential_EnvelopeContent value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TRACredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeContent>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TRACredential_EnvelopeContent>.Enumerate_TRATrustLevel(TRACredential_EnvelopeContent value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeContent ITypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TRACredential_EnvelopeContent'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TRACredential_EnvelopeContent>.ConvertTo_List_List_TRAKeyValuePair(TRACredential_EnvelopeContent value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRACredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeContent>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TRACredential_EnvelopeContent>.Enumerate_List_List_TRAKeyValuePair(TRACredential_EnvelopeContent value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeContent ITypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TRACredential_EnvelopeContent'.");
                
            }
            List<TRAClaim> ITypeConverter<TRACredential_EnvelopeContent>.ConvertTo_List_TRAClaim(TRACredential_EnvelopeContent value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TRACredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeContent>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TRACredential_EnvelopeContent>.Enumerate_List_TRAClaim(TRACredential_EnvelopeContent value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeContent ITypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(TDWVDAAccountEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims?' to 'TRACredential_EnvelopeContent'.");
                
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TRACredential_EnvelopeContent>.ConvertTo_TDWVDAAccountEntry_Claims_nullable(TRACredential_EnvelopeContent value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TRACredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeContent>.GetConversionActionTo_TDWVDAAccountEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims?> ITypeConverter<TRACredential_EnvelopeContent>.Enumerate_TDWVDAAccountEntry_Claims_nullable(TRACredential_EnvelopeContent value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeContent ITypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent?' to 'TRACredential_EnvelopeContent'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TRACredential_EnvelopeContent>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent_nullable(TRACredential_EnvelopeContent value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TRACredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeContent>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent?> ITypeConverter<TRACredential_EnvelopeContent>.Enumerate_TDWVDAAccountEntry_EnvelopeContent_nullable(TRACredential_EnvelopeContent value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeContent ITypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(TDWVDASmartContractEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims?' to 'TRACredential_EnvelopeContent'.");
                
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TRACredential_EnvelopeContent>.ConvertTo_TDWVDASmartContractEntry_Claims_nullable(TRACredential_EnvelopeContent value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TRACredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeContent>.GetConversionActionTo_TDWVDASmartContractEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims?> ITypeConverter<TRACredential_EnvelopeContent>.Enumerate_TDWVDASmartContractEntry_Claims_nullable(TRACredential_EnvelopeContent value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeContent ITypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent?' to 'TRACredential_EnvelopeContent'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TRACredential_EnvelopeContent>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent_nullable(TRACredential_EnvelopeContent value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TRACredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeContent>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent?> ITypeConverter<TRACredential_EnvelopeContent>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent_nullable(TRACredential_EnvelopeContent value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeContent ITypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TRAEncryptedClaims_nullable(TRAEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims?' to 'TRACredential_EnvelopeContent'.");
                
            }
            TRAEncryptedClaims? ITypeConverter<TRACredential_EnvelopeContent>.ConvertTo_TRAEncryptedClaims_nullable(TRACredential_EnvelopeContent value)
            {
                return TypeConverter<TRAEncryptedClaims?>.ConvertFrom_TRACredential_EnvelopeContent(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeContent>.GetConversionActionTo_TRAEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims?> ITypeConverter<TRACredential_EnvelopeContent>.Enumerate_TRAEncryptedClaims_nullable(TRACredential_EnvelopeContent value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeLabel ITypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TRACredential_EnvelopeLabel'.");
                
            }
            bool ITypeConverter<TRACredential_EnvelopeLabel>.ConvertTo_bool(TRACredential_EnvelopeLabel value)
            {
                return TypeConverter<bool>.ConvertFrom_TRACredential_EnvelopeLabel(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeLabel>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TRACredential_EnvelopeLabel>.Enumerate_bool(TRACredential_EnvelopeLabel value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeLabel ITypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TRACredential_EnvelopeLabel'.");
                
            }
            long ITypeConverter<TRACredential_EnvelopeLabel>.ConvertTo_long(TRACredential_EnvelopeLabel value)
            {
                return TypeConverter<long>.ConvertFrom_TRACredential_EnvelopeLabel(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeLabel>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TRACredential_EnvelopeLabel>.Enumerate_long(TRACredential_EnvelopeLabel value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeLabel ITypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TRACredential_EnvelopeLabel intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TRACredential_EnvelopeLabel.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TRACredential_EnvelopeLabel");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TRACredential_EnvelopeLabel>.ConvertTo_string(TRACredential_EnvelopeLabel value)
            {
                return TypeConverter<string>.ConvertFrom_TRACredential_EnvelopeLabel(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeLabel>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TRACredential_EnvelopeLabel>.Enumerate_string(TRACredential_EnvelopeLabel value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeLabel ITypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TRACredential_EnvelopeLabel'.");
                
            }
            List<string> ITypeConverter<TRACredential_EnvelopeLabel>.ConvertTo_List_string(TRACredential_EnvelopeLabel value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TRACredential_EnvelopeLabel(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeLabel>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TRACredential_EnvelopeLabel>.Enumerate_List_string(TRACredential_EnvelopeLabel value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeLabel ITypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TRACredential_EnvelopeLabel'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TRACredential_EnvelopeLabel>.ConvertTo_List_TRAKeyValuePair(TRACredential_EnvelopeLabel value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRACredential_EnvelopeLabel(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeLabel>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TRACredential_EnvelopeLabel>.Enumerate_List_TRAKeyValuePair(TRACredential_EnvelopeLabel value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeLabel ITypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TDWVDAAccountEntry_Claims(TDWVDAAccountEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims' to 'TRACredential_EnvelopeLabel'.");
                
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TRACredential_EnvelopeLabel>.ConvertTo_TDWVDAAccountEntry_Claims(TRACredential_EnvelopeLabel value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TRACredential_EnvelopeLabel(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeLabel>.GetConversionActionTo_TDWVDAAccountEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims> ITypeConverter<TRACredential_EnvelopeLabel>.Enumerate_TDWVDAAccountEntry_Claims(TRACredential_EnvelopeLabel value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeLabel ITypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TDWVDAAccountEntry_Envelope(TDWVDAAccountEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Envelope' to 'TRACredential_EnvelopeLabel'.");
                
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TRACredential_EnvelopeLabel>.ConvertTo_TDWVDAAccountEntry_Envelope(TRACredential_EnvelopeLabel value)
            {
                return TypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TRACredential_EnvelopeLabel(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeLabel>.GetConversionActionTo_TDWVDAAccountEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Envelope> ITypeConverter<TRACredential_EnvelopeLabel>.Enumerate_TDWVDAAccountEntry_Envelope(TRACredential_EnvelopeLabel value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeLabel ITypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent' to 'TRACredential_EnvelopeLabel'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TRACredential_EnvelopeLabel>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent(TRACredential_EnvelopeLabel value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TRACredential_EnvelopeLabel(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeLabel>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent> ITypeConverter<TRACredential_EnvelopeLabel>.Enumerate_TDWVDAAccountEntry_EnvelopeContent(TRACredential_EnvelopeLabel value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeLabel ITypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TRACredential_EnvelopeLabel'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TRACredential_EnvelopeLabel>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TRACredential_EnvelopeLabel value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRACredential_EnvelopeLabel(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeLabel>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TRACredential_EnvelopeLabel>.Enumerate_TDWVDAIdentityRegistryEntryParm(TRACredential_EnvelopeLabel value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeLabel ITypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TRACredential_EnvelopeLabel'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TRACredential_EnvelopeLabel>.ConvertTo_TDWVDAPostInvocationParameters(TRACredential_EnvelopeLabel value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRACredential_EnvelopeLabel(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeLabel>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TRACredential_EnvelopeLabel>.Enumerate_TDWVDAPostInvocationParameters(TRACredential_EnvelopeLabel value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeLabel ITypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TRACredential_EnvelopeLabel'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TRACredential_EnvelopeLabel>.ConvertTo_TDWVDARevocationListEntryParm(TRACredential_EnvelopeLabel value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRACredential_EnvelopeLabel(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeLabel>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TRACredential_EnvelopeLabel>.Enumerate_TDWVDARevocationListEntryParm(TRACredential_EnvelopeLabel value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeLabel ITypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TRACredential_EnvelopeLabel'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TRACredential_EnvelopeLabel>.ConvertTo_TDWVDAServiceEndpointEntryParm(TRACredential_EnvelopeLabel value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRACredential_EnvelopeLabel(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeLabel>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TRACredential_EnvelopeLabel>.Enumerate_TDWVDAServiceEndpointEntryParm(TRACredential_EnvelopeLabel value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeLabel ITypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TDWVDASmartContractEntry_Claims(TDWVDASmartContractEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims' to 'TRACredential_EnvelopeLabel'.");
                
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TRACredential_EnvelopeLabel>.ConvertTo_TDWVDASmartContractEntry_Claims(TRACredential_EnvelopeLabel value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TRACredential_EnvelopeLabel(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeLabel>.GetConversionActionTo_TDWVDASmartContractEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims> ITypeConverter<TRACredential_EnvelopeLabel>.Enumerate_TDWVDASmartContractEntry_Claims(TRACredential_EnvelopeLabel value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeLabel ITypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TDWVDASmartContractEntry_Envelope(TDWVDASmartContractEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Envelope' to 'TRACredential_EnvelopeLabel'.");
                
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TRACredential_EnvelopeLabel>.ConvertTo_TDWVDASmartContractEntry_Envelope(TRACredential_EnvelopeLabel value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TRACredential_EnvelopeLabel(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeLabel>.GetConversionActionTo_TDWVDASmartContractEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Envelope> ITypeConverter<TRACredential_EnvelopeLabel>.Enumerate_TDWVDASmartContractEntry_Envelope(TRACredential_EnvelopeLabel value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeLabel ITypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent' to 'TRACredential_EnvelopeLabel'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TRACredential_EnvelopeLabel>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent(TRACredential_EnvelopeLabel value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TRACredential_EnvelopeLabel(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeLabel>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent> ITypeConverter<TRACredential_EnvelopeLabel>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent(TRACredential_EnvelopeLabel value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeLabel ITypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TRACredential_EnvelopeLabel'.");
                
            }
            TRAClaim ITypeConverter<TRACredential_EnvelopeLabel>.ConvertTo_TRAClaim(TRACredential_EnvelopeLabel value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TRACredential_EnvelopeLabel(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeLabel>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TRACredential_EnvelopeLabel>.Enumerate_TRAClaim(TRACredential_EnvelopeLabel value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeLabel ITypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'TRACredential_EnvelopeLabel'.");
                
            }
            TRACredential_Envelope ITypeConverter<TRACredential_EnvelopeLabel>.ConvertTo_TRACredential_Envelope(TRACredential_EnvelopeLabel value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_TRACredential_EnvelopeLabel(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeLabel>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<TRACredential_EnvelopeLabel>.Enumerate_TRACredential_Envelope(TRACredential_EnvelopeLabel value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeLabel ITypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TRACredential_EnvelopeContent(TRACredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeContent' to 'TRACredential_EnvelopeLabel'.");
                
            }
            TRACredential_EnvelopeContent ITypeConverter<TRACredential_EnvelopeLabel>.ConvertTo_TRACredential_EnvelopeContent(TRACredential_EnvelopeLabel value)
            {
                return TypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TRACredential_EnvelopeLabel(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeLabel>.GetConversionActionTo_TRACredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeContent> ITypeConverter<TRACredential_EnvelopeLabel>.Enumerate_TRACredential_EnvelopeContent(TRACredential_EnvelopeLabel value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeLabel ITypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TRACredential_EnvelopeLabel(TRACredential_EnvelopeLabel value)
            {
                
                return (TRACredential_EnvelopeLabel)value;
                
            }
            TRACredential_EnvelopeLabel ITypeConverter<TRACredential_EnvelopeLabel>.ConvertTo_TRACredential_EnvelopeLabel(TRACredential_EnvelopeLabel value)
            {
                return TypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TRACredential_EnvelopeLabel(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeLabel>.GetConversionActionTo_TRACredential_EnvelopeLabel()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeLabel> ITypeConverter<TRACredential_EnvelopeLabel>.Enumerate_TRACredential_EnvelopeLabel(TRACredential_EnvelopeLabel value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeLabel ITypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'TRACredential_EnvelopeLabel'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeLabel>.ConvertTo_TRACredential_EnvelopeSeal(TRACredential_EnvelopeLabel value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TRACredential_EnvelopeLabel(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeLabel>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<TRACredential_EnvelopeLabel>.Enumerate_TRACredential_EnvelopeSeal(TRACredential_EnvelopeLabel value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeLabel ITypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TRAEncryptedClaims(TRAEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims' to 'TRACredential_EnvelopeLabel'.");
                
            }
            TRAEncryptedClaims ITypeConverter<TRACredential_EnvelopeLabel>.ConvertTo_TRAEncryptedClaims(TRACredential_EnvelopeLabel value)
            {
                return TypeConverter<TRAEncryptedClaims>.ConvertFrom_TRACredential_EnvelopeLabel(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeLabel>.GetConversionActionTo_TRAEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims> ITypeConverter<TRACredential_EnvelopeLabel>.Enumerate_TRAEncryptedClaims(TRACredential_EnvelopeLabel value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeLabel ITypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TRACredential_EnvelopeLabel'.");
                
            }
            TRAKeyValuePair ITypeConverter<TRACredential_EnvelopeLabel>.ConvertTo_TRAKeyValuePair(TRACredential_EnvelopeLabel value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TRACredential_EnvelopeLabel(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeLabel>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TRACredential_EnvelopeLabel>.Enumerate_TRAKeyValuePair(TRACredential_EnvelopeLabel value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeLabel ITypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TRACredential_EnvelopeLabel'.");
                
            }
            TRACredentialType ITypeConverter<TRACredential_EnvelopeLabel>.ConvertTo_TRACredentialType(TRACredential_EnvelopeLabel value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TRACredential_EnvelopeLabel(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeLabel>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TRACredential_EnvelopeLabel>.Enumerate_TRACredentialType(TRACredential_EnvelopeLabel value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeLabel ITypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TRACredential_EnvelopeLabel'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TRACredential_EnvelopeLabel>.ConvertTo_TRAEncryptionFlag(TRACredential_EnvelopeLabel value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TRACredential_EnvelopeLabel(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeLabel>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TRACredential_EnvelopeLabel>.Enumerate_TRAEncryptionFlag(TRACredential_EnvelopeLabel value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeLabel ITypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TRACredential_EnvelopeLabel'.");
                
            }
            TRAServiceType ITypeConverter<TRACredential_EnvelopeLabel>.ConvertTo_TRAServiceType(TRACredential_EnvelopeLabel value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TRACredential_EnvelopeLabel(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeLabel>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TRACredential_EnvelopeLabel>.Enumerate_TRAServiceType(TRACredential_EnvelopeLabel value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeLabel ITypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TRACredential_EnvelopeLabel'.");
                
            }
            TRATrustLevel ITypeConverter<TRACredential_EnvelopeLabel>.ConvertTo_TRATrustLevel(TRACredential_EnvelopeLabel value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TRACredential_EnvelopeLabel(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeLabel>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TRACredential_EnvelopeLabel>.Enumerate_TRATrustLevel(TRACredential_EnvelopeLabel value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeLabel ITypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TRACredential_EnvelopeLabel'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TRACredential_EnvelopeLabel>.ConvertTo_List_List_TRAKeyValuePair(TRACredential_EnvelopeLabel value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRACredential_EnvelopeLabel(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeLabel>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TRACredential_EnvelopeLabel>.Enumerate_List_List_TRAKeyValuePair(TRACredential_EnvelopeLabel value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeLabel ITypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TRACredential_EnvelopeLabel'.");
                
            }
            List<TRAClaim> ITypeConverter<TRACredential_EnvelopeLabel>.ConvertTo_List_TRAClaim(TRACredential_EnvelopeLabel value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TRACredential_EnvelopeLabel(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeLabel>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TRACredential_EnvelopeLabel>.Enumerate_List_TRAClaim(TRACredential_EnvelopeLabel value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeLabel ITypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(TDWVDAAccountEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims?' to 'TRACredential_EnvelopeLabel'.");
                
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TRACredential_EnvelopeLabel>.ConvertTo_TDWVDAAccountEntry_Claims_nullable(TRACredential_EnvelopeLabel value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TRACredential_EnvelopeLabel(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeLabel>.GetConversionActionTo_TDWVDAAccountEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims?> ITypeConverter<TRACredential_EnvelopeLabel>.Enumerate_TDWVDAAccountEntry_Claims_nullable(TRACredential_EnvelopeLabel value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeLabel ITypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent?' to 'TRACredential_EnvelopeLabel'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TRACredential_EnvelopeLabel>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent_nullable(TRACredential_EnvelopeLabel value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TRACredential_EnvelopeLabel(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeLabel>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent?> ITypeConverter<TRACredential_EnvelopeLabel>.Enumerate_TDWVDAAccountEntry_EnvelopeContent_nullable(TRACredential_EnvelopeLabel value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeLabel ITypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(TDWVDASmartContractEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims?' to 'TRACredential_EnvelopeLabel'.");
                
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TRACredential_EnvelopeLabel>.ConvertTo_TDWVDASmartContractEntry_Claims_nullable(TRACredential_EnvelopeLabel value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TRACredential_EnvelopeLabel(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeLabel>.GetConversionActionTo_TDWVDASmartContractEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims?> ITypeConverter<TRACredential_EnvelopeLabel>.Enumerate_TDWVDASmartContractEntry_Claims_nullable(TRACredential_EnvelopeLabel value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeLabel ITypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent?' to 'TRACredential_EnvelopeLabel'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TRACredential_EnvelopeLabel>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent_nullable(TRACredential_EnvelopeLabel value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TRACredential_EnvelopeLabel(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeLabel>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent?> ITypeConverter<TRACredential_EnvelopeLabel>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent_nullable(TRACredential_EnvelopeLabel value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeLabel ITypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TRAEncryptedClaims_nullable(TRAEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims?' to 'TRACredential_EnvelopeLabel'.");
                
            }
            TRAEncryptedClaims? ITypeConverter<TRACredential_EnvelopeLabel>.ConvertTo_TRAEncryptedClaims_nullable(TRACredential_EnvelopeLabel value)
            {
                return TypeConverter<TRAEncryptedClaims?>.ConvertFrom_TRACredential_EnvelopeLabel(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeLabel>.GetConversionActionTo_TRAEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims?> ITypeConverter<TRACredential_EnvelopeLabel>.Enumerate_TRAEncryptedClaims_nullable(TRACredential_EnvelopeLabel value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TRACredential_EnvelopeSeal'.");
                
            }
            bool ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_bool(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<bool>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_bool(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TRACredential_EnvelopeSeal'.");
                
            }
            long ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_long(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<long>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_long(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TRACredential_EnvelopeSeal intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TRACredential_EnvelopeSeal.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TRACredential_EnvelopeSeal");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_string(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<string>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_string(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TRACredential_EnvelopeSeal'.");
                
            }
            List<string> ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_List_string(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_List_string(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TRACredential_EnvelopeSeal'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_List_TRAKeyValuePair(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_List_TRAKeyValuePair(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDAAccountEntry_Claims(TDWVDAAccountEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims' to 'TRACredential_EnvelopeSeal'.");
                
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_TDWVDAAccountEntry_Claims(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_TDWVDAAccountEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_TDWVDAAccountEntry_Claims(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDAAccountEntry_Envelope(TDWVDAAccountEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Envelope' to 'TRACredential_EnvelopeSeal'.");
                
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_TDWVDAAccountEntry_Envelope(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_TDWVDAAccountEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Envelope> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_TDWVDAAccountEntry_Envelope(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent' to 'TRACredential_EnvelopeSeal'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_TDWVDAAccountEntry_EnvelopeContent(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TRACredential_EnvelopeSeal'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_TDWVDAIdentityRegistryEntryParm(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TRACredential_EnvelopeSeal'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_TDWVDAPostInvocationParameters(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_TDWVDAPostInvocationParameters(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TRACredential_EnvelopeSeal'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_TDWVDARevocationListEntryParm(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_TDWVDARevocationListEntryParm(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TRACredential_EnvelopeSeal'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_TDWVDAServiceEndpointEntryParm(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_TDWVDAServiceEndpointEntryParm(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDASmartContractEntry_Claims(TDWVDASmartContractEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims' to 'TRACredential_EnvelopeSeal'.");
                
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_TDWVDASmartContractEntry_Claims(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_TDWVDASmartContractEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_TDWVDASmartContractEntry_Claims(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDASmartContractEntry_Envelope(TDWVDASmartContractEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Envelope' to 'TRACredential_EnvelopeSeal'.");
                
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_TDWVDASmartContractEntry_Envelope(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_TDWVDASmartContractEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Envelope> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_TDWVDASmartContractEntry_Envelope(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent' to 'TRACredential_EnvelopeSeal'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TRACredential_EnvelopeSeal'.");
                
            }
            TRAClaim ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_TRAClaim(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_TRAClaim(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'TRACredential_EnvelopeSeal'.");
                
            }
            TRACredential_Envelope ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_TRACredential_Envelope(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_TRACredential_Envelope(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TRACredential_EnvelopeContent(TRACredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeContent' to 'TRACredential_EnvelopeSeal'.");
                
            }
            TRACredential_EnvelopeContent ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_TRACredential_EnvelopeContent(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_TRACredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeContent> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_TRACredential_EnvelopeContent(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TRACredential_EnvelopeLabel(TRACredential_EnvelopeLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeLabel' to 'TRACredential_EnvelopeSeal'.");
                
            }
            TRACredential_EnvelopeLabel ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_TRACredential_EnvelopeLabel(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_TRACredential_EnvelopeLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeLabel> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_TRACredential_EnvelopeLabel(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                return (TRACredential_EnvelopeSeal)value;
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TRAEncryptedClaims(TRAEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims' to 'TRACredential_EnvelopeSeal'.");
                
            }
            TRAEncryptedClaims ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_TRAEncryptedClaims(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<TRAEncryptedClaims>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_TRAEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_TRAEncryptedClaims(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TRACredential_EnvelopeSeal'.");
                
            }
            TRAKeyValuePair ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_TRAKeyValuePair(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_TRAKeyValuePair(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TRACredential_EnvelopeSeal'.");
                
            }
            TRACredentialType ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_TRACredentialType(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_TRACredentialType(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TRACredential_EnvelopeSeal'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_TRAEncryptionFlag(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_TRAEncryptionFlag(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TRACredential_EnvelopeSeal'.");
                
            }
            TRAServiceType ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_TRAServiceType(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_TRAServiceType(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TRACredential_EnvelopeSeal'.");
                
            }
            TRATrustLevel ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_TRATrustLevel(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_TRATrustLevel(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TRACredential_EnvelopeSeal'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_List_List_TRAKeyValuePair(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_List_List_TRAKeyValuePair(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TRACredential_EnvelopeSeal'.");
                
            }
            List<TRAClaim> ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_List_TRAClaim(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_List_TRAClaim(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(TDWVDAAccountEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims?' to 'TRACredential_EnvelopeSeal'.");
                
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_TDWVDAAccountEntry_Claims_nullable(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_TDWVDAAccountEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims?> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_TDWVDAAccountEntry_Claims_nullable(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent?' to 'TRACredential_EnvelopeSeal'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent_nullable(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent?> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_TDWVDAAccountEntry_EnvelopeContent_nullable(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(TDWVDASmartContractEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims?' to 'TRACredential_EnvelopeSeal'.");
                
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_TDWVDASmartContractEntry_Claims_nullable(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_TDWVDASmartContractEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims?> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_TDWVDASmartContractEntry_Claims_nullable(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent?' to 'TRACredential_EnvelopeSeal'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent_nullable(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent?> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent_nullable(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TRAEncryptedClaims_nullable(TRAEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims?' to 'TRACredential_EnvelopeSeal'.");
                
            }
            TRAEncryptedClaims? ITypeConverter<TRACredential_EnvelopeSeal>.ConvertTo_TRAEncryptedClaims_nullable(TRACredential_EnvelopeSeal value)
            {
                return TypeConverter<TRAEncryptedClaims?>.ConvertFrom_TRACredential_EnvelopeSeal(value);
            }
            TypeConversionAction ITypeConverter<TRACredential_EnvelopeSeal>.GetConversionActionTo_TRAEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims?> ITypeConverter<TRACredential_EnvelopeSeal>.Enumerate_TRAEncryptedClaims_nullable(TRACredential_EnvelopeSeal value)
            {
                
                yield break;
            }
            TRAEncryptedClaims ITypeConverter<TRAEncryptedClaims>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TRAEncryptedClaims'.");
                
            }
            bool ITypeConverter<TRAEncryptedClaims>.ConvertTo_bool(TRAEncryptedClaims value)
            {
                return TypeConverter<bool>.ConvertFrom_TRAEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TRAEncryptedClaims>.Enumerate_bool(TRAEncryptedClaims value)
            {
                
                yield break;
            }
            TRAEncryptedClaims ITypeConverter<TRAEncryptedClaims>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TRAEncryptedClaims'.");
                
            }
            long ITypeConverter<TRAEncryptedClaims>.ConvertTo_long(TRAEncryptedClaims value)
            {
                return TypeConverter<long>.ConvertFrom_TRAEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TRAEncryptedClaims>.Enumerate_long(TRAEncryptedClaims value)
            {
                
                yield break;
            }
            TRAEncryptedClaims ITypeConverter<TRAEncryptedClaims>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TRAEncryptedClaims intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TRAEncryptedClaims.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TRAEncryptedClaims");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TRAEncryptedClaims>.ConvertTo_string(TRAEncryptedClaims value)
            {
                return TypeConverter<string>.ConvertFrom_TRAEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TRAEncryptedClaims>.Enumerate_string(TRAEncryptedClaims value)
            {
                
                yield break;
            }
            TRAEncryptedClaims ITypeConverter<TRAEncryptedClaims>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TRAEncryptedClaims'.");
                
            }
            List<string> ITypeConverter<TRAEncryptedClaims>.ConvertTo_List_string(TRAEncryptedClaims value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TRAEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TRAEncryptedClaims>.Enumerate_List_string(TRAEncryptedClaims value)
            {
                
                yield break;
            }
            TRAEncryptedClaims ITypeConverter<TRAEncryptedClaims>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TRAEncryptedClaims'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TRAEncryptedClaims>.ConvertTo_List_TRAKeyValuePair(TRAEncryptedClaims value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRAEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TRAEncryptedClaims>.Enumerate_List_TRAKeyValuePair(TRAEncryptedClaims value)
            {
                
                yield break;
            }
            TRAEncryptedClaims ITypeConverter<TRAEncryptedClaims>.ConvertFrom_TDWVDAAccountEntry_Claims(TDWVDAAccountEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims' to 'TRAEncryptedClaims'.");
                
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TRAEncryptedClaims>.ConvertTo_TDWVDAAccountEntry_Claims(TRAEncryptedClaims value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TRAEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims>.GetConversionActionTo_TDWVDAAccountEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims> ITypeConverter<TRAEncryptedClaims>.Enumerate_TDWVDAAccountEntry_Claims(TRAEncryptedClaims value)
            {
                
                yield break;
            }
            TRAEncryptedClaims ITypeConverter<TRAEncryptedClaims>.ConvertFrom_TDWVDAAccountEntry_Envelope(TDWVDAAccountEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Envelope' to 'TRAEncryptedClaims'.");
                
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TRAEncryptedClaims>.ConvertTo_TDWVDAAccountEntry_Envelope(TRAEncryptedClaims value)
            {
                return TypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TRAEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims>.GetConversionActionTo_TDWVDAAccountEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Envelope> ITypeConverter<TRAEncryptedClaims>.Enumerate_TDWVDAAccountEntry_Envelope(TRAEncryptedClaims value)
            {
                
                yield break;
            }
            TRAEncryptedClaims ITypeConverter<TRAEncryptedClaims>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent' to 'TRAEncryptedClaims'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TRAEncryptedClaims>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent(TRAEncryptedClaims value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TRAEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent> ITypeConverter<TRAEncryptedClaims>.Enumerate_TDWVDAAccountEntry_EnvelopeContent(TRAEncryptedClaims value)
            {
                
                yield break;
            }
            TRAEncryptedClaims ITypeConverter<TRAEncryptedClaims>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TRAEncryptedClaims'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TRAEncryptedClaims>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TRAEncryptedClaims value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRAEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TRAEncryptedClaims>.Enumerate_TDWVDAIdentityRegistryEntryParm(TRAEncryptedClaims value)
            {
                
                yield break;
            }
            TRAEncryptedClaims ITypeConverter<TRAEncryptedClaims>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TRAEncryptedClaims'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TRAEncryptedClaims>.ConvertTo_TDWVDAPostInvocationParameters(TRAEncryptedClaims value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRAEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TRAEncryptedClaims>.Enumerate_TDWVDAPostInvocationParameters(TRAEncryptedClaims value)
            {
                
                yield break;
            }
            TRAEncryptedClaims ITypeConverter<TRAEncryptedClaims>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TRAEncryptedClaims'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TRAEncryptedClaims>.ConvertTo_TDWVDARevocationListEntryParm(TRAEncryptedClaims value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRAEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TRAEncryptedClaims>.Enumerate_TDWVDARevocationListEntryParm(TRAEncryptedClaims value)
            {
                
                yield break;
            }
            TRAEncryptedClaims ITypeConverter<TRAEncryptedClaims>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TRAEncryptedClaims'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TRAEncryptedClaims>.ConvertTo_TDWVDAServiceEndpointEntryParm(TRAEncryptedClaims value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRAEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TRAEncryptedClaims>.Enumerate_TDWVDAServiceEndpointEntryParm(TRAEncryptedClaims value)
            {
                
                yield break;
            }
            TRAEncryptedClaims ITypeConverter<TRAEncryptedClaims>.ConvertFrom_TDWVDASmartContractEntry_Claims(TDWVDASmartContractEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims' to 'TRAEncryptedClaims'.");
                
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TRAEncryptedClaims>.ConvertTo_TDWVDASmartContractEntry_Claims(TRAEncryptedClaims value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TRAEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims>.GetConversionActionTo_TDWVDASmartContractEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims> ITypeConverter<TRAEncryptedClaims>.Enumerate_TDWVDASmartContractEntry_Claims(TRAEncryptedClaims value)
            {
                
                yield break;
            }
            TRAEncryptedClaims ITypeConverter<TRAEncryptedClaims>.ConvertFrom_TDWVDASmartContractEntry_Envelope(TDWVDASmartContractEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Envelope' to 'TRAEncryptedClaims'.");
                
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TRAEncryptedClaims>.ConvertTo_TDWVDASmartContractEntry_Envelope(TRAEncryptedClaims value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TRAEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims>.GetConversionActionTo_TDWVDASmartContractEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Envelope> ITypeConverter<TRAEncryptedClaims>.Enumerate_TDWVDASmartContractEntry_Envelope(TRAEncryptedClaims value)
            {
                
                yield break;
            }
            TRAEncryptedClaims ITypeConverter<TRAEncryptedClaims>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent' to 'TRAEncryptedClaims'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TRAEncryptedClaims>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent(TRAEncryptedClaims value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TRAEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent> ITypeConverter<TRAEncryptedClaims>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent(TRAEncryptedClaims value)
            {
                
                yield break;
            }
            TRAEncryptedClaims ITypeConverter<TRAEncryptedClaims>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TRAEncryptedClaims'.");
                
            }
            TRAClaim ITypeConverter<TRAEncryptedClaims>.ConvertTo_TRAClaim(TRAEncryptedClaims value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TRAEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TRAEncryptedClaims>.Enumerate_TRAClaim(TRAEncryptedClaims value)
            {
                
                yield break;
            }
            TRAEncryptedClaims ITypeConverter<TRAEncryptedClaims>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'TRAEncryptedClaims'.");
                
            }
            TRACredential_Envelope ITypeConverter<TRAEncryptedClaims>.ConvertTo_TRACredential_Envelope(TRAEncryptedClaims value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_TRAEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<TRAEncryptedClaims>.Enumerate_TRACredential_Envelope(TRAEncryptedClaims value)
            {
                
                yield break;
            }
            TRAEncryptedClaims ITypeConverter<TRAEncryptedClaims>.ConvertFrom_TRACredential_EnvelopeContent(TRACredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeContent' to 'TRAEncryptedClaims'.");
                
            }
            TRACredential_EnvelopeContent ITypeConverter<TRAEncryptedClaims>.ConvertTo_TRACredential_EnvelopeContent(TRAEncryptedClaims value)
            {
                return TypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TRAEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims>.GetConversionActionTo_TRACredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeContent> ITypeConverter<TRAEncryptedClaims>.Enumerate_TRACredential_EnvelopeContent(TRAEncryptedClaims value)
            {
                
                yield break;
            }
            TRAEncryptedClaims ITypeConverter<TRAEncryptedClaims>.ConvertFrom_TRACredential_EnvelopeLabel(TRACredential_EnvelopeLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeLabel' to 'TRAEncryptedClaims'.");
                
            }
            TRACredential_EnvelopeLabel ITypeConverter<TRAEncryptedClaims>.ConvertTo_TRACredential_EnvelopeLabel(TRAEncryptedClaims value)
            {
                return TypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TRAEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims>.GetConversionActionTo_TRACredential_EnvelopeLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeLabel> ITypeConverter<TRAEncryptedClaims>.Enumerate_TRACredential_EnvelopeLabel(TRAEncryptedClaims value)
            {
                
                yield break;
            }
            TRAEncryptedClaims ITypeConverter<TRAEncryptedClaims>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'TRAEncryptedClaims'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRAEncryptedClaims>.ConvertTo_TRACredential_EnvelopeSeal(TRAEncryptedClaims value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TRAEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<TRAEncryptedClaims>.Enumerate_TRACredential_EnvelopeSeal(TRAEncryptedClaims value)
            {
                
                yield break;
            }
            TRAEncryptedClaims ITypeConverter<TRAEncryptedClaims>.ConvertFrom_TRAEncryptedClaims(TRAEncryptedClaims value)
            {
                
                return (TRAEncryptedClaims)value;
                
            }
            TRAEncryptedClaims ITypeConverter<TRAEncryptedClaims>.ConvertTo_TRAEncryptedClaims(TRAEncryptedClaims value)
            {
                return TypeConverter<TRAEncryptedClaims>.ConvertFrom_TRAEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims>.GetConversionActionTo_TRAEncryptedClaims()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims> ITypeConverter<TRAEncryptedClaims>.Enumerate_TRAEncryptedClaims(TRAEncryptedClaims value)
            {
                
                yield break;
            }
            TRAEncryptedClaims ITypeConverter<TRAEncryptedClaims>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TRAEncryptedClaims'.");
                
            }
            TRAKeyValuePair ITypeConverter<TRAEncryptedClaims>.ConvertTo_TRAKeyValuePair(TRAEncryptedClaims value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TRAEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TRAEncryptedClaims>.Enumerate_TRAKeyValuePair(TRAEncryptedClaims value)
            {
                
                yield break;
            }
            TRAEncryptedClaims ITypeConverter<TRAEncryptedClaims>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TRAEncryptedClaims'.");
                
            }
            TRACredentialType ITypeConverter<TRAEncryptedClaims>.ConvertTo_TRACredentialType(TRAEncryptedClaims value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TRAEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TRAEncryptedClaims>.Enumerate_TRACredentialType(TRAEncryptedClaims value)
            {
                
                yield break;
            }
            TRAEncryptedClaims ITypeConverter<TRAEncryptedClaims>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TRAEncryptedClaims'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptedClaims>.ConvertTo_TRAEncryptionFlag(TRAEncryptedClaims value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TRAEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TRAEncryptedClaims>.Enumerate_TRAEncryptionFlag(TRAEncryptedClaims value)
            {
                
                yield break;
            }
            TRAEncryptedClaims ITypeConverter<TRAEncryptedClaims>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TRAEncryptedClaims'.");
                
            }
            TRAServiceType ITypeConverter<TRAEncryptedClaims>.ConvertTo_TRAServiceType(TRAEncryptedClaims value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TRAEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TRAEncryptedClaims>.Enumerate_TRAServiceType(TRAEncryptedClaims value)
            {
                
                yield break;
            }
            TRAEncryptedClaims ITypeConverter<TRAEncryptedClaims>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TRAEncryptedClaims'.");
                
            }
            TRATrustLevel ITypeConverter<TRAEncryptedClaims>.ConvertTo_TRATrustLevel(TRAEncryptedClaims value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TRAEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TRAEncryptedClaims>.Enumerate_TRATrustLevel(TRAEncryptedClaims value)
            {
                
                yield break;
            }
            TRAEncryptedClaims ITypeConverter<TRAEncryptedClaims>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TRAEncryptedClaims'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TRAEncryptedClaims>.ConvertTo_List_List_TRAKeyValuePair(TRAEncryptedClaims value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRAEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TRAEncryptedClaims>.Enumerate_List_List_TRAKeyValuePair(TRAEncryptedClaims value)
            {
                
                yield break;
            }
            TRAEncryptedClaims ITypeConverter<TRAEncryptedClaims>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TRAEncryptedClaims'.");
                
            }
            List<TRAClaim> ITypeConverter<TRAEncryptedClaims>.ConvertTo_List_TRAClaim(TRAEncryptedClaims value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TRAEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TRAEncryptedClaims>.Enumerate_List_TRAClaim(TRAEncryptedClaims value)
            {
                
                yield break;
            }
            TRAEncryptedClaims ITypeConverter<TRAEncryptedClaims>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(TDWVDAAccountEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims?' to 'TRAEncryptedClaims'.");
                
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TRAEncryptedClaims>.ConvertTo_TDWVDAAccountEntry_Claims_nullable(TRAEncryptedClaims value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TRAEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims>.GetConversionActionTo_TDWVDAAccountEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims?> ITypeConverter<TRAEncryptedClaims>.Enumerate_TDWVDAAccountEntry_Claims_nullable(TRAEncryptedClaims value)
            {
                
                yield break;
            }
            TRAEncryptedClaims ITypeConverter<TRAEncryptedClaims>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent?' to 'TRAEncryptedClaims'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TRAEncryptedClaims>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent_nullable(TRAEncryptedClaims value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TRAEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent?> ITypeConverter<TRAEncryptedClaims>.Enumerate_TDWVDAAccountEntry_EnvelopeContent_nullable(TRAEncryptedClaims value)
            {
                
                yield break;
            }
            TRAEncryptedClaims ITypeConverter<TRAEncryptedClaims>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(TDWVDASmartContractEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims?' to 'TRAEncryptedClaims'.");
                
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TRAEncryptedClaims>.ConvertTo_TDWVDASmartContractEntry_Claims_nullable(TRAEncryptedClaims value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TRAEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims>.GetConversionActionTo_TDWVDASmartContractEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims?> ITypeConverter<TRAEncryptedClaims>.Enumerate_TDWVDASmartContractEntry_Claims_nullable(TRAEncryptedClaims value)
            {
                
                yield break;
            }
            TRAEncryptedClaims ITypeConverter<TRAEncryptedClaims>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent?' to 'TRAEncryptedClaims'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TRAEncryptedClaims>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent_nullable(TRAEncryptedClaims value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TRAEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent?> ITypeConverter<TRAEncryptedClaims>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent_nullable(TRAEncryptedClaims value)
            {
                
                yield break;
            }
            TRAEncryptedClaims ITypeConverter<TRAEncryptedClaims>.ConvertFrom_TRAEncryptedClaims_nullable(TRAEncryptedClaims? value)
            {
                
                return TypeConverter<TRAEncryptedClaims>.ConvertFrom_TRAEncryptedClaims(value.Value);
                
            }
            TRAEncryptedClaims? ITypeConverter<TRAEncryptedClaims>.ConvertTo_TRAEncryptedClaims_nullable(TRAEncryptedClaims value)
            {
                return TypeConverter<TRAEncryptedClaims?>.ConvertFrom_TRAEncryptedClaims(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims>.GetConversionActionTo_TRAEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims?> ITypeConverter<TRAEncryptedClaims>.Enumerate_TRAEncryptedClaims_nullable(TRAEncryptedClaims value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TRAKeyValuePair'.");
                
            }
            bool ITypeConverter<TRAKeyValuePair>.ConvertTo_bool(TRAKeyValuePair value)
            {
                return TypeConverter<bool>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TRAKeyValuePair>.Enumerate_bool(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TRAKeyValuePair'.");
                
            }
            long ITypeConverter<TRAKeyValuePair>.ConvertTo_long(TRAKeyValuePair value)
            {
                return TypeConverter<long>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TRAKeyValuePair>.Enumerate_long(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TRAKeyValuePair intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TRAKeyValuePair.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TRAKeyValuePair");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TRAKeyValuePair>.ConvertTo_string(TRAKeyValuePair value)
            {
                return TypeConverter<string>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TRAKeyValuePair>.Enumerate_string(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TRAKeyValuePair'.");
                
            }
            List<string> ITypeConverter<TRAKeyValuePair>.ConvertTo_List_string(TRAKeyValuePair value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TRAKeyValuePair>.Enumerate_List_string(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TRAKeyValuePair'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TRAKeyValuePair>.ConvertTo_List_TRAKeyValuePair(TRAKeyValuePair value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TRAKeyValuePair>.Enumerate_List_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDAAccountEntry_Claims(TDWVDAAccountEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims' to 'TRAKeyValuePair'.");
                
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TRAKeyValuePair>.ConvertTo_TDWVDAAccountEntry_Claims(TRAKeyValuePair value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TDWVDAAccountEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims> ITypeConverter<TRAKeyValuePair>.Enumerate_TDWVDAAccountEntry_Claims(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDAAccountEntry_Envelope(TDWVDAAccountEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Envelope' to 'TRAKeyValuePair'.");
                
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TRAKeyValuePair>.ConvertTo_TDWVDAAccountEntry_Envelope(TRAKeyValuePair value)
            {
                return TypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TDWVDAAccountEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Envelope> ITypeConverter<TRAKeyValuePair>.Enumerate_TDWVDAAccountEntry_Envelope(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent' to 'TRAKeyValuePair'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TRAKeyValuePair>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent(TRAKeyValuePair value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent> ITypeConverter<TRAKeyValuePair>.Enumerate_TDWVDAAccountEntry_EnvelopeContent(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TRAKeyValuePair'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TRAKeyValuePair>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TRAKeyValuePair value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TRAKeyValuePair>.Enumerate_TDWVDAIdentityRegistryEntryParm(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TRAKeyValuePair'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TRAKeyValuePair>.ConvertTo_TDWVDAPostInvocationParameters(TRAKeyValuePair value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TRAKeyValuePair>.Enumerate_TDWVDAPostInvocationParameters(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TRAKeyValuePair'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TRAKeyValuePair>.ConvertTo_TDWVDARevocationListEntryParm(TRAKeyValuePair value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TRAKeyValuePair>.Enumerate_TDWVDARevocationListEntryParm(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TRAKeyValuePair'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TRAKeyValuePair>.ConvertTo_TDWVDAServiceEndpointEntryParm(TRAKeyValuePair value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TRAKeyValuePair>.Enumerate_TDWVDAServiceEndpointEntryParm(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDASmartContractEntry_Claims(TDWVDASmartContractEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims' to 'TRAKeyValuePair'.");
                
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TRAKeyValuePair>.ConvertTo_TDWVDASmartContractEntry_Claims(TRAKeyValuePair value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TDWVDASmartContractEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims> ITypeConverter<TRAKeyValuePair>.Enumerate_TDWVDASmartContractEntry_Claims(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDASmartContractEntry_Envelope(TDWVDASmartContractEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Envelope' to 'TRAKeyValuePair'.");
                
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TRAKeyValuePair>.ConvertTo_TDWVDASmartContractEntry_Envelope(TRAKeyValuePair value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TDWVDASmartContractEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Envelope> ITypeConverter<TRAKeyValuePair>.Enumerate_TDWVDASmartContractEntry_Envelope(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent' to 'TRAKeyValuePair'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TRAKeyValuePair>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent(TRAKeyValuePair value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent> ITypeConverter<TRAKeyValuePair>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TRAKeyValuePair'.");
                
            }
            TRAClaim ITypeConverter<TRAKeyValuePair>.ConvertTo_TRAClaim(TRAKeyValuePair value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TRAKeyValuePair>.Enumerate_TRAClaim(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'TRAKeyValuePair'.");
                
            }
            TRACredential_Envelope ITypeConverter<TRAKeyValuePair>.ConvertTo_TRACredential_Envelope(TRAKeyValuePair value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<TRAKeyValuePair>.Enumerate_TRACredential_Envelope(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TRACredential_EnvelopeContent(TRACredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeContent' to 'TRAKeyValuePair'.");
                
            }
            TRACredential_EnvelopeContent ITypeConverter<TRAKeyValuePair>.ConvertTo_TRACredential_EnvelopeContent(TRAKeyValuePair value)
            {
                return TypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TRACredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeContent> ITypeConverter<TRAKeyValuePair>.Enumerate_TRACredential_EnvelopeContent(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TRACredential_EnvelopeLabel(TRACredential_EnvelopeLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeLabel' to 'TRAKeyValuePair'.");
                
            }
            TRACredential_EnvelopeLabel ITypeConverter<TRAKeyValuePair>.ConvertTo_TRACredential_EnvelopeLabel(TRAKeyValuePair value)
            {
                return TypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TRACredential_EnvelopeLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeLabel> ITypeConverter<TRAKeyValuePair>.Enumerate_TRACredential_EnvelopeLabel(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'TRAKeyValuePair'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRAKeyValuePair>.ConvertTo_TRACredential_EnvelopeSeal(TRAKeyValuePair value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<TRAKeyValuePair>.Enumerate_TRACredential_EnvelopeSeal(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TRAEncryptedClaims(TRAEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims' to 'TRAKeyValuePair'.");
                
            }
            TRAEncryptedClaims ITypeConverter<TRAKeyValuePair>.ConvertTo_TRAEncryptedClaims(TRAKeyValuePair value)
            {
                return TypeConverter<TRAEncryptedClaims>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TRAEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims> ITypeConverter<TRAKeyValuePair>.Enumerate_TRAEncryptedClaims(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                return (TRAKeyValuePair)value;
                
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertTo_TRAKeyValuePair(TRAKeyValuePair value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TRAKeyValuePair>.Enumerate_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TRAKeyValuePair'.");
                
            }
            TRACredentialType ITypeConverter<TRAKeyValuePair>.ConvertTo_TRACredentialType(TRAKeyValuePair value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TRAKeyValuePair>.Enumerate_TRACredentialType(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TRAKeyValuePair'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TRAKeyValuePair>.ConvertTo_TRAEncryptionFlag(TRAKeyValuePair value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TRAKeyValuePair>.Enumerate_TRAEncryptionFlag(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TRAKeyValuePair'.");
                
            }
            TRAServiceType ITypeConverter<TRAKeyValuePair>.ConvertTo_TRAServiceType(TRAKeyValuePair value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TRAKeyValuePair>.Enumerate_TRAServiceType(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TRAKeyValuePair'.");
                
            }
            TRATrustLevel ITypeConverter<TRAKeyValuePair>.ConvertTo_TRATrustLevel(TRAKeyValuePair value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TRAKeyValuePair>.Enumerate_TRATrustLevel(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TRAKeyValuePair'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TRAKeyValuePair>.ConvertTo_List_List_TRAKeyValuePair(TRAKeyValuePair value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TRAKeyValuePair>.Enumerate_List_List_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TRAKeyValuePair'.");
                
            }
            List<TRAClaim> ITypeConverter<TRAKeyValuePair>.ConvertTo_List_TRAClaim(TRAKeyValuePair value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TRAKeyValuePair>.Enumerate_List_TRAClaim(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(TDWVDAAccountEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims?' to 'TRAKeyValuePair'.");
                
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TRAKeyValuePair>.ConvertTo_TDWVDAAccountEntry_Claims_nullable(TRAKeyValuePair value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TDWVDAAccountEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims?> ITypeConverter<TRAKeyValuePair>.Enumerate_TDWVDAAccountEntry_Claims_nullable(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent?' to 'TRAKeyValuePair'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TRAKeyValuePair>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent_nullable(TRAKeyValuePair value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent?> ITypeConverter<TRAKeyValuePair>.Enumerate_TDWVDAAccountEntry_EnvelopeContent_nullable(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(TDWVDASmartContractEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims?' to 'TRAKeyValuePair'.");
                
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TRAKeyValuePair>.ConvertTo_TDWVDASmartContractEntry_Claims_nullable(TRAKeyValuePair value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TDWVDASmartContractEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims?> ITypeConverter<TRAKeyValuePair>.Enumerate_TDWVDASmartContractEntry_Claims_nullable(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent?' to 'TRAKeyValuePair'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TRAKeyValuePair>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent_nullable(TRAKeyValuePair value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent?> ITypeConverter<TRAKeyValuePair>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent_nullable(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRAKeyValuePair ITypeConverter<TRAKeyValuePair>.ConvertFrom_TRAEncryptedClaims_nullable(TRAEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims?' to 'TRAKeyValuePair'.");
                
            }
            TRAEncryptedClaims? ITypeConverter<TRAKeyValuePair>.ConvertTo_TRAEncryptedClaims_nullable(TRAKeyValuePair value)
            {
                return TypeConverter<TRAEncryptedClaims?>.ConvertFrom_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<TRAKeyValuePair>.GetConversionActionTo_TRAEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims?> ITypeConverter<TRAKeyValuePair>.Enumerate_TRAEncryptedClaims_nullable(TRAKeyValuePair value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TRACredentialType'.");
                
            }
            bool ITypeConverter<TRACredentialType>.ConvertTo_bool(TRACredentialType value)
            {
                return TypeConverter<bool>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TRACredentialType>.Enumerate_bool(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TRACredentialType'.");
                
            }
            long ITypeConverter<TRACredentialType>.ConvertTo_long(TRACredentialType value)
            {
                return TypeConverter<long>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TRACredentialType>.Enumerate_long(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TRACredentialType intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TRACredentialType.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TRACredentialType");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TRACredentialType>.ConvertTo_string(TRACredentialType value)
            {
                return TypeConverter<string>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TRACredentialType>.Enumerate_string(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TRACredentialType'.");
                
            }
            List<string> ITypeConverter<TRACredentialType>.ConvertTo_List_string(TRACredentialType value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TRACredentialType>.Enumerate_List_string(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TRACredentialType'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TRACredentialType>.ConvertTo_List_TRAKeyValuePair(TRACredentialType value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TRACredentialType>.Enumerate_List_TRAKeyValuePair(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TDWVDAAccountEntry_Claims(TDWVDAAccountEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims' to 'TRACredentialType'.");
                
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TRACredentialType>.ConvertTo_TDWVDAAccountEntry_Claims(TRACredentialType value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TDWVDAAccountEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims> ITypeConverter<TRACredentialType>.Enumerate_TDWVDAAccountEntry_Claims(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TDWVDAAccountEntry_Envelope(TDWVDAAccountEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Envelope' to 'TRACredentialType'.");
                
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TRACredentialType>.ConvertTo_TDWVDAAccountEntry_Envelope(TRACredentialType value)
            {
                return TypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TDWVDAAccountEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Envelope> ITypeConverter<TRACredentialType>.Enumerate_TDWVDAAccountEntry_Envelope(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent' to 'TRACredentialType'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TRACredentialType>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent(TRACredentialType value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent> ITypeConverter<TRACredentialType>.Enumerate_TDWVDAAccountEntry_EnvelopeContent(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TRACredentialType'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TRACredentialType>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TRACredentialType value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TRACredentialType>.Enumerate_TDWVDAIdentityRegistryEntryParm(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TRACredentialType'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TRACredentialType>.ConvertTo_TDWVDAPostInvocationParameters(TRACredentialType value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TRACredentialType>.Enumerate_TDWVDAPostInvocationParameters(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TRACredentialType'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TRACredentialType>.ConvertTo_TDWVDARevocationListEntryParm(TRACredentialType value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TRACredentialType>.Enumerate_TDWVDARevocationListEntryParm(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TRACredentialType'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TRACredentialType>.ConvertTo_TDWVDAServiceEndpointEntryParm(TRACredentialType value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TRACredentialType>.Enumerate_TDWVDAServiceEndpointEntryParm(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TDWVDASmartContractEntry_Claims(TDWVDASmartContractEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims' to 'TRACredentialType'.");
                
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TRACredentialType>.ConvertTo_TDWVDASmartContractEntry_Claims(TRACredentialType value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TDWVDASmartContractEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims> ITypeConverter<TRACredentialType>.Enumerate_TDWVDASmartContractEntry_Claims(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TDWVDASmartContractEntry_Envelope(TDWVDASmartContractEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Envelope' to 'TRACredentialType'.");
                
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TRACredentialType>.ConvertTo_TDWVDASmartContractEntry_Envelope(TRACredentialType value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TDWVDASmartContractEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Envelope> ITypeConverter<TRACredentialType>.Enumerate_TDWVDASmartContractEntry_Envelope(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent' to 'TRACredentialType'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TRACredentialType>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent(TRACredentialType value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent> ITypeConverter<TRACredentialType>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TRACredentialType'.");
                
            }
            TRAClaim ITypeConverter<TRACredentialType>.ConvertTo_TRAClaim(TRACredentialType value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TRACredentialType>.Enumerate_TRAClaim(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'TRACredentialType'.");
                
            }
            TRACredential_Envelope ITypeConverter<TRACredentialType>.ConvertTo_TRACredential_Envelope(TRACredentialType value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<TRACredentialType>.Enumerate_TRACredential_Envelope(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TRACredential_EnvelopeContent(TRACredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeContent' to 'TRACredentialType'.");
                
            }
            TRACredential_EnvelopeContent ITypeConverter<TRACredentialType>.ConvertTo_TRACredential_EnvelopeContent(TRACredentialType value)
            {
                return TypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TRACredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeContent> ITypeConverter<TRACredentialType>.Enumerate_TRACredential_EnvelopeContent(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TRACredential_EnvelopeLabel(TRACredential_EnvelopeLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeLabel' to 'TRACredentialType'.");
                
            }
            TRACredential_EnvelopeLabel ITypeConverter<TRACredentialType>.ConvertTo_TRACredential_EnvelopeLabel(TRACredentialType value)
            {
                return TypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TRACredential_EnvelopeLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeLabel> ITypeConverter<TRACredentialType>.Enumerate_TRACredential_EnvelopeLabel(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'TRACredentialType'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRACredentialType>.ConvertTo_TRACredential_EnvelopeSeal(TRACredentialType value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<TRACredentialType>.Enumerate_TRACredential_EnvelopeSeal(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TRAEncryptedClaims(TRAEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims' to 'TRACredentialType'.");
                
            }
            TRAEncryptedClaims ITypeConverter<TRACredentialType>.ConvertTo_TRAEncryptedClaims(TRACredentialType value)
            {
                return TypeConverter<TRAEncryptedClaims>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TRAEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims> ITypeConverter<TRACredentialType>.Enumerate_TRAEncryptedClaims(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TRACredentialType'.");
                
            }
            TRAKeyValuePair ITypeConverter<TRACredentialType>.ConvertTo_TRAKeyValuePair(TRACredentialType value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TRACredentialType>.Enumerate_TRAKeyValuePair(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                return (TRACredentialType)value;
                
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertTo_TRACredentialType(TRACredentialType value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TRACredentialType>.Enumerate_TRACredentialType(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TRACredentialType'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TRACredentialType>.ConvertTo_TRAEncryptionFlag(TRACredentialType value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TRACredentialType>.Enumerate_TRAEncryptionFlag(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TRACredentialType'.");
                
            }
            TRAServiceType ITypeConverter<TRACredentialType>.ConvertTo_TRAServiceType(TRACredentialType value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TRACredentialType>.Enumerate_TRAServiceType(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TRACredentialType'.");
                
            }
            TRATrustLevel ITypeConverter<TRACredentialType>.ConvertTo_TRATrustLevel(TRACredentialType value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TRACredentialType>.Enumerate_TRATrustLevel(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TRACredentialType'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TRACredentialType>.ConvertTo_List_List_TRAKeyValuePair(TRACredentialType value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TRACredentialType>.Enumerate_List_List_TRAKeyValuePair(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TRACredentialType'.");
                
            }
            List<TRAClaim> ITypeConverter<TRACredentialType>.ConvertTo_List_TRAClaim(TRACredentialType value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TRACredentialType>.Enumerate_List_TRAClaim(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(TDWVDAAccountEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims?' to 'TRACredentialType'.");
                
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TRACredentialType>.ConvertTo_TDWVDAAccountEntry_Claims_nullable(TRACredentialType value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TDWVDAAccountEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims?> ITypeConverter<TRACredentialType>.Enumerate_TDWVDAAccountEntry_Claims_nullable(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent?' to 'TRACredentialType'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TRACredentialType>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent_nullable(TRACredentialType value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent?> ITypeConverter<TRACredentialType>.Enumerate_TDWVDAAccountEntry_EnvelopeContent_nullable(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(TDWVDASmartContractEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims?' to 'TRACredentialType'.");
                
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TRACredentialType>.ConvertTo_TDWVDASmartContractEntry_Claims_nullable(TRACredentialType value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TDWVDASmartContractEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims?> ITypeConverter<TRACredentialType>.Enumerate_TDWVDASmartContractEntry_Claims_nullable(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent?' to 'TRACredentialType'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TRACredentialType>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent_nullable(TRACredentialType value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent?> ITypeConverter<TRACredentialType>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent_nullable(TRACredentialType value)
            {
                
                yield break;
            }
            TRACredentialType ITypeConverter<TRACredentialType>.ConvertFrom_TRAEncryptedClaims_nullable(TRAEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims?' to 'TRACredentialType'.");
                
            }
            TRAEncryptedClaims? ITypeConverter<TRACredentialType>.ConvertTo_TRAEncryptedClaims_nullable(TRACredentialType value)
            {
                return TypeConverter<TRAEncryptedClaims?>.ConvertFrom_TRACredentialType(value);
            }
            TypeConversionAction ITypeConverter<TRACredentialType>.GetConversionActionTo_TRAEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims?> ITypeConverter<TRACredentialType>.Enumerate_TRAEncryptedClaims_nullable(TRACredentialType value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TRAEncryptionFlag'.");
                
            }
            bool ITypeConverter<TRAEncryptionFlag>.ConvertTo_bool(TRAEncryptionFlag value)
            {
                return TypeConverter<bool>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TRAEncryptionFlag>.Enumerate_bool(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TRAEncryptionFlag'.");
                
            }
            long ITypeConverter<TRAEncryptionFlag>.ConvertTo_long(TRAEncryptionFlag value)
            {
                return TypeConverter<long>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TRAEncryptionFlag>.Enumerate_long(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TRAEncryptionFlag intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TRAEncryptionFlag.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TRAEncryptionFlag");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TRAEncryptionFlag>.ConvertTo_string(TRAEncryptionFlag value)
            {
                return TypeConverter<string>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TRAEncryptionFlag>.Enumerate_string(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TRAEncryptionFlag'.");
                
            }
            List<string> ITypeConverter<TRAEncryptionFlag>.ConvertTo_List_string(TRAEncryptionFlag value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TRAEncryptionFlag>.Enumerate_List_string(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TRAEncryptionFlag'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TRAEncryptionFlag>.ConvertTo_List_TRAKeyValuePair(TRAEncryptionFlag value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TRAEncryptionFlag>.Enumerate_List_TRAKeyValuePair(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDAAccountEntry_Claims(TDWVDAAccountEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims' to 'TRAEncryptionFlag'.");
                
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TRAEncryptionFlag>.ConvertTo_TDWVDAAccountEntry_Claims(TRAEncryptionFlag value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TDWVDAAccountEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims> ITypeConverter<TRAEncryptionFlag>.Enumerate_TDWVDAAccountEntry_Claims(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDAAccountEntry_Envelope(TDWVDAAccountEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Envelope' to 'TRAEncryptionFlag'.");
                
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TRAEncryptionFlag>.ConvertTo_TDWVDAAccountEntry_Envelope(TRAEncryptionFlag value)
            {
                return TypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TDWVDAAccountEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Envelope> ITypeConverter<TRAEncryptionFlag>.Enumerate_TDWVDAAccountEntry_Envelope(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent' to 'TRAEncryptionFlag'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TRAEncryptionFlag>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent(TRAEncryptionFlag value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent> ITypeConverter<TRAEncryptionFlag>.Enumerate_TDWVDAAccountEntry_EnvelopeContent(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TRAEncryptionFlag'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TRAEncryptionFlag>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TRAEncryptionFlag value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TRAEncryptionFlag>.Enumerate_TDWVDAIdentityRegistryEntryParm(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TRAEncryptionFlag'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TRAEncryptionFlag>.ConvertTo_TDWVDAPostInvocationParameters(TRAEncryptionFlag value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TRAEncryptionFlag>.Enumerate_TDWVDAPostInvocationParameters(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TRAEncryptionFlag'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TRAEncryptionFlag>.ConvertTo_TDWVDARevocationListEntryParm(TRAEncryptionFlag value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TRAEncryptionFlag>.Enumerate_TDWVDARevocationListEntryParm(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TRAEncryptionFlag'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TRAEncryptionFlag>.ConvertTo_TDWVDAServiceEndpointEntryParm(TRAEncryptionFlag value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TRAEncryptionFlag>.Enumerate_TDWVDAServiceEndpointEntryParm(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDASmartContractEntry_Claims(TDWVDASmartContractEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims' to 'TRAEncryptionFlag'.");
                
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TRAEncryptionFlag>.ConvertTo_TDWVDASmartContractEntry_Claims(TRAEncryptionFlag value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TDWVDASmartContractEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims> ITypeConverter<TRAEncryptionFlag>.Enumerate_TDWVDASmartContractEntry_Claims(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDASmartContractEntry_Envelope(TDWVDASmartContractEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Envelope' to 'TRAEncryptionFlag'.");
                
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TRAEncryptionFlag>.ConvertTo_TDWVDASmartContractEntry_Envelope(TRAEncryptionFlag value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TDWVDASmartContractEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Envelope> ITypeConverter<TRAEncryptionFlag>.Enumerate_TDWVDASmartContractEntry_Envelope(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent' to 'TRAEncryptionFlag'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TRAEncryptionFlag>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent(TRAEncryptionFlag value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent> ITypeConverter<TRAEncryptionFlag>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TRAEncryptionFlag'.");
                
            }
            TRAClaim ITypeConverter<TRAEncryptionFlag>.ConvertTo_TRAClaim(TRAEncryptionFlag value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TRAEncryptionFlag>.Enumerate_TRAClaim(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'TRAEncryptionFlag'.");
                
            }
            TRACredential_Envelope ITypeConverter<TRAEncryptionFlag>.ConvertTo_TRACredential_Envelope(TRAEncryptionFlag value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<TRAEncryptionFlag>.Enumerate_TRACredential_Envelope(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TRACredential_EnvelopeContent(TRACredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeContent' to 'TRAEncryptionFlag'.");
                
            }
            TRACredential_EnvelopeContent ITypeConverter<TRAEncryptionFlag>.ConvertTo_TRACredential_EnvelopeContent(TRAEncryptionFlag value)
            {
                return TypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TRACredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeContent> ITypeConverter<TRAEncryptionFlag>.Enumerate_TRACredential_EnvelopeContent(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TRACredential_EnvelopeLabel(TRACredential_EnvelopeLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeLabel' to 'TRAEncryptionFlag'.");
                
            }
            TRACredential_EnvelopeLabel ITypeConverter<TRAEncryptionFlag>.ConvertTo_TRACredential_EnvelopeLabel(TRAEncryptionFlag value)
            {
                return TypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TRACredential_EnvelopeLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeLabel> ITypeConverter<TRAEncryptionFlag>.Enumerate_TRACredential_EnvelopeLabel(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'TRAEncryptionFlag'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRAEncryptionFlag>.ConvertTo_TRACredential_EnvelopeSeal(TRAEncryptionFlag value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<TRAEncryptionFlag>.Enumerate_TRACredential_EnvelopeSeal(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TRAEncryptedClaims(TRAEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims' to 'TRAEncryptionFlag'.");
                
            }
            TRAEncryptedClaims ITypeConverter<TRAEncryptionFlag>.ConvertTo_TRAEncryptedClaims(TRAEncryptionFlag value)
            {
                return TypeConverter<TRAEncryptedClaims>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TRAEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims> ITypeConverter<TRAEncryptionFlag>.Enumerate_TRAEncryptedClaims(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TRAEncryptionFlag'.");
                
            }
            TRAKeyValuePair ITypeConverter<TRAEncryptionFlag>.ConvertTo_TRAKeyValuePair(TRAEncryptionFlag value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TRAEncryptionFlag>.Enumerate_TRAKeyValuePair(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TRAEncryptionFlag'.");
                
            }
            TRACredentialType ITypeConverter<TRAEncryptionFlag>.ConvertTo_TRACredentialType(TRAEncryptionFlag value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TRAEncryptionFlag>.Enumerate_TRACredentialType(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                return (TRAEncryptionFlag)value;
                
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertTo_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TRAEncryptionFlag>.Enumerate_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TRAEncryptionFlag'.");
                
            }
            TRAServiceType ITypeConverter<TRAEncryptionFlag>.ConvertTo_TRAServiceType(TRAEncryptionFlag value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TRAEncryptionFlag>.Enumerate_TRAServiceType(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TRAEncryptionFlag'.");
                
            }
            TRATrustLevel ITypeConverter<TRAEncryptionFlag>.ConvertTo_TRATrustLevel(TRAEncryptionFlag value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TRAEncryptionFlag>.Enumerate_TRATrustLevel(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TRAEncryptionFlag'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TRAEncryptionFlag>.ConvertTo_List_List_TRAKeyValuePair(TRAEncryptionFlag value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TRAEncryptionFlag>.Enumerate_List_List_TRAKeyValuePair(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TRAEncryptionFlag'.");
                
            }
            List<TRAClaim> ITypeConverter<TRAEncryptionFlag>.ConvertTo_List_TRAClaim(TRAEncryptionFlag value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TRAEncryptionFlag>.Enumerate_List_TRAClaim(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(TDWVDAAccountEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims?' to 'TRAEncryptionFlag'.");
                
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TRAEncryptionFlag>.ConvertTo_TDWVDAAccountEntry_Claims_nullable(TRAEncryptionFlag value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TDWVDAAccountEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims?> ITypeConverter<TRAEncryptionFlag>.Enumerate_TDWVDAAccountEntry_Claims_nullable(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent?' to 'TRAEncryptionFlag'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TRAEncryptionFlag>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent_nullable(TRAEncryptionFlag value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent?> ITypeConverter<TRAEncryptionFlag>.Enumerate_TDWVDAAccountEntry_EnvelopeContent_nullable(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(TDWVDASmartContractEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims?' to 'TRAEncryptionFlag'.");
                
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TRAEncryptionFlag>.ConvertTo_TDWVDASmartContractEntry_Claims_nullable(TRAEncryptionFlag value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TDWVDASmartContractEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims?> ITypeConverter<TRAEncryptionFlag>.Enumerate_TDWVDASmartContractEntry_Claims_nullable(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent?' to 'TRAEncryptionFlag'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TRAEncryptionFlag>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent_nullable(TRAEncryptionFlag value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent?> ITypeConverter<TRAEncryptionFlag>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent_nullable(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptionFlag>.ConvertFrom_TRAEncryptedClaims_nullable(TRAEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims?' to 'TRAEncryptionFlag'.");
                
            }
            TRAEncryptedClaims? ITypeConverter<TRAEncryptionFlag>.ConvertTo_TRAEncryptedClaims_nullable(TRAEncryptionFlag value)
            {
                return TypeConverter<TRAEncryptedClaims?>.ConvertFrom_TRAEncryptionFlag(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptionFlag>.GetConversionActionTo_TRAEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims?> ITypeConverter<TRAEncryptionFlag>.Enumerate_TRAEncryptedClaims_nullable(TRAEncryptionFlag value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TRAServiceType'.");
                
            }
            bool ITypeConverter<TRAServiceType>.ConvertTo_bool(TRAServiceType value)
            {
                return TypeConverter<bool>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TRAServiceType>.Enumerate_bool(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TRAServiceType'.");
                
            }
            long ITypeConverter<TRAServiceType>.ConvertTo_long(TRAServiceType value)
            {
                return TypeConverter<long>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TRAServiceType>.Enumerate_long(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TRAServiceType intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TRAServiceType.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TRAServiceType");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TRAServiceType>.ConvertTo_string(TRAServiceType value)
            {
                return TypeConverter<string>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TRAServiceType>.Enumerate_string(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TRAServiceType'.");
                
            }
            List<string> ITypeConverter<TRAServiceType>.ConvertTo_List_string(TRAServiceType value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TRAServiceType>.Enumerate_List_string(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TRAServiceType'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TRAServiceType>.ConvertTo_List_TRAKeyValuePair(TRAServiceType value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TRAServiceType>.Enumerate_List_TRAKeyValuePair(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TDWVDAAccountEntry_Claims(TDWVDAAccountEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims' to 'TRAServiceType'.");
                
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TRAServiceType>.ConvertTo_TDWVDAAccountEntry_Claims(TRAServiceType value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TDWVDAAccountEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims> ITypeConverter<TRAServiceType>.Enumerate_TDWVDAAccountEntry_Claims(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TDWVDAAccountEntry_Envelope(TDWVDAAccountEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Envelope' to 'TRAServiceType'.");
                
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TRAServiceType>.ConvertTo_TDWVDAAccountEntry_Envelope(TRAServiceType value)
            {
                return TypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TDWVDAAccountEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Envelope> ITypeConverter<TRAServiceType>.Enumerate_TDWVDAAccountEntry_Envelope(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent' to 'TRAServiceType'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TRAServiceType>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent(TRAServiceType value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent> ITypeConverter<TRAServiceType>.Enumerate_TDWVDAAccountEntry_EnvelopeContent(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TRAServiceType'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TRAServiceType>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TRAServiceType value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TRAServiceType>.Enumerate_TDWVDAIdentityRegistryEntryParm(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TRAServiceType'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TRAServiceType>.ConvertTo_TDWVDAPostInvocationParameters(TRAServiceType value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TRAServiceType>.Enumerate_TDWVDAPostInvocationParameters(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TRAServiceType'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TRAServiceType>.ConvertTo_TDWVDARevocationListEntryParm(TRAServiceType value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TRAServiceType>.Enumerate_TDWVDARevocationListEntryParm(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TRAServiceType'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TRAServiceType>.ConvertTo_TDWVDAServiceEndpointEntryParm(TRAServiceType value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TRAServiceType>.Enumerate_TDWVDAServiceEndpointEntryParm(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TDWVDASmartContractEntry_Claims(TDWVDASmartContractEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims' to 'TRAServiceType'.");
                
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TRAServiceType>.ConvertTo_TDWVDASmartContractEntry_Claims(TRAServiceType value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TDWVDASmartContractEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims> ITypeConverter<TRAServiceType>.Enumerate_TDWVDASmartContractEntry_Claims(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TDWVDASmartContractEntry_Envelope(TDWVDASmartContractEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Envelope' to 'TRAServiceType'.");
                
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TRAServiceType>.ConvertTo_TDWVDASmartContractEntry_Envelope(TRAServiceType value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TDWVDASmartContractEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Envelope> ITypeConverter<TRAServiceType>.Enumerate_TDWVDASmartContractEntry_Envelope(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent' to 'TRAServiceType'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TRAServiceType>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent(TRAServiceType value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent> ITypeConverter<TRAServiceType>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TRAServiceType'.");
                
            }
            TRAClaim ITypeConverter<TRAServiceType>.ConvertTo_TRAClaim(TRAServiceType value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TRAServiceType>.Enumerate_TRAClaim(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'TRAServiceType'.");
                
            }
            TRACredential_Envelope ITypeConverter<TRAServiceType>.ConvertTo_TRACredential_Envelope(TRAServiceType value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<TRAServiceType>.Enumerate_TRACredential_Envelope(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TRACredential_EnvelopeContent(TRACredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeContent' to 'TRAServiceType'.");
                
            }
            TRACredential_EnvelopeContent ITypeConverter<TRAServiceType>.ConvertTo_TRACredential_EnvelopeContent(TRAServiceType value)
            {
                return TypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TRACredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeContent> ITypeConverter<TRAServiceType>.Enumerate_TRACredential_EnvelopeContent(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TRACredential_EnvelopeLabel(TRACredential_EnvelopeLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeLabel' to 'TRAServiceType'.");
                
            }
            TRACredential_EnvelopeLabel ITypeConverter<TRAServiceType>.ConvertTo_TRACredential_EnvelopeLabel(TRAServiceType value)
            {
                return TypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TRACredential_EnvelopeLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeLabel> ITypeConverter<TRAServiceType>.Enumerate_TRACredential_EnvelopeLabel(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'TRAServiceType'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRAServiceType>.ConvertTo_TRACredential_EnvelopeSeal(TRAServiceType value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<TRAServiceType>.Enumerate_TRACredential_EnvelopeSeal(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TRAEncryptedClaims(TRAEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims' to 'TRAServiceType'.");
                
            }
            TRAEncryptedClaims ITypeConverter<TRAServiceType>.ConvertTo_TRAEncryptedClaims(TRAServiceType value)
            {
                return TypeConverter<TRAEncryptedClaims>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TRAEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims> ITypeConverter<TRAServiceType>.Enumerate_TRAEncryptedClaims(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TRAServiceType'.");
                
            }
            TRAKeyValuePair ITypeConverter<TRAServiceType>.ConvertTo_TRAKeyValuePair(TRAServiceType value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TRAServiceType>.Enumerate_TRAKeyValuePair(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TRAServiceType'.");
                
            }
            TRACredentialType ITypeConverter<TRAServiceType>.ConvertTo_TRACredentialType(TRAServiceType value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TRAServiceType>.Enumerate_TRACredentialType(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TRAServiceType'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TRAServiceType>.ConvertTo_TRAEncryptionFlag(TRAServiceType value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TRAServiceType>.Enumerate_TRAEncryptionFlag(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                return (TRAServiceType)value;
                
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertTo_TRAServiceType(TRAServiceType value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TRAServiceType>.Enumerate_TRAServiceType(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TRAServiceType'.");
                
            }
            TRATrustLevel ITypeConverter<TRAServiceType>.ConvertTo_TRATrustLevel(TRAServiceType value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TRAServiceType>.Enumerate_TRATrustLevel(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TRAServiceType'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TRAServiceType>.ConvertTo_List_List_TRAKeyValuePair(TRAServiceType value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TRAServiceType>.Enumerate_List_List_TRAKeyValuePair(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TRAServiceType'.");
                
            }
            List<TRAClaim> ITypeConverter<TRAServiceType>.ConvertTo_List_TRAClaim(TRAServiceType value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TRAServiceType>.Enumerate_List_TRAClaim(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(TDWVDAAccountEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims?' to 'TRAServiceType'.");
                
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TRAServiceType>.ConvertTo_TDWVDAAccountEntry_Claims_nullable(TRAServiceType value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TDWVDAAccountEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims?> ITypeConverter<TRAServiceType>.Enumerate_TDWVDAAccountEntry_Claims_nullable(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent?' to 'TRAServiceType'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TRAServiceType>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent_nullable(TRAServiceType value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent?> ITypeConverter<TRAServiceType>.Enumerate_TDWVDAAccountEntry_EnvelopeContent_nullable(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(TDWVDASmartContractEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims?' to 'TRAServiceType'.");
                
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TRAServiceType>.ConvertTo_TDWVDASmartContractEntry_Claims_nullable(TRAServiceType value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TDWVDASmartContractEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims?> ITypeConverter<TRAServiceType>.Enumerate_TDWVDASmartContractEntry_Claims_nullable(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent?' to 'TRAServiceType'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TRAServiceType>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent_nullable(TRAServiceType value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent?> ITypeConverter<TRAServiceType>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent_nullable(TRAServiceType value)
            {
                
                yield break;
            }
            TRAServiceType ITypeConverter<TRAServiceType>.ConvertFrom_TRAEncryptedClaims_nullable(TRAEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims?' to 'TRAServiceType'.");
                
            }
            TRAEncryptedClaims? ITypeConverter<TRAServiceType>.ConvertTo_TRAEncryptedClaims_nullable(TRAServiceType value)
            {
                return TypeConverter<TRAEncryptedClaims?>.ConvertFrom_TRAServiceType(value);
            }
            TypeConversionAction ITypeConverter<TRAServiceType>.GetConversionActionTo_TRAEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims?> ITypeConverter<TRAServiceType>.Enumerate_TRAEncryptedClaims_nullable(TRAServiceType value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TRATrustLevel'.");
                
            }
            bool ITypeConverter<TRATrustLevel>.ConvertTo_bool(TRATrustLevel value)
            {
                return TypeConverter<bool>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TRATrustLevel>.Enumerate_bool(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TRATrustLevel'.");
                
            }
            long ITypeConverter<TRATrustLevel>.ConvertTo_long(TRATrustLevel value)
            {
                return TypeConverter<long>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TRATrustLevel>.Enumerate_long(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TRATrustLevel intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = TRATrustLevel.TryParse(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TRATrustLevel");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TRATrustLevel>.ConvertTo_string(TRATrustLevel value)
            {
                return TypeConverter<string>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TRATrustLevel>.Enumerate_string(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TRATrustLevel'.");
                
            }
            List<string> ITypeConverter<TRATrustLevel>.ConvertTo_List_string(TRATrustLevel value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TRATrustLevel>.Enumerate_List_string(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TRATrustLevel'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TRATrustLevel>.ConvertTo_List_TRAKeyValuePair(TRATrustLevel value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TRATrustLevel>.Enumerate_List_TRAKeyValuePair(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TDWVDAAccountEntry_Claims(TDWVDAAccountEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims' to 'TRATrustLevel'.");
                
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TRATrustLevel>.ConvertTo_TDWVDAAccountEntry_Claims(TRATrustLevel value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TDWVDAAccountEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims> ITypeConverter<TRATrustLevel>.Enumerate_TDWVDAAccountEntry_Claims(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TDWVDAAccountEntry_Envelope(TDWVDAAccountEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Envelope' to 'TRATrustLevel'.");
                
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TRATrustLevel>.ConvertTo_TDWVDAAccountEntry_Envelope(TRATrustLevel value)
            {
                return TypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TDWVDAAccountEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Envelope> ITypeConverter<TRATrustLevel>.Enumerate_TDWVDAAccountEntry_Envelope(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent' to 'TRATrustLevel'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TRATrustLevel>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent(TRATrustLevel value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent> ITypeConverter<TRATrustLevel>.Enumerate_TDWVDAAccountEntry_EnvelopeContent(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TRATrustLevel'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TRATrustLevel>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TRATrustLevel value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TRATrustLevel>.Enumerate_TDWVDAIdentityRegistryEntryParm(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TRATrustLevel'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TRATrustLevel>.ConvertTo_TDWVDAPostInvocationParameters(TRATrustLevel value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TRATrustLevel>.Enumerate_TDWVDAPostInvocationParameters(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TRATrustLevel'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TRATrustLevel>.ConvertTo_TDWVDARevocationListEntryParm(TRATrustLevel value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TRATrustLevel>.Enumerate_TDWVDARevocationListEntryParm(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TRATrustLevel'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TRATrustLevel>.ConvertTo_TDWVDAServiceEndpointEntryParm(TRATrustLevel value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TRATrustLevel>.Enumerate_TDWVDAServiceEndpointEntryParm(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TDWVDASmartContractEntry_Claims(TDWVDASmartContractEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims' to 'TRATrustLevel'.");
                
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TRATrustLevel>.ConvertTo_TDWVDASmartContractEntry_Claims(TRATrustLevel value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TDWVDASmartContractEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims> ITypeConverter<TRATrustLevel>.Enumerate_TDWVDASmartContractEntry_Claims(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TDWVDASmartContractEntry_Envelope(TDWVDASmartContractEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Envelope' to 'TRATrustLevel'.");
                
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TRATrustLevel>.ConvertTo_TDWVDASmartContractEntry_Envelope(TRATrustLevel value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TDWVDASmartContractEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Envelope> ITypeConverter<TRATrustLevel>.Enumerate_TDWVDASmartContractEntry_Envelope(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent' to 'TRATrustLevel'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TRATrustLevel>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent(TRATrustLevel value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent> ITypeConverter<TRATrustLevel>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TRATrustLevel'.");
                
            }
            TRAClaim ITypeConverter<TRATrustLevel>.ConvertTo_TRAClaim(TRATrustLevel value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TRATrustLevel>.Enumerate_TRAClaim(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'TRATrustLevel'.");
                
            }
            TRACredential_Envelope ITypeConverter<TRATrustLevel>.ConvertTo_TRACredential_Envelope(TRATrustLevel value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<TRATrustLevel>.Enumerate_TRACredential_Envelope(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TRACredential_EnvelopeContent(TRACredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeContent' to 'TRATrustLevel'.");
                
            }
            TRACredential_EnvelopeContent ITypeConverter<TRATrustLevel>.ConvertTo_TRACredential_EnvelopeContent(TRATrustLevel value)
            {
                return TypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TRACredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeContent> ITypeConverter<TRATrustLevel>.Enumerate_TRACredential_EnvelopeContent(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TRACredential_EnvelopeLabel(TRACredential_EnvelopeLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeLabel' to 'TRATrustLevel'.");
                
            }
            TRACredential_EnvelopeLabel ITypeConverter<TRATrustLevel>.ConvertTo_TRACredential_EnvelopeLabel(TRATrustLevel value)
            {
                return TypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TRACredential_EnvelopeLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeLabel> ITypeConverter<TRATrustLevel>.Enumerate_TRACredential_EnvelopeLabel(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'TRATrustLevel'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRATrustLevel>.ConvertTo_TRACredential_EnvelopeSeal(TRATrustLevel value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<TRATrustLevel>.Enumerate_TRACredential_EnvelopeSeal(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TRAEncryptedClaims(TRAEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims' to 'TRATrustLevel'.");
                
            }
            TRAEncryptedClaims ITypeConverter<TRATrustLevel>.ConvertTo_TRAEncryptedClaims(TRATrustLevel value)
            {
                return TypeConverter<TRAEncryptedClaims>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TRAEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims> ITypeConverter<TRATrustLevel>.Enumerate_TRAEncryptedClaims(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TRATrustLevel'.");
                
            }
            TRAKeyValuePair ITypeConverter<TRATrustLevel>.ConvertTo_TRAKeyValuePair(TRATrustLevel value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TRATrustLevel>.Enumerate_TRAKeyValuePair(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TRATrustLevel'.");
                
            }
            TRACredentialType ITypeConverter<TRATrustLevel>.ConvertTo_TRACredentialType(TRATrustLevel value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TRATrustLevel>.Enumerate_TRACredentialType(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TRATrustLevel'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TRATrustLevel>.ConvertTo_TRAEncryptionFlag(TRATrustLevel value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TRATrustLevel>.Enumerate_TRAEncryptionFlag(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TRATrustLevel'.");
                
            }
            TRAServiceType ITypeConverter<TRATrustLevel>.ConvertTo_TRAServiceType(TRATrustLevel value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TRATrustLevel>.Enumerate_TRAServiceType(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                return (TRATrustLevel)value;
                
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertTo_TRATrustLevel(TRATrustLevel value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TRATrustLevel>.Enumerate_TRATrustLevel(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TRATrustLevel'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TRATrustLevel>.ConvertTo_List_List_TRAKeyValuePair(TRATrustLevel value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TRATrustLevel>.Enumerate_List_List_TRAKeyValuePair(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TRATrustLevel'.");
                
            }
            List<TRAClaim> ITypeConverter<TRATrustLevel>.ConvertTo_List_TRAClaim(TRATrustLevel value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TRATrustLevel>.Enumerate_List_TRAClaim(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(TDWVDAAccountEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims?' to 'TRATrustLevel'.");
                
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TRATrustLevel>.ConvertTo_TDWVDAAccountEntry_Claims_nullable(TRATrustLevel value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TDWVDAAccountEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims?> ITypeConverter<TRATrustLevel>.Enumerate_TDWVDAAccountEntry_Claims_nullable(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent?' to 'TRATrustLevel'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TRATrustLevel>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent_nullable(TRATrustLevel value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent?> ITypeConverter<TRATrustLevel>.Enumerate_TDWVDAAccountEntry_EnvelopeContent_nullable(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(TDWVDASmartContractEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims?' to 'TRATrustLevel'.");
                
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TRATrustLevel>.ConvertTo_TDWVDASmartContractEntry_Claims_nullable(TRATrustLevel value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TDWVDASmartContractEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims?> ITypeConverter<TRATrustLevel>.Enumerate_TDWVDASmartContractEntry_Claims_nullable(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent?' to 'TRATrustLevel'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TRATrustLevel>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent_nullable(TRATrustLevel value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent?> ITypeConverter<TRATrustLevel>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent_nullable(TRATrustLevel value)
            {
                
                yield break;
            }
            TRATrustLevel ITypeConverter<TRATrustLevel>.ConvertFrom_TRAEncryptedClaims_nullable(TRAEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims?' to 'TRATrustLevel'.");
                
            }
            TRAEncryptedClaims? ITypeConverter<TRATrustLevel>.ConvertTo_TRAEncryptedClaims_nullable(TRATrustLevel value)
            {
                return TypeConverter<TRAEncryptedClaims?>.ConvertFrom_TRATrustLevel(value);
            }
            TypeConversionAction ITypeConverter<TRATrustLevel>.GetConversionActionTo_TRAEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims?> ITypeConverter<TRATrustLevel>.Enumerate_TRAEncryptedClaims_nullable(TRATrustLevel value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            bool ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_bool(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<bool>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_bool(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            long ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_long(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<long>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_long(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    List<List<TRAKeyValuePair>> intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = ExternalParser.TryParse_List_List_TRAKeyValuePair(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        try
                        {
                            List<TRAKeyValuePair> element = TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_string(value);
                            intermediate_result = new List<List<TRAKeyValuePair>>();
                            intermediate_result.Add(element);
                        }
                        catch
                        {
                            throw new ArgumentException("Cannot parse \"" + value + "\" into either 'List<List<TRAKeyValuePair>>' or 'List<TRAKeyValuePair>'.");
                        }
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_string(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<string>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_string(List<List<TRAKeyValuePair>> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<string>.ConvertFrom_List_TRAKeyValuePair(element);
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_List_string(List<string> value)
            {
                
                {
                    List<List<TRAKeyValuePair>> intermediate_result = new List<List<TRAKeyValuePair>>();
                    foreach (var element in value)
                    {
                        intermediate_result.Add(TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_string(element));
                    }
                    return intermediate_result;
                }
                
            }
            List<string> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_List_string(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<List<string>>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_CONVERTLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_List_string(List<List<TRAKeyValuePair>> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<List<string>>.ConvertFrom_List_TRAKeyValuePair(element);
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                {
                    List<List<TRAKeyValuePair>> intermediate_result = new List<List<TRAKeyValuePair>>();
                    foreach (var element in value)
                    {
                        intermediate_result.Add(TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRAKeyValuePair(element));
                    }
                    return intermediate_result;
                }
                
            }
            List<TRAKeyValuePair> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_List_TRAKeyValuePair(element);
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDAAccountEntry_Claims(TDWVDAAccountEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TDWVDAAccountEntry_Claims ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TDWVDAAccountEntry_Claims(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TDWVDAAccountEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TDWVDAAccountEntry_Claims(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDAAccountEntry_Envelope(TDWVDAAccountEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Envelope' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TDWVDAAccountEntry_Envelope(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TDWVDAAccountEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Envelope> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TDWVDAAccountEntry_Envelope(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TDWVDAAccountEntry_EnvelopeContent(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TDWVDAIdentityRegistryEntryParm(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TDWVDAIdentityRegistryEntryParm(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TDWVDAPostInvocationParameters(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TDWVDAPostInvocationParameters(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TDWVDARevocationListEntryParm(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TDWVDARevocationListEntryParm(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TDWVDAServiceEndpointEntryParm(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TDWVDAServiceEndpointEntryParm(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDASmartContractEntry_Claims(TDWVDASmartContractEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TDWVDASmartContractEntry_Claims(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TDWVDASmartContractEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TDWVDASmartContractEntry_Claims(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDASmartContractEntry_Envelope(TDWVDASmartContractEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Envelope' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TDWVDASmartContractEntry_Envelope(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TDWVDASmartContractEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Envelope> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TDWVDASmartContractEntry_Envelope(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TRAClaim ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TRAClaim(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TRAClaim(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TRACredential_Envelope ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TRACredential_Envelope(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TRACredential_Envelope(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRACredential_EnvelopeContent(TRACredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeContent' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TRACredential_EnvelopeContent ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TRACredential_EnvelopeContent(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TRACredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeContent> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TRACredential_EnvelopeContent(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRACredential_EnvelopeLabel(TRACredential_EnvelopeLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeLabel' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TRACredential_EnvelopeLabel ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TRACredential_EnvelopeLabel(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TRACredential_EnvelopeLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeLabel> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TRACredential_EnvelopeLabel(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TRACredential_EnvelopeSeal(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TRACredential_EnvelopeSeal(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRAEncryptedClaims(TRAEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TRAEncryptedClaims ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TRAEncryptedClaims(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TRAEncryptedClaims>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TRAEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TRAEncryptedClaims(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                {
                    List<List<TRAKeyValuePair>> intermediate_result = new List<List<TRAKeyValuePair>>();
                    intermediate_result.Add(TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRAKeyValuePair(value));
                    return intermediate_result;
                }
                
            }
            TRAKeyValuePair ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TRACredentialType ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TRACredentialType(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TRACredentialType(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TRAEncryptionFlag ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TRAEncryptionFlag(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TRAEncryptionFlag(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TRAServiceType ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TRAServiceType(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TRAServiceType(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TRATrustLevel ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TRATrustLevel(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TRATrustLevel(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                return (List<List<TRAKeyValuePair>>)value;
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_List_TRAKeyValuePair(element);
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            List<TRAClaim> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_List_TRAClaim(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_List_TRAClaim(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(TDWVDAAccountEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims?' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TDWVDAAccountEntry_Claims_nullable(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TDWVDAAccountEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims?> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TDWVDAAccountEntry_Claims_nullable(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent?' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent_nullable(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent?> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TDWVDAAccountEntry_EnvelopeContent_nullable(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(TDWVDASmartContractEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims?' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TDWVDASmartContractEntry_Claims_nullable(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TDWVDASmartContractEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims?> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TDWVDASmartContractEntry_Claims_nullable(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent?' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent_nullable(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent?> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent_nullable(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRAEncryptedClaims_nullable(TRAEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims?' to 'List<List<TRAKeyValuePair>>'.");
                
            }
            TRAEncryptedClaims? ITypeConverter<List<List<TRAKeyValuePair>>>.ConvertTo_TRAEncryptedClaims_nullable(List<List<TRAKeyValuePair>> value)
            {
                return TypeConverter<TRAEncryptedClaims?>.ConvertFrom_List_List_TRAKeyValuePair(value);
            }
            TypeConversionAction ITypeConverter<List<List<TRAKeyValuePair>>>.GetConversionActionTo_TRAEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims?> ITypeConverter<List<List<TRAKeyValuePair>>>.Enumerate_TRAEncryptedClaims_nullable(List<List<TRAKeyValuePair>> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'List<TRAClaim>'.");
                
            }
            bool ITypeConverter<List<TRAClaim>>.ConvertTo_bool(List<TRAClaim> value)
            {
                return TypeConverter<bool>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<List<TRAClaim>>.Enumerate_bool(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'List<TRAClaim>'.");
                
            }
            long ITypeConverter<List<TRAClaim>>.ConvertTo_long(List<TRAClaim> value)
            {
                return TypeConverter<long>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<List<TRAClaim>>.Enumerate_long(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    List<TRAClaim> intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = ExternalParser.TryParse_List_TRAClaim(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        try
                        {
                            TRAClaim element = TypeConverter<TRAClaim>.ConvertFrom_string(value);
                            intermediate_result = new List<TRAClaim>();
                            intermediate_result.Add(element);
                        }
                        catch
                        {
                            throw new ArgumentException("Cannot parse \"" + value + "\" into either 'List<TRAClaim>' or 'TRAClaim'.");
                        }
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<List<TRAClaim>>.ConvertTo_string(List<TRAClaim> value)
            {
                return TypeConverter<string>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<List<TRAClaim>>.Enumerate_string(List<TRAClaim> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<string>.ConvertFrom_TRAClaim(element);
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_List_string(List<string> value)
            {
                
                {
                    List<TRAClaim> intermediate_result = new List<TRAClaim>();
                    foreach (var element in value)
                    {
                        intermediate_result.Add(TypeConverter<TRAClaim>.ConvertFrom_string(element));
                    }
                    return intermediate_result;
                }
                
            }
            List<string> ITypeConverter<List<TRAClaim>>.ConvertTo_List_string(List<TRAClaim> value)
            {
                return TypeConverter<List<string>>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_CONVERTLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<List<TRAClaim>>.Enumerate_List_string(List<TRAClaim> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<List<string>>.ConvertFrom_TRAClaim(element);
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'List<TRAClaim>'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<List<TRAClaim>>.ConvertTo_List_TRAKeyValuePair(List<TRAClaim> value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<List<TRAClaim>>.Enumerate_List_TRAKeyValuePair(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDAAccountEntry_Claims(TDWVDAAccountEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims' to 'List<TRAClaim>'.");
                
            }
            TDWVDAAccountEntry_Claims ITypeConverter<List<TRAClaim>>.ConvertTo_TDWVDAAccountEntry_Claims(List<TRAClaim> value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TDWVDAAccountEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims> ITypeConverter<List<TRAClaim>>.Enumerate_TDWVDAAccountEntry_Claims(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDAAccountEntry_Envelope(TDWVDAAccountEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Envelope' to 'List<TRAClaim>'.");
                
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<List<TRAClaim>>.ConvertTo_TDWVDAAccountEntry_Envelope(List<TRAClaim> value)
            {
                return TypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TDWVDAAccountEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Envelope> ITypeConverter<List<TRAClaim>>.Enumerate_TDWVDAAccountEntry_Envelope(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent' to 'List<TRAClaim>'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<List<TRAClaim>>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent(List<TRAClaim> value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent> ITypeConverter<List<TRAClaim>>.Enumerate_TDWVDAAccountEntry_EnvelopeContent(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'List<TRAClaim>'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<List<TRAClaim>>.ConvertTo_TDWVDAIdentityRegistryEntryParm(List<TRAClaim> value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<List<TRAClaim>>.Enumerate_TDWVDAIdentityRegistryEntryParm(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'List<TRAClaim>'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<List<TRAClaim>>.ConvertTo_TDWVDAPostInvocationParameters(List<TRAClaim> value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<List<TRAClaim>>.Enumerate_TDWVDAPostInvocationParameters(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'List<TRAClaim>'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<List<TRAClaim>>.ConvertTo_TDWVDARevocationListEntryParm(List<TRAClaim> value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<List<TRAClaim>>.Enumerate_TDWVDARevocationListEntryParm(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'List<TRAClaim>'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<List<TRAClaim>>.ConvertTo_TDWVDAServiceEndpointEntryParm(List<TRAClaim> value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<List<TRAClaim>>.Enumerate_TDWVDAServiceEndpointEntryParm(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDASmartContractEntry_Claims(TDWVDASmartContractEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims' to 'List<TRAClaim>'.");
                
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<List<TRAClaim>>.ConvertTo_TDWVDASmartContractEntry_Claims(List<TRAClaim> value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TDWVDASmartContractEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims> ITypeConverter<List<TRAClaim>>.Enumerate_TDWVDASmartContractEntry_Claims(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDASmartContractEntry_Envelope(TDWVDASmartContractEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Envelope' to 'List<TRAClaim>'.");
                
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<List<TRAClaim>>.ConvertTo_TDWVDASmartContractEntry_Envelope(List<TRAClaim> value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TDWVDASmartContractEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Envelope> ITypeConverter<List<TRAClaim>>.Enumerate_TDWVDASmartContractEntry_Envelope(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent' to 'List<TRAClaim>'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<List<TRAClaim>>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent(List<TRAClaim> value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent> ITypeConverter<List<TRAClaim>>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                {
                    List<TRAClaim> intermediate_result = new List<TRAClaim>();
                    intermediate_result.Add(TypeConverter<TRAClaim>.ConvertFrom_TRAClaim(value));
                    return intermediate_result;
                }
                
            }
            TRAClaim ITypeConverter<List<TRAClaim>>.ConvertTo_TRAClaim(List<TRAClaim> value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<List<TRAClaim>>.Enumerate_TRAClaim(List<TRAClaim> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<TRAClaim>.ConvertFrom_TRAClaim(element);
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'List<TRAClaim>'.");
                
            }
            TRACredential_Envelope ITypeConverter<List<TRAClaim>>.ConvertTo_TRACredential_Envelope(List<TRAClaim> value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<List<TRAClaim>>.Enumerate_TRACredential_Envelope(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TRACredential_EnvelopeContent(TRACredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeContent' to 'List<TRAClaim>'.");
                
            }
            TRACredential_EnvelopeContent ITypeConverter<List<TRAClaim>>.ConvertTo_TRACredential_EnvelopeContent(List<TRAClaim> value)
            {
                return TypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TRACredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeContent> ITypeConverter<List<TRAClaim>>.Enumerate_TRACredential_EnvelopeContent(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TRACredential_EnvelopeLabel(TRACredential_EnvelopeLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeLabel' to 'List<TRAClaim>'.");
                
            }
            TRACredential_EnvelopeLabel ITypeConverter<List<TRAClaim>>.ConvertTo_TRACredential_EnvelopeLabel(List<TRAClaim> value)
            {
                return TypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TRACredential_EnvelopeLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeLabel> ITypeConverter<List<TRAClaim>>.Enumerate_TRACredential_EnvelopeLabel(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'List<TRAClaim>'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<List<TRAClaim>>.ConvertTo_TRACredential_EnvelopeSeal(List<TRAClaim> value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<List<TRAClaim>>.Enumerate_TRACredential_EnvelopeSeal(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TRAEncryptedClaims(TRAEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims' to 'List<TRAClaim>'.");
                
            }
            TRAEncryptedClaims ITypeConverter<List<TRAClaim>>.ConvertTo_TRAEncryptedClaims(List<TRAClaim> value)
            {
                return TypeConverter<TRAEncryptedClaims>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TRAEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims> ITypeConverter<List<TRAClaim>>.Enumerate_TRAEncryptedClaims(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'List<TRAClaim>'.");
                
            }
            TRAKeyValuePair ITypeConverter<List<TRAClaim>>.ConvertTo_TRAKeyValuePair(List<TRAClaim> value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<List<TRAClaim>>.Enumerate_TRAKeyValuePair(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'List<TRAClaim>'.");
                
            }
            TRACredentialType ITypeConverter<List<TRAClaim>>.ConvertTo_TRACredentialType(List<TRAClaim> value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<List<TRAClaim>>.Enumerate_TRACredentialType(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'List<TRAClaim>'.");
                
            }
            TRAEncryptionFlag ITypeConverter<List<TRAClaim>>.ConvertTo_TRAEncryptionFlag(List<TRAClaim> value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<List<TRAClaim>>.Enumerate_TRAEncryptionFlag(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'List<TRAClaim>'.");
                
            }
            TRAServiceType ITypeConverter<List<TRAClaim>>.ConvertTo_TRAServiceType(List<TRAClaim> value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<List<TRAClaim>>.Enumerate_TRAServiceType(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'List<TRAClaim>'.");
                
            }
            TRATrustLevel ITypeConverter<List<TRAClaim>>.ConvertTo_TRATrustLevel(List<TRAClaim> value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<List<TRAClaim>>.Enumerate_TRATrustLevel(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'List<TRAClaim>'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<List<TRAClaim>>.ConvertTo_List_List_TRAKeyValuePair(List<TRAClaim> value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<List<TRAClaim>>.Enumerate_List_List_TRAKeyValuePair(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                return (List<TRAClaim>)value;
                
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertTo_List_TRAClaim(List<TRAClaim> value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<List<TRAClaim>>.Enumerate_List_TRAClaim(List<TRAClaim> value)
            {
                
                foreach (var element in value)
                    yield return TypeConverter<List<TRAClaim>>.ConvertFrom_TRAClaim(element);
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(TDWVDAAccountEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims?' to 'List<TRAClaim>'.");
                
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<List<TRAClaim>>.ConvertTo_TDWVDAAccountEntry_Claims_nullable(List<TRAClaim> value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TDWVDAAccountEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims?> ITypeConverter<List<TRAClaim>>.Enumerate_TDWVDAAccountEntry_Claims_nullable(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent?' to 'List<TRAClaim>'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<List<TRAClaim>>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent_nullable(List<TRAClaim> value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent?> ITypeConverter<List<TRAClaim>>.Enumerate_TDWVDAAccountEntry_EnvelopeContent_nullable(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(TDWVDASmartContractEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims?' to 'List<TRAClaim>'.");
                
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<List<TRAClaim>>.ConvertTo_TDWVDASmartContractEntry_Claims_nullable(List<TRAClaim> value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TDWVDASmartContractEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims?> ITypeConverter<List<TRAClaim>>.Enumerate_TDWVDASmartContractEntry_Claims_nullable(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent?' to 'List<TRAClaim>'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<List<TRAClaim>>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent_nullable(List<TRAClaim> value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent?> ITypeConverter<List<TRAClaim>>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent_nullable(List<TRAClaim> value)
            {
                
                yield break;
            }
            List<TRAClaim> ITypeConverter<List<TRAClaim>>.ConvertFrom_TRAEncryptedClaims_nullable(TRAEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims?' to 'List<TRAClaim>'.");
                
            }
            TRAEncryptedClaims? ITypeConverter<List<TRAClaim>>.ConvertTo_TRAEncryptedClaims_nullable(List<TRAClaim> value)
            {
                return TypeConverter<TRAEncryptedClaims?>.ConvertFrom_List_TRAClaim(value);
            }
            TypeConversionAction ITypeConverter<List<TRAClaim>>.GetConversionActionTo_TRAEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims?> ITypeConverter<List<TRAClaim>>.Enumerate_TRAEncryptedClaims_nullable(List<TRAClaim> value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TDWVDAAccountEntry_Claims?'.");
                
            }
            bool ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertTo_bool(TDWVDAAccountEntry_Claims? value)
            {
                return TypeConverter<bool>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims?>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TDWVDAAccountEntry_Claims?>.Enumerate_bool(TDWVDAAccountEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TDWVDAAccountEntry_Claims?'.");
                
            }
            long ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertTo_long(TDWVDAAccountEntry_Claims? value)
            {
                return TypeConverter<long>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims?>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TDWVDAAccountEntry_Claims?>.Enumerate_long(TDWVDAAccountEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TDWVDAAccountEntry_Claims? intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = ExternalParser.TryParse_TDWVDAAccountEntry_Claims_nullable(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TDWVDAAccountEntry_Claims?");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertTo_string(TDWVDAAccountEntry_Claims? value)
            {
                return TypeConverter<string>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims?>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TDWVDAAccountEntry_Claims?>.Enumerate_string(TDWVDAAccountEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TDWVDAAccountEntry_Claims?'.");
                
            }
            List<string> ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertTo_List_string(TDWVDAAccountEntry_Claims? value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims?>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TDWVDAAccountEntry_Claims?>.Enumerate_List_string(TDWVDAAccountEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TDWVDAAccountEntry_Claims?'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertTo_List_TRAKeyValuePair(TDWVDAAccountEntry_Claims? value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims?>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TDWVDAAccountEntry_Claims?>.Enumerate_List_TRAKeyValuePair(TDWVDAAccountEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TDWVDAAccountEntry_Claims(TDWVDAAccountEntry_Claims value)
            {
                
                return (TDWVDAAccountEntry_Claims?)value;
                
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertTo_TDWVDAAccountEntry_Claims(TDWVDAAccountEntry_Claims? value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims?>.GetConversionActionTo_TDWVDAAccountEntry_Claims()
            {
                
                return TypeConversionAction.TC_EXTRACTNULLABLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims> ITypeConverter<TDWVDAAccountEntry_Claims?>.Enumerate_TDWVDAAccountEntry_Claims(TDWVDAAccountEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TDWVDAAccountEntry_Envelope(TDWVDAAccountEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Envelope' to 'TDWVDAAccountEntry_Claims?'.");
                
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertTo_TDWVDAAccountEntry_Envelope(TDWVDAAccountEntry_Claims? value)
            {
                return TypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims?>.GetConversionActionTo_TDWVDAAccountEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Envelope> ITypeConverter<TDWVDAAccountEntry_Claims?>.Enumerate_TDWVDAAccountEntry_Envelope(TDWVDAAccountEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent' to 'TDWVDAAccountEntry_Claims?'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent(TDWVDAAccountEntry_Claims? value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims?>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent> ITypeConverter<TDWVDAAccountEntry_Claims?>.Enumerate_TDWVDAAccountEntry_EnvelopeContent(TDWVDAAccountEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TDWVDAAccountEntry_Claims?'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TDWVDAAccountEntry_Claims? value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims?>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TDWVDAAccountEntry_Claims?>.Enumerate_TDWVDAIdentityRegistryEntryParm(TDWVDAAccountEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TDWVDAAccountEntry_Claims?'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertTo_TDWVDAPostInvocationParameters(TDWVDAAccountEntry_Claims? value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims?>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TDWVDAAccountEntry_Claims?>.Enumerate_TDWVDAPostInvocationParameters(TDWVDAAccountEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TDWVDAAccountEntry_Claims?'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertTo_TDWVDARevocationListEntryParm(TDWVDAAccountEntry_Claims? value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims?>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TDWVDAAccountEntry_Claims?>.Enumerate_TDWVDARevocationListEntryParm(TDWVDAAccountEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TDWVDAAccountEntry_Claims?'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertTo_TDWVDAServiceEndpointEntryParm(TDWVDAAccountEntry_Claims? value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims?>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TDWVDAAccountEntry_Claims?>.Enumerate_TDWVDAServiceEndpointEntryParm(TDWVDAAccountEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TDWVDASmartContractEntry_Claims(TDWVDASmartContractEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims' to 'TDWVDAAccountEntry_Claims?'.");
                
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertTo_TDWVDASmartContractEntry_Claims(TDWVDAAccountEntry_Claims? value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims?>.GetConversionActionTo_TDWVDASmartContractEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims> ITypeConverter<TDWVDAAccountEntry_Claims?>.Enumerate_TDWVDASmartContractEntry_Claims(TDWVDAAccountEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TDWVDASmartContractEntry_Envelope(TDWVDASmartContractEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Envelope' to 'TDWVDAAccountEntry_Claims?'.");
                
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertTo_TDWVDASmartContractEntry_Envelope(TDWVDAAccountEntry_Claims? value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims?>.GetConversionActionTo_TDWVDASmartContractEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Envelope> ITypeConverter<TDWVDAAccountEntry_Claims?>.Enumerate_TDWVDASmartContractEntry_Envelope(TDWVDAAccountEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent' to 'TDWVDAAccountEntry_Claims?'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent(TDWVDAAccountEntry_Claims? value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims?>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent> ITypeConverter<TDWVDAAccountEntry_Claims?>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent(TDWVDAAccountEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TDWVDAAccountEntry_Claims?'.");
                
            }
            TRAClaim ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertTo_TRAClaim(TDWVDAAccountEntry_Claims? value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims?>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TDWVDAAccountEntry_Claims?>.Enumerate_TRAClaim(TDWVDAAccountEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'TDWVDAAccountEntry_Claims?'.");
                
            }
            TRACredential_Envelope ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertTo_TRACredential_Envelope(TDWVDAAccountEntry_Claims? value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims?>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<TDWVDAAccountEntry_Claims?>.Enumerate_TRACredential_Envelope(TDWVDAAccountEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TRACredential_EnvelopeContent(TRACredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeContent' to 'TDWVDAAccountEntry_Claims?'.");
                
            }
            TRACredential_EnvelopeContent ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertTo_TRACredential_EnvelopeContent(TDWVDAAccountEntry_Claims? value)
            {
                return TypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims?>.GetConversionActionTo_TRACredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeContent> ITypeConverter<TDWVDAAccountEntry_Claims?>.Enumerate_TRACredential_EnvelopeContent(TDWVDAAccountEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TRACredential_EnvelopeLabel(TRACredential_EnvelopeLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeLabel' to 'TDWVDAAccountEntry_Claims?'.");
                
            }
            TRACredential_EnvelopeLabel ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertTo_TRACredential_EnvelopeLabel(TDWVDAAccountEntry_Claims? value)
            {
                return TypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims?>.GetConversionActionTo_TRACredential_EnvelopeLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeLabel> ITypeConverter<TDWVDAAccountEntry_Claims?>.Enumerate_TRACredential_EnvelopeLabel(TDWVDAAccountEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'TDWVDAAccountEntry_Claims?'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertTo_TRACredential_EnvelopeSeal(TDWVDAAccountEntry_Claims? value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims?>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<TDWVDAAccountEntry_Claims?>.Enumerate_TRACredential_EnvelopeSeal(TDWVDAAccountEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TRAEncryptedClaims(TRAEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims' to 'TDWVDAAccountEntry_Claims?'.");
                
            }
            TRAEncryptedClaims ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertTo_TRAEncryptedClaims(TDWVDAAccountEntry_Claims? value)
            {
                return TypeConverter<TRAEncryptedClaims>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims?>.GetConversionActionTo_TRAEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims> ITypeConverter<TDWVDAAccountEntry_Claims?>.Enumerate_TRAEncryptedClaims(TDWVDAAccountEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TDWVDAAccountEntry_Claims?'.");
                
            }
            TRAKeyValuePair ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertTo_TRAKeyValuePair(TDWVDAAccountEntry_Claims? value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims?>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TDWVDAAccountEntry_Claims?>.Enumerate_TRAKeyValuePair(TDWVDAAccountEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TDWVDAAccountEntry_Claims?'.");
                
            }
            TRACredentialType ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertTo_TRACredentialType(TDWVDAAccountEntry_Claims? value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims?>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TDWVDAAccountEntry_Claims?>.Enumerate_TRACredentialType(TDWVDAAccountEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TDWVDAAccountEntry_Claims?'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertTo_TRAEncryptionFlag(TDWVDAAccountEntry_Claims? value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims?>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TDWVDAAccountEntry_Claims?>.Enumerate_TRAEncryptionFlag(TDWVDAAccountEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TDWVDAAccountEntry_Claims?'.");
                
            }
            TRAServiceType ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertTo_TRAServiceType(TDWVDAAccountEntry_Claims? value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims?>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TDWVDAAccountEntry_Claims?>.Enumerate_TRAServiceType(TDWVDAAccountEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TDWVDAAccountEntry_Claims?'.");
                
            }
            TRATrustLevel ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertTo_TRATrustLevel(TDWVDAAccountEntry_Claims? value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims?>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TDWVDAAccountEntry_Claims?>.Enumerate_TRATrustLevel(TDWVDAAccountEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TDWVDAAccountEntry_Claims?'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertTo_List_List_TRAKeyValuePair(TDWVDAAccountEntry_Claims? value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims?>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TDWVDAAccountEntry_Claims?>.Enumerate_List_List_TRAKeyValuePair(TDWVDAAccountEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TDWVDAAccountEntry_Claims?'.");
                
            }
            List<TRAClaim> ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertTo_List_TRAClaim(TDWVDAAccountEntry_Claims? value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims?>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TDWVDAAccountEntry_Claims?>.Enumerate_List_TRAClaim(TDWVDAAccountEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(TDWVDAAccountEntry_Claims? value)
            {
                
                return (TDWVDAAccountEntry_Claims?)value;
                
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertTo_TDWVDAAccountEntry_Claims_nullable(TDWVDAAccountEntry_Claims? value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims?>.GetConversionActionTo_TDWVDAAccountEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims?> ITypeConverter<TDWVDAAccountEntry_Claims?>.Enumerate_TDWVDAAccountEntry_Claims_nullable(TDWVDAAccountEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent?' to 'TDWVDAAccountEntry_Claims?'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_Claims? value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims?>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent?> ITypeConverter<TDWVDAAccountEntry_Claims?>.Enumerate_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(TDWVDASmartContractEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims?' to 'TDWVDAAccountEntry_Claims?'.");
                
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertTo_TDWVDASmartContractEntry_Claims_nullable(TDWVDAAccountEntry_Claims? value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims?>.GetConversionActionTo_TDWVDASmartContractEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims?> ITypeConverter<TDWVDAAccountEntry_Claims?>.Enumerate_TDWVDASmartContractEntry_Claims_nullable(TDWVDAAccountEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent?' to 'TDWVDAAccountEntry_Claims?'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_Claims? value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims?>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent?> ITypeConverter<TDWVDAAccountEntry_Claims?>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TRAEncryptedClaims_nullable(TRAEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims?' to 'TDWVDAAccountEntry_Claims?'.");
                
            }
            TRAEncryptedClaims? ITypeConverter<TDWVDAAccountEntry_Claims?>.ConvertTo_TRAEncryptedClaims_nullable(TDWVDAAccountEntry_Claims? value)
            {
                return TypeConverter<TRAEncryptedClaims?>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_Claims?>.GetConversionActionTo_TRAEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims?> ITypeConverter<TDWVDAAccountEntry_Claims?>.Enumerate_TRAEncryptedClaims_nullable(TDWVDAAccountEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TDWVDAAccountEntry_EnvelopeContent?'.");
                
            }
            bool ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertTo_bool(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                return TypeConverter<bool>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.Enumerate_bool(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TDWVDAAccountEntry_EnvelopeContent?'.");
                
            }
            long ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertTo_long(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                return TypeConverter<long>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.Enumerate_long(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TDWVDAAccountEntry_EnvelopeContent? intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = ExternalParser.TryParse_TDWVDAAccountEntry_EnvelopeContent_nullable(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TDWVDAAccountEntry_EnvelopeContent?");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertTo_string(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                return TypeConverter<string>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.Enumerate_string(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TDWVDAAccountEntry_EnvelopeContent?'.");
                
            }
            List<string> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertTo_List_string(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.Enumerate_List_string(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TDWVDAAccountEntry_EnvelopeContent?'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertTo_List_TRAKeyValuePair(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.Enumerate_List_TRAKeyValuePair(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TDWVDAAccountEntry_Claims(TDWVDAAccountEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims' to 'TDWVDAAccountEntry_EnvelopeContent?'.");
                
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertTo_TDWVDAAccountEntry_Claims(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.GetConversionActionTo_TDWVDAAccountEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.Enumerate_TDWVDAAccountEntry_Claims(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TDWVDAAccountEntry_Envelope(TDWVDAAccountEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Envelope' to 'TDWVDAAccountEntry_EnvelopeContent?'.");
                
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertTo_TDWVDAAccountEntry_Envelope(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                return TypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.GetConversionActionTo_TDWVDAAccountEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Envelope> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.Enumerate_TDWVDAAccountEntry_Envelope(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                return (TDWVDAAccountEntry_EnvelopeContent?)value;
                
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_EXTRACTNULLABLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.Enumerate_TDWVDAAccountEntry_EnvelopeContent(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TDWVDAAccountEntry_EnvelopeContent?'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.Enumerate_TDWVDAIdentityRegistryEntryParm(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TDWVDAAccountEntry_EnvelopeContent?'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertTo_TDWVDAPostInvocationParameters(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.Enumerate_TDWVDAPostInvocationParameters(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TDWVDAAccountEntry_EnvelopeContent?'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertTo_TDWVDARevocationListEntryParm(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.Enumerate_TDWVDARevocationListEntryParm(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TDWVDAAccountEntry_EnvelopeContent?'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertTo_TDWVDAServiceEndpointEntryParm(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.Enumerate_TDWVDAServiceEndpointEntryParm(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TDWVDASmartContractEntry_Claims(TDWVDASmartContractEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims' to 'TDWVDAAccountEntry_EnvelopeContent?'.");
                
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertTo_TDWVDASmartContractEntry_Claims(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.GetConversionActionTo_TDWVDASmartContractEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.Enumerate_TDWVDASmartContractEntry_Claims(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TDWVDASmartContractEntry_Envelope(TDWVDASmartContractEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Envelope' to 'TDWVDAAccountEntry_EnvelopeContent?'.");
                
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertTo_TDWVDASmartContractEntry_Envelope(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.GetConversionActionTo_TDWVDASmartContractEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Envelope> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.Enumerate_TDWVDASmartContractEntry_Envelope(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent' to 'TDWVDAAccountEntry_EnvelopeContent?'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TDWVDAAccountEntry_EnvelopeContent?'.");
                
            }
            TRAClaim ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertTo_TRAClaim(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.Enumerate_TRAClaim(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'TDWVDAAccountEntry_EnvelopeContent?'.");
                
            }
            TRACredential_Envelope ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertTo_TRACredential_Envelope(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.Enumerate_TRACredential_Envelope(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TRACredential_EnvelopeContent(TRACredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeContent' to 'TDWVDAAccountEntry_EnvelopeContent?'.");
                
            }
            TRACredential_EnvelopeContent ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertTo_TRACredential_EnvelopeContent(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                return TypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.GetConversionActionTo_TRACredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeContent> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.Enumerate_TRACredential_EnvelopeContent(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TRACredential_EnvelopeLabel(TRACredential_EnvelopeLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeLabel' to 'TDWVDAAccountEntry_EnvelopeContent?'.");
                
            }
            TRACredential_EnvelopeLabel ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertTo_TRACredential_EnvelopeLabel(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                return TypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.GetConversionActionTo_TRACredential_EnvelopeLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeLabel> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.Enumerate_TRACredential_EnvelopeLabel(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'TDWVDAAccountEntry_EnvelopeContent?'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertTo_TRACredential_EnvelopeSeal(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.Enumerate_TRACredential_EnvelopeSeal(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TRAEncryptedClaims(TRAEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims' to 'TDWVDAAccountEntry_EnvelopeContent?'.");
                
            }
            TRAEncryptedClaims ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertTo_TRAEncryptedClaims(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                return TypeConverter<TRAEncryptedClaims>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.GetConversionActionTo_TRAEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.Enumerate_TRAEncryptedClaims(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TDWVDAAccountEntry_EnvelopeContent?'.");
                
            }
            TRAKeyValuePair ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertTo_TRAKeyValuePair(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.Enumerate_TRAKeyValuePair(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TDWVDAAccountEntry_EnvelopeContent?'.");
                
            }
            TRACredentialType ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertTo_TRACredentialType(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.Enumerate_TRACredentialType(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TDWVDAAccountEntry_EnvelopeContent?'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertTo_TRAEncryptionFlag(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.Enumerate_TRAEncryptionFlag(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TDWVDAAccountEntry_EnvelopeContent?'.");
                
            }
            TRAServiceType ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertTo_TRAServiceType(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.Enumerate_TRAServiceType(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TDWVDAAccountEntry_EnvelopeContent?'.");
                
            }
            TRATrustLevel ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertTo_TRATrustLevel(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.Enumerate_TRATrustLevel(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TDWVDAAccountEntry_EnvelopeContent?'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertTo_List_List_TRAKeyValuePair(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.Enumerate_List_List_TRAKeyValuePair(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TDWVDAAccountEntry_EnvelopeContent?'.");
                
            }
            List<TRAClaim> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertTo_List_TRAClaim(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.Enumerate_List_TRAClaim(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(TDWVDAAccountEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims?' to 'TDWVDAAccountEntry_EnvelopeContent?'.");
                
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertTo_TDWVDAAccountEntry_Claims_nullable(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.GetConversionActionTo_TDWVDAAccountEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims?> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.Enumerate_TDWVDAAccountEntry_Claims_nullable(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                return (TDWVDAAccountEntry_EnvelopeContent?)value;
                
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent?> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.Enumerate_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(TDWVDASmartContractEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims?' to 'TDWVDAAccountEntry_EnvelopeContent?'.");
                
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertTo_TDWVDASmartContractEntry_Claims_nullable(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.GetConversionActionTo_TDWVDASmartContractEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims?> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.Enumerate_TDWVDASmartContractEntry_Claims_nullable(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent?' to 'TDWVDAAccountEntry_EnvelopeContent?'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent?> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TRAEncryptedClaims_nullable(TRAEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims?' to 'TDWVDAAccountEntry_EnvelopeContent?'.");
                
            }
            TRAEncryptedClaims? ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertTo_TRAEncryptedClaims_nullable(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                return TypeConverter<TRAEncryptedClaims?>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.GetConversionActionTo_TRAEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims?> ITypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.Enumerate_TRAEncryptedClaims_nullable(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TDWVDASmartContractEntry_Claims?'.");
                
            }
            bool ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertTo_bool(TDWVDASmartContractEntry_Claims? value)
            {
                return TypeConverter<bool>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims?>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TDWVDASmartContractEntry_Claims?>.Enumerate_bool(TDWVDASmartContractEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TDWVDASmartContractEntry_Claims?'.");
                
            }
            long ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertTo_long(TDWVDASmartContractEntry_Claims? value)
            {
                return TypeConverter<long>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims?>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TDWVDASmartContractEntry_Claims?>.Enumerate_long(TDWVDASmartContractEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TDWVDASmartContractEntry_Claims? intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = ExternalParser.TryParse_TDWVDASmartContractEntry_Claims_nullable(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TDWVDASmartContractEntry_Claims?");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertTo_string(TDWVDASmartContractEntry_Claims? value)
            {
                return TypeConverter<string>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims?>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TDWVDASmartContractEntry_Claims?>.Enumerate_string(TDWVDASmartContractEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TDWVDASmartContractEntry_Claims?'.");
                
            }
            List<string> ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertTo_List_string(TDWVDASmartContractEntry_Claims? value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims?>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TDWVDASmartContractEntry_Claims?>.Enumerate_List_string(TDWVDASmartContractEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TDWVDASmartContractEntry_Claims?'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertTo_List_TRAKeyValuePair(TDWVDASmartContractEntry_Claims? value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims?>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TDWVDASmartContractEntry_Claims?>.Enumerate_List_TRAKeyValuePair(TDWVDASmartContractEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TDWVDAAccountEntry_Claims(TDWVDAAccountEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims' to 'TDWVDASmartContractEntry_Claims?'.");
                
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertTo_TDWVDAAccountEntry_Claims(TDWVDASmartContractEntry_Claims? value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims?>.GetConversionActionTo_TDWVDAAccountEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims> ITypeConverter<TDWVDASmartContractEntry_Claims?>.Enumerate_TDWVDAAccountEntry_Claims(TDWVDASmartContractEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TDWVDAAccountEntry_Envelope(TDWVDAAccountEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Envelope' to 'TDWVDASmartContractEntry_Claims?'.");
                
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertTo_TDWVDAAccountEntry_Envelope(TDWVDASmartContractEntry_Claims? value)
            {
                return TypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims?>.GetConversionActionTo_TDWVDAAccountEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Envelope> ITypeConverter<TDWVDASmartContractEntry_Claims?>.Enumerate_TDWVDAAccountEntry_Envelope(TDWVDASmartContractEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent' to 'TDWVDASmartContractEntry_Claims?'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent(TDWVDASmartContractEntry_Claims? value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims?>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent> ITypeConverter<TDWVDASmartContractEntry_Claims?>.Enumerate_TDWVDAAccountEntry_EnvelopeContent(TDWVDASmartContractEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TDWVDASmartContractEntry_Claims?'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TDWVDASmartContractEntry_Claims? value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims?>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TDWVDASmartContractEntry_Claims?>.Enumerate_TDWVDAIdentityRegistryEntryParm(TDWVDASmartContractEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TDWVDASmartContractEntry_Claims?'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertTo_TDWVDAPostInvocationParameters(TDWVDASmartContractEntry_Claims? value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims?>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TDWVDASmartContractEntry_Claims?>.Enumerate_TDWVDAPostInvocationParameters(TDWVDASmartContractEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TDWVDASmartContractEntry_Claims?'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertTo_TDWVDARevocationListEntryParm(TDWVDASmartContractEntry_Claims? value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims?>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TDWVDASmartContractEntry_Claims?>.Enumerate_TDWVDARevocationListEntryParm(TDWVDASmartContractEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TDWVDASmartContractEntry_Claims?'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertTo_TDWVDAServiceEndpointEntryParm(TDWVDASmartContractEntry_Claims? value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims?>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TDWVDASmartContractEntry_Claims?>.Enumerate_TDWVDAServiceEndpointEntryParm(TDWVDASmartContractEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TDWVDASmartContractEntry_Claims(TDWVDASmartContractEntry_Claims value)
            {
                
                return (TDWVDASmartContractEntry_Claims?)value;
                
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertTo_TDWVDASmartContractEntry_Claims(TDWVDASmartContractEntry_Claims? value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims?>.GetConversionActionTo_TDWVDASmartContractEntry_Claims()
            {
                
                return TypeConversionAction.TC_EXTRACTNULLABLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims> ITypeConverter<TDWVDASmartContractEntry_Claims?>.Enumerate_TDWVDASmartContractEntry_Claims(TDWVDASmartContractEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TDWVDASmartContractEntry_Envelope(TDWVDASmartContractEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Envelope' to 'TDWVDASmartContractEntry_Claims?'.");
                
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertTo_TDWVDASmartContractEntry_Envelope(TDWVDASmartContractEntry_Claims? value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims?>.GetConversionActionTo_TDWVDASmartContractEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Envelope> ITypeConverter<TDWVDASmartContractEntry_Claims?>.Enumerate_TDWVDASmartContractEntry_Envelope(TDWVDASmartContractEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent' to 'TDWVDASmartContractEntry_Claims?'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent(TDWVDASmartContractEntry_Claims? value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims?>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent> ITypeConverter<TDWVDASmartContractEntry_Claims?>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent(TDWVDASmartContractEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TDWVDASmartContractEntry_Claims?'.");
                
            }
            TRAClaim ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertTo_TRAClaim(TDWVDASmartContractEntry_Claims? value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims?>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TDWVDASmartContractEntry_Claims?>.Enumerate_TRAClaim(TDWVDASmartContractEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'TDWVDASmartContractEntry_Claims?'.");
                
            }
            TRACredential_Envelope ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertTo_TRACredential_Envelope(TDWVDASmartContractEntry_Claims? value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims?>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<TDWVDASmartContractEntry_Claims?>.Enumerate_TRACredential_Envelope(TDWVDASmartContractEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TRACredential_EnvelopeContent(TRACredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeContent' to 'TDWVDASmartContractEntry_Claims?'.");
                
            }
            TRACredential_EnvelopeContent ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertTo_TRACredential_EnvelopeContent(TDWVDASmartContractEntry_Claims? value)
            {
                return TypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims?>.GetConversionActionTo_TRACredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeContent> ITypeConverter<TDWVDASmartContractEntry_Claims?>.Enumerate_TRACredential_EnvelopeContent(TDWVDASmartContractEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TRACredential_EnvelopeLabel(TRACredential_EnvelopeLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeLabel' to 'TDWVDASmartContractEntry_Claims?'.");
                
            }
            TRACredential_EnvelopeLabel ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertTo_TRACredential_EnvelopeLabel(TDWVDASmartContractEntry_Claims? value)
            {
                return TypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims?>.GetConversionActionTo_TRACredential_EnvelopeLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeLabel> ITypeConverter<TDWVDASmartContractEntry_Claims?>.Enumerate_TRACredential_EnvelopeLabel(TDWVDASmartContractEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'TDWVDASmartContractEntry_Claims?'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertTo_TRACredential_EnvelopeSeal(TDWVDASmartContractEntry_Claims? value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims?>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<TDWVDASmartContractEntry_Claims?>.Enumerate_TRACredential_EnvelopeSeal(TDWVDASmartContractEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TRAEncryptedClaims(TRAEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims' to 'TDWVDASmartContractEntry_Claims?'.");
                
            }
            TRAEncryptedClaims ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertTo_TRAEncryptedClaims(TDWVDASmartContractEntry_Claims? value)
            {
                return TypeConverter<TRAEncryptedClaims>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims?>.GetConversionActionTo_TRAEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims> ITypeConverter<TDWVDASmartContractEntry_Claims?>.Enumerate_TRAEncryptedClaims(TDWVDASmartContractEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TDWVDASmartContractEntry_Claims?'.");
                
            }
            TRAKeyValuePair ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertTo_TRAKeyValuePair(TDWVDASmartContractEntry_Claims? value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims?>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TDWVDASmartContractEntry_Claims?>.Enumerate_TRAKeyValuePair(TDWVDASmartContractEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TDWVDASmartContractEntry_Claims?'.");
                
            }
            TRACredentialType ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertTo_TRACredentialType(TDWVDASmartContractEntry_Claims? value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims?>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TDWVDASmartContractEntry_Claims?>.Enumerate_TRACredentialType(TDWVDASmartContractEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TDWVDASmartContractEntry_Claims?'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertTo_TRAEncryptionFlag(TDWVDASmartContractEntry_Claims? value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims?>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TDWVDASmartContractEntry_Claims?>.Enumerate_TRAEncryptionFlag(TDWVDASmartContractEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TDWVDASmartContractEntry_Claims?'.");
                
            }
            TRAServiceType ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertTo_TRAServiceType(TDWVDASmartContractEntry_Claims? value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims?>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TDWVDASmartContractEntry_Claims?>.Enumerate_TRAServiceType(TDWVDASmartContractEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TDWVDASmartContractEntry_Claims?'.");
                
            }
            TRATrustLevel ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertTo_TRATrustLevel(TDWVDASmartContractEntry_Claims? value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims?>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TDWVDASmartContractEntry_Claims?>.Enumerate_TRATrustLevel(TDWVDASmartContractEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TDWVDASmartContractEntry_Claims?'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertTo_List_List_TRAKeyValuePair(TDWVDASmartContractEntry_Claims? value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims?>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TDWVDASmartContractEntry_Claims?>.Enumerate_List_List_TRAKeyValuePair(TDWVDASmartContractEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TDWVDASmartContractEntry_Claims?'.");
                
            }
            List<TRAClaim> ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertTo_List_TRAClaim(TDWVDASmartContractEntry_Claims? value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims?>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TDWVDASmartContractEntry_Claims?>.Enumerate_List_TRAClaim(TDWVDASmartContractEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(TDWVDAAccountEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims?' to 'TDWVDASmartContractEntry_Claims?'.");
                
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertTo_TDWVDAAccountEntry_Claims_nullable(TDWVDASmartContractEntry_Claims? value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims?>.GetConversionActionTo_TDWVDAAccountEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims?> ITypeConverter<TDWVDASmartContractEntry_Claims?>.Enumerate_TDWVDAAccountEntry_Claims_nullable(TDWVDASmartContractEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent?' to 'TDWVDASmartContractEntry_Claims?'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_Claims? value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims?>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent?> ITypeConverter<TDWVDASmartContractEntry_Claims?>.Enumerate_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(TDWVDASmartContractEntry_Claims? value)
            {
                
                return (TDWVDASmartContractEntry_Claims?)value;
                
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertTo_TDWVDASmartContractEntry_Claims_nullable(TDWVDASmartContractEntry_Claims? value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims?>.GetConversionActionTo_TDWVDASmartContractEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims?> ITypeConverter<TDWVDASmartContractEntry_Claims?>.Enumerate_TDWVDASmartContractEntry_Claims_nullable(TDWVDASmartContractEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent?' to 'TDWVDASmartContractEntry_Claims?'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_Claims? value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims?>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent?> ITypeConverter<TDWVDASmartContractEntry_Claims?>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TRAEncryptedClaims_nullable(TRAEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims?' to 'TDWVDASmartContractEntry_Claims?'.");
                
            }
            TRAEncryptedClaims? ITypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertTo_TRAEncryptedClaims_nullable(TDWVDASmartContractEntry_Claims? value)
            {
                return TypeConverter<TRAEncryptedClaims?>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_Claims?>.GetConversionActionTo_TRAEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims?> ITypeConverter<TDWVDASmartContractEntry_Claims?>.Enumerate_TRAEncryptedClaims_nullable(TDWVDASmartContractEntry_Claims? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TDWVDASmartContractEntry_EnvelopeContent?'.");
                
            }
            bool ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertTo_bool(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                return TypeConverter<bool>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.Enumerate_bool(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TDWVDASmartContractEntry_EnvelopeContent?'.");
                
            }
            long ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertTo_long(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                return TypeConverter<long>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.Enumerate_long(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TDWVDASmartContractEntry_EnvelopeContent? intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = ExternalParser.TryParse_TDWVDASmartContractEntry_EnvelopeContent_nullable(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TDWVDASmartContractEntry_EnvelopeContent?");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertTo_string(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                return TypeConverter<string>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.Enumerate_string(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TDWVDASmartContractEntry_EnvelopeContent?'.");
                
            }
            List<string> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertTo_List_string(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.Enumerate_List_string(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TDWVDASmartContractEntry_EnvelopeContent?'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertTo_List_TRAKeyValuePair(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.Enumerate_List_TRAKeyValuePair(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TDWVDAAccountEntry_Claims(TDWVDAAccountEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims' to 'TDWVDASmartContractEntry_EnvelopeContent?'.");
                
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertTo_TDWVDAAccountEntry_Claims(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.GetConversionActionTo_TDWVDAAccountEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.Enumerate_TDWVDAAccountEntry_Claims(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TDWVDAAccountEntry_Envelope(TDWVDAAccountEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Envelope' to 'TDWVDASmartContractEntry_EnvelopeContent?'.");
                
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertTo_TDWVDAAccountEntry_Envelope(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                return TypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.GetConversionActionTo_TDWVDAAccountEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Envelope> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.Enumerate_TDWVDAAccountEntry_Envelope(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent' to 'TDWVDASmartContractEntry_EnvelopeContent?'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.Enumerate_TDWVDAAccountEntry_EnvelopeContent(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TDWVDASmartContractEntry_EnvelopeContent?'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.Enumerate_TDWVDAIdentityRegistryEntryParm(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TDWVDASmartContractEntry_EnvelopeContent?'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertTo_TDWVDAPostInvocationParameters(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.Enumerate_TDWVDAPostInvocationParameters(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TDWVDASmartContractEntry_EnvelopeContent?'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertTo_TDWVDARevocationListEntryParm(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.Enumerate_TDWVDARevocationListEntryParm(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TDWVDASmartContractEntry_EnvelopeContent?'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertTo_TDWVDAServiceEndpointEntryParm(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.Enumerate_TDWVDAServiceEndpointEntryParm(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TDWVDASmartContractEntry_Claims(TDWVDASmartContractEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims' to 'TDWVDASmartContractEntry_EnvelopeContent?'.");
                
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertTo_TDWVDASmartContractEntry_Claims(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.GetConversionActionTo_TDWVDASmartContractEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.Enumerate_TDWVDASmartContractEntry_Claims(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TDWVDASmartContractEntry_Envelope(TDWVDASmartContractEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Envelope' to 'TDWVDASmartContractEntry_EnvelopeContent?'.");
                
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertTo_TDWVDASmartContractEntry_Envelope(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.GetConversionActionTo_TDWVDASmartContractEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Envelope> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.Enumerate_TDWVDASmartContractEntry_Envelope(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                return (TDWVDASmartContractEntry_EnvelopeContent?)value;
                
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_EXTRACTNULLABLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TDWVDASmartContractEntry_EnvelopeContent?'.");
                
            }
            TRAClaim ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertTo_TRAClaim(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.Enumerate_TRAClaim(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'TDWVDASmartContractEntry_EnvelopeContent?'.");
                
            }
            TRACredential_Envelope ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertTo_TRACredential_Envelope(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.Enumerate_TRACredential_Envelope(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TRACredential_EnvelopeContent(TRACredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeContent' to 'TDWVDASmartContractEntry_EnvelopeContent?'.");
                
            }
            TRACredential_EnvelopeContent ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertTo_TRACredential_EnvelopeContent(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                return TypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.GetConversionActionTo_TRACredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeContent> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.Enumerate_TRACredential_EnvelopeContent(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TRACredential_EnvelopeLabel(TRACredential_EnvelopeLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeLabel' to 'TDWVDASmartContractEntry_EnvelopeContent?'.");
                
            }
            TRACredential_EnvelopeLabel ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertTo_TRACredential_EnvelopeLabel(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                return TypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.GetConversionActionTo_TRACredential_EnvelopeLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeLabel> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.Enumerate_TRACredential_EnvelopeLabel(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'TDWVDASmartContractEntry_EnvelopeContent?'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertTo_TRACredential_EnvelopeSeal(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.Enumerate_TRACredential_EnvelopeSeal(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TRAEncryptedClaims(TRAEncryptedClaims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims' to 'TDWVDASmartContractEntry_EnvelopeContent?'.");
                
            }
            TRAEncryptedClaims ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertTo_TRAEncryptedClaims(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                return TypeConverter<TRAEncryptedClaims>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.GetConversionActionTo_TRAEncryptedClaims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.Enumerate_TRAEncryptedClaims(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TDWVDASmartContractEntry_EnvelopeContent?'.");
                
            }
            TRAKeyValuePair ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertTo_TRAKeyValuePair(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.Enumerate_TRAKeyValuePair(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TDWVDASmartContractEntry_EnvelopeContent?'.");
                
            }
            TRACredentialType ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertTo_TRACredentialType(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.Enumerate_TRACredentialType(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TDWVDASmartContractEntry_EnvelopeContent?'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertTo_TRAEncryptionFlag(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.Enumerate_TRAEncryptionFlag(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TDWVDASmartContractEntry_EnvelopeContent?'.");
                
            }
            TRAServiceType ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertTo_TRAServiceType(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.Enumerate_TRAServiceType(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TDWVDASmartContractEntry_EnvelopeContent?'.");
                
            }
            TRATrustLevel ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertTo_TRATrustLevel(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.Enumerate_TRATrustLevel(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TDWVDASmartContractEntry_EnvelopeContent?'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertTo_List_List_TRAKeyValuePair(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.Enumerate_List_List_TRAKeyValuePair(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TDWVDASmartContractEntry_EnvelopeContent?'.");
                
            }
            List<TRAClaim> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertTo_List_TRAClaim(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.Enumerate_List_TRAClaim(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(TDWVDAAccountEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims?' to 'TDWVDASmartContractEntry_EnvelopeContent?'.");
                
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertTo_TDWVDAAccountEntry_Claims_nullable(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.GetConversionActionTo_TDWVDAAccountEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims?> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.Enumerate_TDWVDAAccountEntry_Claims_nullable(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent?' to 'TDWVDASmartContractEntry_EnvelopeContent?'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent?> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.Enumerate_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(TDWVDASmartContractEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims?' to 'TDWVDASmartContractEntry_EnvelopeContent?'.");
                
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertTo_TDWVDASmartContractEntry_Claims_nullable(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.GetConversionActionTo_TDWVDASmartContractEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims?> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.Enumerate_TDWVDASmartContractEntry_Claims_nullable(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                return (TDWVDASmartContractEntry_EnvelopeContent?)value;
                
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent?> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TRAEncryptedClaims_nullable(TRAEncryptedClaims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptedClaims?' to 'TDWVDASmartContractEntry_EnvelopeContent?'.");
                
            }
            TRAEncryptedClaims? ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertTo_TRAEncryptedClaims_nullable(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                return TypeConverter<TRAEncryptedClaims?>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(value);
            }
            TypeConversionAction ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.GetConversionActionTo_TRAEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims?> ITypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.Enumerate_TRAEncryptedClaims_nullable(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                yield break;
            }
            TRAEncryptedClaims? ITypeConverter<TRAEncryptedClaims?>.ConvertFrom_bool(bool value)
            {
                
                throw new InvalidCastException("Invalid cast from 'bool' to 'TRAEncryptedClaims?'.");
                
            }
            bool ITypeConverter<TRAEncryptedClaims?>.ConvertTo_bool(TRAEncryptedClaims? value)
            {
                return TypeConverter<bool>.ConvertFrom_TRAEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims?>.GetConversionActionTo_bool()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<bool> ITypeConverter<TRAEncryptedClaims?>.Enumerate_bool(TRAEncryptedClaims? value)
            {
                
                yield break;
            }
            TRAEncryptedClaims? ITypeConverter<TRAEncryptedClaims?>.ConvertFrom_long(long value)
            {
                
                throw new InvalidCastException("Invalid cast from 'long' to 'TRAEncryptedClaims?'.");
                
            }
            long ITypeConverter<TRAEncryptedClaims?>.ConvertTo_long(TRAEncryptedClaims? value)
            {
                return TypeConverter<long>.ConvertFrom_TRAEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims?>.GetConversionActionTo_long()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<long> ITypeConverter<TRAEncryptedClaims?>.Enumerate_long(TRAEncryptedClaims? value)
            {
                
                yield break;
            }
            TRAEncryptedClaims? ITypeConverter<TRAEncryptedClaims?>.ConvertFrom_string(string value)
            {
                
                {
                    #region String parse
                    TRAEncryptedClaims? intermediate_result;
                    bool conversion_success;
                    
                    {
                        conversion_success = ExternalParser.TryParse_TRAEncryptedClaims_nullable(value, out intermediate_result);
                    }
                    
                    if (!conversion_success)
                    {
                        
                        Throw.cannot_parse(value, "TRAEncryptedClaims?");
                        
                    }
                    return intermediate_result;
                    #endregion
                }
                
            }
            string ITypeConverter<TRAEncryptedClaims?>.ConvertTo_string(TRAEncryptedClaims? value)
            {
                return TypeConverter<string>.ConvertFrom_TRAEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims?>.GetConversionActionTo_string()
            {
                
                return TypeConversionAction.TC_TOSTRING;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<string> ITypeConverter<TRAEncryptedClaims?>.Enumerate_string(TRAEncryptedClaims? value)
            {
                
                yield break;
            }
            TRAEncryptedClaims? ITypeConverter<TRAEncryptedClaims?>.ConvertFrom_List_string(List<string> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<string>' to 'TRAEncryptedClaims?'.");
                
            }
            List<string> ITypeConverter<TRAEncryptedClaims?>.ConvertTo_List_string(TRAEncryptedClaims? value)
            {
                return TypeConverter<List<string>>.ConvertFrom_TRAEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims?>.GetConversionActionTo_List_string()
            {
                
                return TypeConversionAction.TC_WRAPINLIST;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<string>> ITypeConverter<TRAEncryptedClaims?>.Enumerate_List_string(TRAEncryptedClaims? value)
            {
                
                yield break;
            }
            TRAEncryptedClaims? ITypeConverter<TRAEncryptedClaims?>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAKeyValuePair>' to 'TRAEncryptedClaims?'.");
                
            }
            List<TRAKeyValuePair> ITypeConverter<TRAEncryptedClaims?>.ConvertTo_List_TRAKeyValuePair(TRAEncryptedClaims? value)
            {
                return TypeConverter<List<TRAKeyValuePair>>.ConvertFrom_TRAEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims?>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<TRAEncryptedClaims?>.Enumerate_List_TRAKeyValuePair(TRAEncryptedClaims? value)
            {
                
                yield break;
            }
            TRAEncryptedClaims? ITypeConverter<TRAEncryptedClaims?>.ConvertFrom_TDWVDAAccountEntry_Claims(TDWVDAAccountEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims' to 'TRAEncryptedClaims?'.");
                
            }
            TDWVDAAccountEntry_Claims ITypeConverter<TRAEncryptedClaims?>.ConvertTo_TDWVDAAccountEntry_Claims(TRAEncryptedClaims? value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims>.ConvertFrom_TRAEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims?>.GetConversionActionTo_TDWVDAAccountEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims> ITypeConverter<TRAEncryptedClaims?>.Enumerate_TDWVDAAccountEntry_Claims(TRAEncryptedClaims? value)
            {
                
                yield break;
            }
            TRAEncryptedClaims? ITypeConverter<TRAEncryptedClaims?>.ConvertFrom_TDWVDAAccountEntry_Envelope(TDWVDAAccountEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Envelope' to 'TRAEncryptedClaims?'.");
                
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<TRAEncryptedClaims?>.ConvertTo_TDWVDAAccountEntry_Envelope(TRAEncryptedClaims? value)
            {
                return TypeConverter<TDWVDAAccountEntry_Envelope>.ConvertFrom_TRAEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims?>.GetConversionActionTo_TDWVDAAccountEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Envelope> ITypeConverter<TRAEncryptedClaims?>.Enumerate_TDWVDAAccountEntry_Envelope(TRAEncryptedClaims? value)
            {
                
                yield break;
            }
            TRAEncryptedClaims? ITypeConverter<TRAEncryptedClaims?>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(TDWVDAAccountEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent' to 'TRAEncryptedClaims?'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<TRAEncryptedClaims?>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent(TRAEncryptedClaims? value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent>.ConvertFrom_TRAEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims?>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent> ITypeConverter<TRAEncryptedClaims?>.Enumerate_TDWVDAAccountEntry_EnvelopeContent(TRAEncryptedClaims? value)
            {
                
                yield break;
            }
            TRAEncryptedClaims? ITypeConverter<TRAEncryptedClaims?>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAIdentityRegistryEntryParm' to 'TRAEncryptedClaims?'.");
                
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<TRAEncryptedClaims?>.ConvertTo_TDWVDAIdentityRegistryEntryParm(TRAEncryptedClaims? value)
            {
                return TypeConverter<TDWVDAIdentityRegistryEntryParm>.ConvertFrom_TRAEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims?>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<TRAEncryptedClaims?>.Enumerate_TDWVDAIdentityRegistryEntryParm(TRAEncryptedClaims? value)
            {
                
                yield break;
            }
            TRAEncryptedClaims? ITypeConverter<TRAEncryptedClaims?>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAPostInvocationParameters' to 'TRAEncryptedClaims?'.");
                
            }
            TDWVDAPostInvocationParameters ITypeConverter<TRAEncryptedClaims?>.ConvertTo_TDWVDAPostInvocationParameters(TRAEncryptedClaims? value)
            {
                return TypeConverter<TDWVDAPostInvocationParameters>.ConvertFrom_TRAEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims?>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<TRAEncryptedClaims?>.Enumerate_TDWVDAPostInvocationParameters(TRAEncryptedClaims? value)
            {
                
                yield break;
            }
            TRAEncryptedClaims? ITypeConverter<TRAEncryptedClaims?>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDARevocationListEntryParm' to 'TRAEncryptedClaims?'.");
                
            }
            TDWVDARevocationListEntryParm ITypeConverter<TRAEncryptedClaims?>.ConvertTo_TDWVDARevocationListEntryParm(TRAEncryptedClaims? value)
            {
                return TypeConverter<TDWVDARevocationListEntryParm>.ConvertFrom_TRAEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims?>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<TRAEncryptedClaims?>.Enumerate_TDWVDARevocationListEntryParm(TRAEncryptedClaims? value)
            {
                
                yield break;
            }
            TRAEncryptedClaims? ITypeConverter<TRAEncryptedClaims?>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAServiceEndpointEntryParm' to 'TRAEncryptedClaims?'.");
                
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<TRAEncryptedClaims?>.ConvertTo_TDWVDAServiceEndpointEntryParm(TRAEncryptedClaims? value)
            {
                return TypeConverter<TDWVDAServiceEndpointEntryParm>.ConvertFrom_TRAEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims?>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<TRAEncryptedClaims?>.Enumerate_TDWVDAServiceEndpointEntryParm(TRAEncryptedClaims? value)
            {
                
                yield break;
            }
            TRAEncryptedClaims? ITypeConverter<TRAEncryptedClaims?>.ConvertFrom_TDWVDASmartContractEntry_Claims(TDWVDASmartContractEntry_Claims value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims' to 'TRAEncryptedClaims?'.");
                
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<TRAEncryptedClaims?>.ConvertTo_TDWVDASmartContractEntry_Claims(TRAEncryptedClaims? value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims>.ConvertFrom_TRAEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims?>.GetConversionActionTo_TDWVDASmartContractEntry_Claims()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims> ITypeConverter<TRAEncryptedClaims?>.Enumerate_TDWVDASmartContractEntry_Claims(TRAEncryptedClaims? value)
            {
                
                yield break;
            }
            TRAEncryptedClaims? ITypeConverter<TRAEncryptedClaims?>.ConvertFrom_TDWVDASmartContractEntry_Envelope(TDWVDASmartContractEntry_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Envelope' to 'TRAEncryptedClaims?'.");
                
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<TRAEncryptedClaims?>.ConvertTo_TDWVDASmartContractEntry_Envelope(TRAEncryptedClaims? value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Envelope>.ConvertFrom_TRAEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims?>.GetConversionActionTo_TDWVDASmartContractEntry_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Envelope> ITypeConverter<TRAEncryptedClaims?>.Enumerate_TDWVDASmartContractEntry_Envelope(TRAEncryptedClaims? value)
            {
                
                yield break;
            }
            TRAEncryptedClaims? ITypeConverter<TRAEncryptedClaims?>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent' to 'TRAEncryptedClaims?'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<TRAEncryptedClaims?>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent(TRAEncryptedClaims? value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent>.ConvertFrom_TRAEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims?>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent> ITypeConverter<TRAEncryptedClaims?>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent(TRAEncryptedClaims? value)
            {
                
                yield break;
            }
            TRAEncryptedClaims? ITypeConverter<TRAEncryptedClaims?>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAClaim' to 'TRAEncryptedClaims?'.");
                
            }
            TRAClaim ITypeConverter<TRAEncryptedClaims?>.ConvertTo_TRAClaim(TRAEncryptedClaims? value)
            {
                return TypeConverter<TRAClaim>.ConvertFrom_TRAEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims?>.GetConversionActionTo_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAClaim> ITypeConverter<TRAEncryptedClaims?>.Enumerate_TRAClaim(TRAEncryptedClaims? value)
            {
                
                yield break;
            }
            TRAEncryptedClaims? ITypeConverter<TRAEncryptedClaims?>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_Envelope' to 'TRAEncryptedClaims?'.");
                
            }
            TRACredential_Envelope ITypeConverter<TRAEncryptedClaims?>.ConvertTo_TRACredential_Envelope(TRAEncryptedClaims? value)
            {
                return TypeConverter<TRACredential_Envelope>.ConvertFrom_TRAEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims?>.GetConversionActionTo_TRACredential_Envelope()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_Envelope> ITypeConverter<TRAEncryptedClaims?>.Enumerate_TRACredential_Envelope(TRAEncryptedClaims? value)
            {
                
                yield break;
            }
            TRAEncryptedClaims? ITypeConverter<TRAEncryptedClaims?>.ConvertFrom_TRACredential_EnvelopeContent(TRACredential_EnvelopeContent value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeContent' to 'TRAEncryptedClaims?'.");
                
            }
            TRACredential_EnvelopeContent ITypeConverter<TRAEncryptedClaims?>.ConvertTo_TRACredential_EnvelopeContent(TRAEncryptedClaims? value)
            {
                return TypeConverter<TRACredential_EnvelopeContent>.ConvertFrom_TRAEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims?>.GetConversionActionTo_TRACredential_EnvelopeContent()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeContent> ITypeConverter<TRAEncryptedClaims?>.Enumerate_TRACredential_EnvelopeContent(TRAEncryptedClaims? value)
            {
                
                yield break;
            }
            TRAEncryptedClaims? ITypeConverter<TRAEncryptedClaims?>.ConvertFrom_TRACredential_EnvelopeLabel(TRACredential_EnvelopeLabel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeLabel' to 'TRAEncryptedClaims?'.");
                
            }
            TRACredential_EnvelopeLabel ITypeConverter<TRAEncryptedClaims?>.ConvertTo_TRACredential_EnvelopeLabel(TRAEncryptedClaims? value)
            {
                return TypeConverter<TRACredential_EnvelopeLabel>.ConvertFrom_TRAEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims?>.GetConversionActionTo_TRACredential_EnvelopeLabel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeLabel> ITypeConverter<TRAEncryptedClaims?>.Enumerate_TRACredential_EnvelopeLabel(TRAEncryptedClaims? value)
            {
                
                yield break;
            }
            TRAEncryptedClaims? ITypeConverter<TRAEncryptedClaims?>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredential_EnvelopeSeal' to 'TRAEncryptedClaims?'.");
                
            }
            TRACredential_EnvelopeSeal ITypeConverter<TRAEncryptedClaims?>.ConvertTo_TRACredential_EnvelopeSeal(TRAEncryptedClaims? value)
            {
                return TypeConverter<TRACredential_EnvelopeSeal>.ConvertFrom_TRAEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims?>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<TRAEncryptedClaims?>.Enumerate_TRACredential_EnvelopeSeal(TRAEncryptedClaims? value)
            {
                
                yield break;
            }
            TRAEncryptedClaims? ITypeConverter<TRAEncryptedClaims?>.ConvertFrom_TRAEncryptedClaims(TRAEncryptedClaims value)
            {
                
                return (TRAEncryptedClaims?)value;
                
            }
            TRAEncryptedClaims ITypeConverter<TRAEncryptedClaims?>.ConvertTo_TRAEncryptedClaims(TRAEncryptedClaims? value)
            {
                return TypeConverter<TRAEncryptedClaims>.ConvertFrom_TRAEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims?>.GetConversionActionTo_TRAEncryptedClaims()
            {
                
                return TypeConversionAction.TC_EXTRACTNULLABLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims> ITypeConverter<TRAEncryptedClaims?>.Enumerate_TRAEncryptedClaims(TRAEncryptedClaims? value)
            {
                
                yield break;
            }
            TRAEncryptedClaims? ITypeConverter<TRAEncryptedClaims?>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAKeyValuePair' to 'TRAEncryptedClaims?'.");
                
            }
            TRAKeyValuePair ITypeConverter<TRAEncryptedClaims?>.ConvertTo_TRAKeyValuePair(TRAEncryptedClaims? value)
            {
                return TypeConverter<TRAKeyValuePair>.ConvertFrom_TRAEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims?>.GetConversionActionTo_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAKeyValuePair> ITypeConverter<TRAEncryptedClaims?>.Enumerate_TRAKeyValuePair(TRAEncryptedClaims? value)
            {
                
                yield break;
            }
            TRAEncryptedClaims? ITypeConverter<TRAEncryptedClaims?>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRACredentialType' to 'TRAEncryptedClaims?'.");
                
            }
            TRACredentialType ITypeConverter<TRAEncryptedClaims?>.ConvertTo_TRACredentialType(TRAEncryptedClaims? value)
            {
                return TypeConverter<TRACredentialType>.ConvertFrom_TRAEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims?>.GetConversionActionTo_TRACredentialType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRACredentialType> ITypeConverter<TRAEncryptedClaims?>.Enumerate_TRACredentialType(TRAEncryptedClaims? value)
            {
                
                yield break;
            }
            TRAEncryptedClaims? ITypeConverter<TRAEncryptedClaims?>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAEncryptionFlag' to 'TRAEncryptedClaims?'.");
                
            }
            TRAEncryptionFlag ITypeConverter<TRAEncryptedClaims?>.ConvertTo_TRAEncryptionFlag(TRAEncryptedClaims? value)
            {
                return TypeConverter<TRAEncryptionFlag>.ConvertFrom_TRAEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims?>.GetConversionActionTo_TRAEncryptionFlag()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptionFlag> ITypeConverter<TRAEncryptedClaims?>.Enumerate_TRAEncryptionFlag(TRAEncryptedClaims? value)
            {
                
                yield break;
            }
            TRAEncryptedClaims? ITypeConverter<TRAEncryptedClaims?>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRAServiceType' to 'TRAEncryptedClaims?'.");
                
            }
            TRAServiceType ITypeConverter<TRAEncryptedClaims?>.ConvertTo_TRAServiceType(TRAEncryptedClaims? value)
            {
                return TypeConverter<TRAServiceType>.ConvertFrom_TRAEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims?>.GetConversionActionTo_TRAServiceType()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAServiceType> ITypeConverter<TRAEncryptedClaims?>.Enumerate_TRAServiceType(TRAEncryptedClaims? value)
            {
                
                yield break;
            }
            TRAEncryptedClaims? ITypeConverter<TRAEncryptedClaims?>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TRATrustLevel' to 'TRAEncryptedClaims?'.");
                
            }
            TRATrustLevel ITypeConverter<TRAEncryptedClaims?>.ConvertTo_TRATrustLevel(TRAEncryptedClaims? value)
            {
                return TypeConverter<TRATrustLevel>.ConvertFrom_TRAEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims?>.GetConversionActionTo_TRATrustLevel()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRATrustLevel> ITypeConverter<TRAEncryptedClaims?>.Enumerate_TRATrustLevel(TRAEncryptedClaims? value)
            {
                
                yield break;
            }
            TRAEncryptedClaims? ITypeConverter<TRAEncryptedClaims?>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<List<TRAKeyValuePair>>' to 'TRAEncryptedClaims?'.");
                
            }
            List<List<TRAKeyValuePair>> ITypeConverter<TRAEncryptedClaims?>.ConvertTo_List_List_TRAKeyValuePair(TRAEncryptedClaims? value)
            {
                return TypeConverter<List<List<TRAKeyValuePair>>>.ConvertFrom_TRAEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims?>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<TRAEncryptedClaims?>.Enumerate_List_List_TRAKeyValuePair(TRAEncryptedClaims? value)
            {
                
                yield break;
            }
            TRAEncryptedClaims? ITypeConverter<TRAEncryptedClaims?>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                
                throw new InvalidCastException("Invalid cast from 'List<TRAClaim>' to 'TRAEncryptedClaims?'.");
                
            }
            List<TRAClaim> ITypeConverter<TRAEncryptedClaims?>.ConvertTo_List_TRAClaim(TRAEncryptedClaims? value)
            {
                return TypeConverter<List<TRAClaim>>.ConvertFrom_TRAEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims?>.GetConversionActionTo_List_TRAClaim()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<List<TRAClaim>> ITypeConverter<TRAEncryptedClaims?>.Enumerate_List_TRAClaim(TRAEncryptedClaims? value)
            {
                
                yield break;
            }
            TRAEncryptedClaims? ITypeConverter<TRAEncryptedClaims?>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(TDWVDAAccountEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_Claims?' to 'TRAEncryptedClaims?'.");
                
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<TRAEncryptedClaims?>.ConvertTo_TDWVDAAccountEntry_Claims_nullable(TRAEncryptedClaims? value)
            {
                return TypeConverter<TDWVDAAccountEntry_Claims?>.ConvertFrom_TRAEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims?>.GetConversionActionTo_TDWVDAAccountEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_Claims?> ITypeConverter<TRAEncryptedClaims?>.Enumerate_TDWVDAAccountEntry_Claims_nullable(TRAEncryptedClaims? value)
            {
                
                yield break;
            }
            TRAEncryptedClaims? ITypeConverter<TRAEncryptedClaims?>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDAAccountEntry_EnvelopeContent?' to 'TRAEncryptedClaims?'.");
                
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<TRAEncryptedClaims?>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent_nullable(TRAEncryptedClaims? value)
            {
                return TypeConverter<TDWVDAAccountEntry_EnvelopeContent?>.ConvertFrom_TRAEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims?>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent?> ITypeConverter<TRAEncryptedClaims?>.Enumerate_TDWVDAAccountEntry_EnvelopeContent_nullable(TRAEncryptedClaims? value)
            {
                
                yield break;
            }
            TRAEncryptedClaims? ITypeConverter<TRAEncryptedClaims?>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(TDWVDASmartContractEntry_Claims? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_Claims?' to 'TRAEncryptedClaims?'.");
                
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<TRAEncryptedClaims?>.ConvertTo_TDWVDASmartContractEntry_Claims_nullable(TRAEncryptedClaims? value)
            {
                return TypeConverter<TDWVDASmartContractEntry_Claims?>.ConvertFrom_TRAEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims?>.GetConversionActionTo_TDWVDASmartContractEntry_Claims_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_Claims?> ITypeConverter<TRAEncryptedClaims?>.Enumerate_TDWVDASmartContractEntry_Claims_nullable(TRAEncryptedClaims? value)
            {
                
                yield break;
            }
            TRAEncryptedClaims? ITypeConverter<TRAEncryptedClaims?>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                
                throw new InvalidCastException("Invalid cast from 'TDWVDASmartContractEntry_EnvelopeContent?' to 'TRAEncryptedClaims?'.");
                
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<TRAEncryptedClaims?>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent_nullable(TRAEncryptedClaims? value)
            {
                return TypeConverter<TDWVDASmartContractEntry_EnvelopeContent?>.ConvertFrom_TRAEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims?>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent_nullable()
            {
                
                return TypeConversionAction.TC_NONCONVERTIBLE;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent?> ITypeConverter<TRAEncryptedClaims?>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent_nullable(TRAEncryptedClaims? value)
            {
                
                yield break;
            }
            TRAEncryptedClaims? ITypeConverter<TRAEncryptedClaims?>.ConvertFrom_TRAEncryptedClaims_nullable(TRAEncryptedClaims? value)
            {
                
                return (TRAEncryptedClaims?)value;
                
            }
            TRAEncryptedClaims? ITypeConverter<TRAEncryptedClaims?>.ConvertTo_TRAEncryptedClaims_nullable(TRAEncryptedClaims? value)
            {
                return TypeConverter<TRAEncryptedClaims?>.ConvertFrom_TRAEncryptedClaims_nullable(value);
            }
            TypeConversionAction ITypeConverter<TRAEncryptedClaims?>.GetConversionActionTo_TRAEncryptedClaims_nullable()
            {
                
                return TypeConversionAction.TC_ASSIGN;
                
            }
            /// <summary>
            /// ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            /// </summary>
            IEnumerable<TRAEncryptedClaims?> ITypeConverter<TRAEncryptedClaims?>.Enumerate_TRAEncryptedClaims_nullable(TRAEncryptedClaims? value)
            {
                
                yield break;
            }
            
            object ITypeConverter<object>.ConvertFrom_bool(bool value)
            {
                return value;
            }
            bool ITypeConverter<object>.ConvertTo_bool(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_bool()
            {
                throw new NotImplementedException();
            }
            IEnumerable<bool> ITypeConverter<object>.Enumerate_bool(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_long(long value)
            {
                return value;
            }
            long ITypeConverter<object>.ConvertTo_long(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_long()
            {
                throw new NotImplementedException();
            }
            IEnumerable<long> ITypeConverter<object>.Enumerate_long(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_string(string value)
            {
                return value;
            }
            string ITypeConverter<object>.ConvertTo_string(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_string()
            {
                throw new NotImplementedException();
            }
            IEnumerable<string> ITypeConverter<object>.Enumerate_string(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_List_string(List<string> value)
            {
                return value;
            }
            List<string> ITypeConverter<object>.ConvertTo_List_string(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_List_string()
            {
                throw new NotImplementedException();
            }
            IEnumerable<List<string>> ITypeConverter<object>.Enumerate_List_string(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
            {
                return value;
            }
            List<TRAKeyValuePair> ITypeConverter<object>.ConvertTo_List_TRAKeyValuePair(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_List_TRAKeyValuePair()
            {
                throw new NotImplementedException();
            }
            IEnumerable<List<TRAKeyValuePair>> ITypeConverter<object>.Enumerate_List_TRAKeyValuePair(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TDWVDAAccountEntry_Claims(TDWVDAAccountEntry_Claims value)
            {
                return value;
            }
            TDWVDAAccountEntry_Claims ITypeConverter<object>.ConvertTo_TDWVDAAccountEntry_Claims(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TDWVDAAccountEntry_Claims()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TDWVDAAccountEntry_Claims> ITypeConverter<object>.Enumerate_TDWVDAAccountEntry_Claims(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TDWVDAAccountEntry_Envelope(TDWVDAAccountEntry_Envelope value)
            {
                return value;
            }
            TDWVDAAccountEntry_Envelope ITypeConverter<object>.ConvertTo_TDWVDAAccountEntry_Envelope(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TDWVDAAccountEntry_Envelope()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TDWVDAAccountEntry_Envelope> ITypeConverter<object>.Enumerate_TDWVDAAccountEntry_Envelope(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(TDWVDAAccountEntry_EnvelopeContent value)
            {
                return value;
            }
            TDWVDAAccountEntry_EnvelopeContent ITypeConverter<object>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent> ITypeConverter<object>.Enumerate_TDWVDAAccountEntry_EnvelopeContent(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
            {
                return value;
            }
            TDWVDAIdentityRegistryEntryParm ITypeConverter<object>.ConvertTo_TDWVDAIdentityRegistryEntryParm(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<object>.Enumerate_TDWVDAIdentityRegistryEntryParm(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
            {
                return value;
            }
            TDWVDAPostInvocationParameters ITypeConverter<object>.ConvertTo_TDWVDAPostInvocationParameters(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TDWVDAPostInvocationParameters()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<object>.Enumerate_TDWVDAPostInvocationParameters(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
            {
                return value;
            }
            TDWVDARevocationListEntryParm ITypeConverter<object>.ConvertTo_TDWVDARevocationListEntryParm(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TDWVDARevocationListEntryParm()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<object>.Enumerate_TDWVDARevocationListEntryParm(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
            {
                return value;
            }
            TDWVDAServiceEndpointEntryParm ITypeConverter<object>.ConvertTo_TDWVDAServiceEndpointEntryParm(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<object>.Enumerate_TDWVDAServiceEndpointEntryParm(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TDWVDASmartContractEntry_Claims(TDWVDASmartContractEntry_Claims value)
            {
                return value;
            }
            TDWVDASmartContractEntry_Claims ITypeConverter<object>.ConvertTo_TDWVDASmartContractEntry_Claims(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TDWVDASmartContractEntry_Claims()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TDWVDASmartContractEntry_Claims> ITypeConverter<object>.Enumerate_TDWVDASmartContractEntry_Claims(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TDWVDASmartContractEntry_Envelope(TDWVDASmartContractEntry_Envelope value)
            {
                return value;
            }
            TDWVDASmartContractEntry_Envelope ITypeConverter<object>.ConvertTo_TDWVDASmartContractEntry_Envelope(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TDWVDASmartContractEntry_Envelope()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TDWVDASmartContractEntry_Envelope> ITypeConverter<object>.Enumerate_TDWVDASmartContractEntry_Envelope(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(TDWVDASmartContractEntry_EnvelopeContent value)
            {
                return value;
            }
            TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<object>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent> ITypeConverter<object>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TRAClaim(TRAClaim value)
            {
                return value;
            }
            TRAClaim ITypeConverter<object>.ConvertTo_TRAClaim(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TRAClaim()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TRAClaim> ITypeConverter<object>.Enumerate_TRAClaim(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
            {
                return value;
            }
            TRACredential_Envelope ITypeConverter<object>.ConvertTo_TRACredential_Envelope(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TRACredential_Envelope()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TRACredential_Envelope> ITypeConverter<object>.Enumerate_TRACredential_Envelope(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TRACredential_EnvelopeContent(TRACredential_EnvelopeContent value)
            {
                return value;
            }
            TRACredential_EnvelopeContent ITypeConverter<object>.ConvertTo_TRACredential_EnvelopeContent(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TRACredential_EnvelopeContent()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TRACredential_EnvelopeContent> ITypeConverter<object>.Enumerate_TRACredential_EnvelopeContent(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TRACredential_EnvelopeLabel(TRACredential_EnvelopeLabel value)
            {
                return value;
            }
            TRACredential_EnvelopeLabel ITypeConverter<object>.ConvertTo_TRACredential_EnvelopeLabel(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TRACredential_EnvelopeLabel()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TRACredential_EnvelopeLabel> ITypeConverter<object>.Enumerate_TRACredential_EnvelopeLabel(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
            {
                return value;
            }
            TRACredential_EnvelopeSeal ITypeConverter<object>.ConvertTo_TRACredential_EnvelopeSeal(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TRACredential_EnvelopeSeal()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<object>.Enumerate_TRACredential_EnvelopeSeal(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TRAEncryptedClaims(TRAEncryptedClaims value)
            {
                return value;
            }
            TRAEncryptedClaims ITypeConverter<object>.ConvertTo_TRAEncryptedClaims(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TRAEncryptedClaims()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TRAEncryptedClaims> ITypeConverter<object>.Enumerate_TRAEncryptedClaims(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
            {
                return value;
            }
            TRAKeyValuePair ITypeConverter<object>.ConvertTo_TRAKeyValuePair(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TRAKeyValuePair()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TRAKeyValuePair> ITypeConverter<object>.Enumerate_TRAKeyValuePair(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TRACredentialType(TRACredentialType value)
            {
                return value;
            }
            TRACredentialType ITypeConverter<object>.ConvertTo_TRACredentialType(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TRACredentialType()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TRACredentialType> ITypeConverter<object>.Enumerate_TRACredentialType(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
            {
                return value;
            }
            TRAEncryptionFlag ITypeConverter<object>.ConvertTo_TRAEncryptionFlag(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TRAEncryptionFlag()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TRAEncryptionFlag> ITypeConverter<object>.Enumerate_TRAEncryptionFlag(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TRAServiceType(TRAServiceType value)
            {
                return value;
            }
            TRAServiceType ITypeConverter<object>.ConvertTo_TRAServiceType(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TRAServiceType()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TRAServiceType> ITypeConverter<object>.Enumerate_TRAServiceType(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
            {
                return value;
            }
            TRATrustLevel ITypeConverter<object>.ConvertTo_TRATrustLevel(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TRATrustLevel()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TRATrustLevel> ITypeConverter<object>.Enumerate_TRATrustLevel(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
            {
                return value;
            }
            List<List<TRAKeyValuePair>> ITypeConverter<object>.ConvertTo_List_List_TRAKeyValuePair(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_List_List_TRAKeyValuePair()
            {
                throw new NotImplementedException();
            }
            IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<object>.Enumerate_List_List_TRAKeyValuePair(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
            {
                return value;
            }
            List<TRAClaim> ITypeConverter<object>.ConvertTo_List_TRAClaim(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_List_TRAClaim()
            {
                throw new NotImplementedException();
            }
            IEnumerable<List<TRAClaim>> ITypeConverter<object>.Enumerate_List_TRAClaim(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(TDWVDAAccountEntry_Claims? value)
            {
                return value;
            }
            TDWVDAAccountEntry_Claims? ITypeConverter<object>.ConvertTo_TDWVDAAccountEntry_Claims_nullable(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TDWVDAAccountEntry_Claims_nullable()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TDWVDAAccountEntry_Claims?> ITypeConverter<object>.Enumerate_TDWVDAAccountEntry_Claims_nullable(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_EnvelopeContent? value)
            {
                return value;
            }
            TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<object>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent_nullable(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent_nullable()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TDWVDAAccountEntry_EnvelopeContent?> ITypeConverter<object>.Enumerate_TDWVDAAccountEntry_EnvelopeContent_nullable(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(TDWVDASmartContractEntry_Claims? value)
            {
                return value;
            }
            TDWVDASmartContractEntry_Claims? ITypeConverter<object>.ConvertTo_TDWVDASmartContractEntry_Claims_nullable(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TDWVDASmartContractEntry_Claims_nullable()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TDWVDASmartContractEntry_Claims?> ITypeConverter<object>.Enumerate_TDWVDASmartContractEntry_Claims_nullable(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_EnvelopeContent? value)
            {
                return value;
            }
            TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<object>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent_nullable(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent_nullable()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TDWVDASmartContractEntry_EnvelopeContent?> ITypeConverter<object>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent_nullable(object value)
            {
                throw new NotImplementedException();
            }
            
            object ITypeConverter<object>.ConvertFrom_TRAEncryptedClaims_nullable(TRAEncryptedClaims? value)
            {
                return value;
            }
            TRAEncryptedClaims? ITypeConverter<object>.ConvertTo_TRAEncryptedClaims_nullable(object value)
            {
                throw new NotImplementedException();
            }
            TypeConversionAction ITypeConverter<object>.GetConversionActionTo_TRAEncryptedClaims_nullable()
            {
                throw new NotImplementedException();
            }
            IEnumerable<TRAEncryptedClaims?> ITypeConverter<object>.Enumerate_TRAEncryptedClaims_nullable(object value)
            {
                throw new NotImplementedException();
            }
            
        }
        internal static readonly ITypeConverter<T> s_type_converter = new _TypeConverterImpl() as ITypeConverter<T> ?? new TypeConverter<T>();
        #region Default implementation
        
        T ITypeConverter<T>.ConvertFrom_bool(bool value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        bool ITypeConverter<T>.ConvertTo_bool(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_bool()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<bool> ITypeConverter<T>.Enumerate_bool(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_long(long value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        long ITypeConverter<T>.ConvertTo_long(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_long()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<long> ITypeConverter<T>.Enumerate_long(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_string(string value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        string ITypeConverter<T>.ConvertTo_string(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_string()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<string> ITypeConverter<T>.Enumerate_string(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_List_string(List<string> value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        List<string> ITypeConverter<T>.ConvertTo_List_string(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_List_string()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<List<string>> ITypeConverter<T>.Enumerate_List_string(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        List<TRAKeyValuePair> ITypeConverter<T>.ConvertTo_List_TRAKeyValuePair(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_List_TRAKeyValuePair()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<List<TRAKeyValuePair>> ITypeConverter<T>.Enumerate_List_TRAKeyValuePair(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TDWVDAAccountEntry_Claims(TDWVDAAccountEntry_Claims value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TDWVDAAccountEntry_Claims ITypeConverter<T>.ConvertTo_TDWVDAAccountEntry_Claims(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TDWVDAAccountEntry_Claims()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TDWVDAAccountEntry_Claims> ITypeConverter<T>.Enumerate_TDWVDAAccountEntry_Claims(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TDWVDAAccountEntry_Envelope(TDWVDAAccountEntry_Envelope value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TDWVDAAccountEntry_Envelope ITypeConverter<T>.ConvertTo_TDWVDAAccountEntry_Envelope(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TDWVDAAccountEntry_Envelope()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TDWVDAAccountEntry_Envelope> ITypeConverter<T>.Enumerate_TDWVDAAccountEntry_Envelope(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(TDWVDAAccountEntry_EnvelopeContent value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TDWVDAAccountEntry_EnvelopeContent ITypeConverter<T>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TDWVDAAccountEntry_EnvelopeContent> ITypeConverter<T>.Enumerate_TDWVDAAccountEntry_EnvelopeContent(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TDWVDAIdentityRegistryEntryParm ITypeConverter<T>.ConvertTo_TDWVDAIdentityRegistryEntryParm(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TDWVDAIdentityRegistryEntryParm> ITypeConverter<T>.Enumerate_TDWVDAIdentityRegistryEntryParm(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TDWVDAPostInvocationParameters ITypeConverter<T>.ConvertTo_TDWVDAPostInvocationParameters(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TDWVDAPostInvocationParameters()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TDWVDAPostInvocationParameters> ITypeConverter<T>.Enumerate_TDWVDAPostInvocationParameters(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TDWVDARevocationListEntryParm ITypeConverter<T>.ConvertTo_TDWVDARevocationListEntryParm(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TDWVDARevocationListEntryParm()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TDWVDARevocationListEntryParm> ITypeConverter<T>.Enumerate_TDWVDARevocationListEntryParm(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TDWVDAServiceEndpointEntryParm ITypeConverter<T>.ConvertTo_TDWVDAServiceEndpointEntryParm(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TDWVDAServiceEndpointEntryParm> ITypeConverter<T>.Enumerate_TDWVDAServiceEndpointEntryParm(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TDWVDASmartContractEntry_Claims(TDWVDASmartContractEntry_Claims value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TDWVDASmartContractEntry_Claims ITypeConverter<T>.ConvertTo_TDWVDASmartContractEntry_Claims(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TDWVDASmartContractEntry_Claims()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TDWVDASmartContractEntry_Claims> ITypeConverter<T>.Enumerate_TDWVDASmartContractEntry_Claims(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TDWVDASmartContractEntry_Envelope(TDWVDASmartContractEntry_Envelope value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TDWVDASmartContractEntry_Envelope ITypeConverter<T>.ConvertTo_TDWVDASmartContractEntry_Envelope(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TDWVDASmartContractEntry_Envelope()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TDWVDASmartContractEntry_Envelope> ITypeConverter<T>.Enumerate_TDWVDASmartContractEntry_Envelope(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(TDWVDASmartContractEntry_EnvelopeContent value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TDWVDASmartContractEntry_EnvelopeContent ITypeConverter<T>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TDWVDASmartContractEntry_EnvelopeContent> ITypeConverter<T>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TRAClaim(TRAClaim value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TRAClaim ITypeConverter<T>.ConvertTo_TRAClaim(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TRAClaim()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TRAClaim> ITypeConverter<T>.Enumerate_TRAClaim(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TRACredential_Envelope ITypeConverter<T>.ConvertTo_TRACredential_Envelope(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TRACredential_Envelope()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TRACredential_Envelope> ITypeConverter<T>.Enumerate_TRACredential_Envelope(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TRACredential_EnvelopeContent(TRACredential_EnvelopeContent value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TRACredential_EnvelopeContent ITypeConverter<T>.ConvertTo_TRACredential_EnvelopeContent(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TRACredential_EnvelopeContent()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TRACredential_EnvelopeContent> ITypeConverter<T>.Enumerate_TRACredential_EnvelopeContent(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TRACredential_EnvelopeLabel(TRACredential_EnvelopeLabel value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TRACredential_EnvelopeLabel ITypeConverter<T>.ConvertTo_TRACredential_EnvelopeLabel(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TRACredential_EnvelopeLabel()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TRACredential_EnvelopeLabel> ITypeConverter<T>.Enumerate_TRACredential_EnvelopeLabel(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TRACredential_EnvelopeSeal ITypeConverter<T>.ConvertTo_TRACredential_EnvelopeSeal(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TRACredential_EnvelopeSeal()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TRACredential_EnvelopeSeal> ITypeConverter<T>.Enumerate_TRACredential_EnvelopeSeal(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TRAEncryptedClaims(TRAEncryptedClaims value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TRAEncryptedClaims ITypeConverter<T>.ConvertTo_TRAEncryptedClaims(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TRAEncryptedClaims()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TRAEncryptedClaims> ITypeConverter<T>.Enumerate_TRAEncryptedClaims(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TRAKeyValuePair ITypeConverter<T>.ConvertTo_TRAKeyValuePair(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TRAKeyValuePair()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TRAKeyValuePair> ITypeConverter<T>.Enumerate_TRAKeyValuePair(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TRACredentialType(TRACredentialType value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TRACredentialType ITypeConverter<T>.ConvertTo_TRACredentialType(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TRACredentialType()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TRACredentialType> ITypeConverter<T>.Enumerate_TRACredentialType(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TRAEncryptionFlag ITypeConverter<T>.ConvertTo_TRAEncryptionFlag(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TRAEncryptionFlag()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TRAEncryptionFlag> ITypeConverter<T>.Enumerate_TRAEncryptionFlag(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TRAServiceType(TRAServiceType value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TRAServiceType ITypeConverter<T>.ConvertTo_TRAServiceType(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TRAServiceType()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TRAServiceType> ITypeConverter<T>.Enumerate_TRAServiceType(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TRATrustLevel(TRATrustLevel value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TRATrustLevel ITypeConverter<T>.ConvertTo_TRATrustLevel(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TRATrustLevel()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TRATrustLevel> ITypeConverter<T>.Enumerate_TRATrustLevel(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        List<List<TRAKeyValuePair>> ITypeConverter<T>.ConvertTo_List_List_TRAKeyValuePair(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_List_List_TRAKeyValuePair()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<List<List<TRAKeyValuePair>>> ITypeConverter<T>.Enumerate_List_List_TRAKeyValuePair(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_List_TRAClaim(List<TRAClaim> value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        List<TRAClaim> ITypeConverter<T>.ConvertTo_List_TRAClaim(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_List_TRAClaim()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<List<TRAClaim>> ITypeConverter<T>.Enumerate_List_TRAClaim(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(TDWVDAAccountEntry_Claims? value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TDWVDAAccountEntry_Claims? ITypeConverter<T>.ConvertTo_TDWVDAAccountEntry_Claims_nullable(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TDWVDAAccountEntry_Claims_nullable()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TDWVDAAccountEntry_Claims?> ITypeConverter<T>.Enumerate_TDWVDAAccountEntry_Claims_nullable(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_EnvelopeContent? value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TDWVDAAccountEntry_EnvelopeContent? ITypeConverter<T>.ConvertTo_TDWVDAAccountEntry_EnvelopeContent_nullable(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent_nullable()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TDWVDAAccountEntry_EnvelopeContent?> ITypeConverter<T>.Enumerate_TDWVDAAccountEntry_EnvelopeContent_nullable(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(TDWVDASmartContractEntry_Claims? value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TDWVDASmartContractEntry_Claims? ITypeConverter<T>.ConvertTo_TDWVDASmartContractEntry_Claims_nullable(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TDWVDASmartContractEntry_Claims_nullable()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TDWVDASmartContractEntry_Claims?> ITypeConverter<T>.Enumerate_TDWVDASmartContractEntry_Claims_nullable(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_EnvelopeContent? value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TDWVDASmartContractEntry_EnvelopeContent? ITypeConverter<T>.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent_nullable(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent_nullable()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TDWVDASmartContractEntry_EnvelopeContent?> ITypeConverter<T>.Enumerate_TDWVDASmartContractEntry_EnvelopeContent_nullable(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        T ITypeConverter<T>.ConvertFrom_TRAEncryptedClaims_nullable(TRAEncryptedClaims? value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TRAEncryptedClaims? ITypeConverter<T>.ConvertTo_TRAEncryptedClaims_nullable(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        TypeConversionAction ITypeConverter<T>.GetConversionActionTo_TRAEncryptedClaims_nullable()
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        IEnumerable<TRAEncryptedClaims?> ITypeConverter<T>.Enumerate_TRAEncryptedClaims_nullable(T value)
        {
            throw new NotImplementedException("Internal error T5013.");
        }
        
        #endregion
        internal static readonly uint type_id = TypeSystem.GetTypeID(typeof(T));
        
        internal static T ConvertFrom_bool(bool value)
        {
            return s_type_converter.ConvertFrom_bool(value);
        }
        internal static bool ConvertTo_bool(T value)
        {
            return s_type_converter.ConvertTo_bool(value);
        }
        internal static TypeConversionAction GetConversionActionTo_bool()
        {
            return s_type_converter.GetConversionActionTo_bool();
        }
        internal static IEnumerable<bool> Enumerate_bool(T value)
        {
            return s_type_converter.Enumerate_bool(value);
        }
        
        internal static T ConvertFrom_long(long value)
        {
            return s_type_converter.ConvertFrom_long(value);
        }
        internal static long ConvertTo_long(T value)
        {
            return s_type_converter.ConvertTo_long(value);
        }
        internal static TypeConversionAction GetConversionActionTo_long()
        {
            return s_type_converter.GetConversionActionTo_long();
        }
        internal static IEnumerable<long> Enumerate_long(T value)
        {
            return s_type_converter.Enumerate_long(value);
        }
        
        internal static T ConvertFrom_string(string value)
        {
            return s_type_converter.ConvertFrom_string(value);
        }
        internal static string ConvertTo_string(T value)
        {
            return s_type_converter.ConvertTo_string(value);
        }
        internal static TypeConversionAction GetConversionActionTo_string()
        {
            return s_type_converter.GetConversionActionTo_string();
        }
        internal static IEnumerable<string> Enumerate_string(T value)
        {
            return s_type_converter.Enumerate_string(value);
        }
        
        internal static T ConvertFrom_List_string(List<string> value)
        {
            return s_type_converter.ConvertFrom_List_string(value);
        }
        internal static List<string> ConvertTo_List_string(T value)
        {
            return s_type_converter.ConvertTo_List_string(value);
        }
        internal static TypeConversionAction GetConversionActionTo_List_string()
        {
            return s_type_converter.GetConversionActionTo_List_string();
        }
        internal static IEnumerable<List<string>> Enumerate_List_string(T value)
        {
            return s_type_converter.Enumerate_List_string(value);
        }
        
        internal static T ConvertFrom_List_TRAKeyValuePair(List<TRAKeyValuePair> value)
        {
            return s_type_converter.ConvertFrom_List_TRAKeyValuePair(value);
        }
        internal static List<TRAKeyValuePair> ConvertTo_List_TRAKeyValuePair(T value)
        {
            return s_type_converter.ConvertTo_List_TRAKeyValuePair(value);
        }
        internal static TypeConversionAction GetConversionActionTo_List_TRAKeyValuePair()
        {
            return s_type_converter.GetConversionActionTo_List_TRAKeyValuePair();
        }
        internal static IEnumerable<List<TRAKeyValuePair>> Enumerate_List_TRAKeyValuePair(T value)
        {
            return s_type_converter.Enumerate_List_TRAKeyValuePair(value);
        }
        
        internal static T ConvertFrom_TDWVDAAccountEntry_Claims(TDWVDAAccountEntry_Claims value)
        {
            return s_type_converter.ConvertFrom_TDWVDAAccountEntry_Claims(value);
        }
        internal static TDWVDAAccountEntry_Claims ConvertTo_TDWVDAAccountEntry_Claims(T value)
        {
            return s_type_converter.ConvertTo_TDWVDAAccountEntry_Claims(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TDWVDAAccountEntry_Claims()
        {
            return s_type_converter.GetConversionActionTo_TDWVDAAccountEntry_Claims();
        }
        internal static IEnumerable<TDWVDAAccountEntry_Claims> Enumerate_TDWVDAAccountEntry_Claims(T value)
        {
            return s_type_converter.Enumerate_TDWVDAAccountEntry_Claims(value);
        }
        
        internal static T ConvertFrom_TDWVDAAccountEntry_Envelope(TDWVDAAccountEntry_Envelope value)
        {
            return s_type_converter.ConvertFrom_TDWVDAAccountEntry_Envelope(value);
        }
        internal static TDWVDAAccountEntry_Envelope ConvertTo_TDWVDAAccountEntry_Envelope(T value)
        {
            return s_type_converter.ConvertTo_TDWVDAAccountEntry_Envelope(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TDWVDAAccountEntry_Envelope()
        {
            return s_type_converter.GetConversionActionTo_TDWVDAAccountEntry_Envelope();
        }
        internal static IEnumerable<TDWVDAAccountEntry_Envelope> Enumerate_TDWVDAAccountEntry_Envelope(T value)
        {
            return s_type_converter.Enumerate_TDWVDAAccountEntry_Envelope(value);
        }
        
        internal static T ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(TDWVDAAccountEntry_EnvelopeContent value)
        {
            return s_type_converter.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent(value);
        }
        internal static TDWVDAAccountEntry_EnvelopeContent ConvertTo_TDWVDAAccountEntry_EnvelopeContent(T value)
        {
            return s_type_converter.ConvertTo_TDWVDAAccountEntry_EnvelopeContent(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent()
        {
            return s_type_converter.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent();
        }
        internal static IEnumerable<TDWVDAAccountEntry_EnvelopeContent> Enumerate_TDWVDAAccountEntry_EnvelopeContent(T value)
        {
            return s_type_converter.Enumerate_TDWVDAAccountEntry_EnvelopeContent(value);
        }
        
        internal static T ConvertFrom_TDWVDAIdentityRegistryEntryParm(TDWVDAIdentityRegistryEntryParm value)
        {
            return s_type_converter.ConvertFrom_TDWVDAIdentityRegistryEntryParm(value);
        }
        internal static TDWVDAIdentityRegistryEntryParm ConvertTo_TDWVDAIdentityRegistryEntryParm(T value)
        {
            return s_type_converter.ConvertTo_TDWVDAIdentityRegistryEntryParm(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TDWVDAIdentityRegistryEntryParm()
        {
            return s_type_converter.GetConversionActionTo_TDWVDAIdentityRegistryEntryParm();
        }
        internal static IEnumerable<TDWVDAIdentityRegistryEntryParm> Enumerate_TDWVDAIdentityRegistryEntryParm(T value)
        {
            return s_type_converter.Enumerate_TDWVDAIdentityRegistryEntryParm(value);
        }
        
        internal static T ConvertFrom_TDWVDAPostInvocationParameters(TDWVDAPostInvocationParameters value)
        {
            return s_type_converter.ConvertFrom_TDWVDAPostInvocationParameters(value);
        }
        internal static TDWVDAPostInvocationParameters ConvertTo_TDWVDAPostInvocationParameters(T value)
        {
            return s_type_converter.ConvertTo_TDWVDAPostInvocationParameters(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TDWVDAPostInvocationParameters()
        {
            return s_type_converter.GetConversionActionTo_TDWVDAPostInvocationParameters();
        }
        internal static IEnumerable<TDWVDAPostInvocationParameters> Enumerate_TDWVDAPostInvocationParameters(T value)
        {
            return s_type_converter.Enumerate_TDWVDAPostInvocationParameters(value);
        }
        
        internal static T ConvertFrom_TDWVDARevocationListEntryParm(TDWVDARevocationListEntryParm value)
        {
            return s_type_converter.ConvertFrom_TDWVDARevocationListEntryParm(value);
        }
        internal static TDWVDARevocationListEntryParm ConvertTo_TDWVDARevocationListEntryParm(T value)
        {
            return s_type_converter.ConvertTo_TDWVDARevocationListEntryParm(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TDWVDARevocationListEntryParm()
        {
            return s_type_converter.GetConversionActionTo_TDWVDARevocationListEntryParm();
        }
        internal static IEnumerable<TDWVDARevocationListEntryParm> Enumerate_TDWVDARevocationListEntryParm(T value)
        {
            return s_type_converter.Enumerate_TDWVDARevocationListEntryParm(value);
        }
        
        internal static T ConvertFrom_TDWVDAServiceEndpointEntryParm(TDWVDAServiceEndpointEntryParm value)
        {
            return s_type_converter.ConvertFrom_TDWVDAServiceEndpointEntryParm(value);
        }
        internal static TDWVDAServiceEndpointEntryParm ConvertTo_TDWVDAServiceEndpointEntryParm(T value)
        {
            return s_type_converter.ConvertTo_TDWVDAServiceEndpointEntryParm(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TDWVDAServiceEndpointEntryParm()
        {
            return s_type_converter.GetConversionActionTo_TDWVDAServiceEndpointEntryParm();
        }
        internal static IEnumerable<TDWVDAServiceEndpointEntryParm> Enumerate_TDWVDAServiceEndpointEntryParm(T value)
        {
            return s_type_converter.Enumerate_TDWVDAServiceEndpointEntryParm(value);
        }
        
        internal static T ConvertFrom_TDWVDASmartContractEntry_Claims(TDWVDASmartContractEntry_Claims value)
        {
            return s_type_converter.ConvertFrom_TDWVDASmartContractEntry_Claims(value);
        }
        internal static TDWVDASmartContractEntry_Claims ConvertTo_TDWVDASmartContractEntry_Claims(T value)
        {
            return s_type_converter.ConvertTo_TDWVDASmartContractEntry_Claims(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TDWVDASmartContractEntry_Claims()
        {
            return s_type_converter.GetConversionActionTo_TDWVDASmartContractEntry_Claims();
        }
        internal static IEnumerable<TDWVDASmartContractEntry_Claims> Enumerate_TDWVDASmartContractEntry_Claims(T value)
        {
            return s_type_converter.Enumerate_TDWVDASmartContractEntry_Claims(value);
        }
        
        internal static T ConvertFrom_TDWVDASmartContractEntry_Envelope(TDWVDASmartContractEntry_Envelope value)
        {
            return s_type_converter.ConvertFrom_TDWVDASmartContractEntry_Envelope(value);
        }
        internal static TDWVDASmartContractEntry_Envelope ConvertTo_TDWVDASmartContractEntry_Envelope(T value)
        {
            return s_type_converter.ConvertTo_TDWVDASmartContractEntry_Envelope(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TDWVDASmartContractEntry_Envelope()
        {
            return s_type_converter.GetConversionActionTo_TDWVDASmartContractEntry_Envelope();
        }
        internal static IEnumerable<TDWVDASmartContractEntry_Envelope> Enumerate_TDWVDASmartContractEntry_Envelope(T value)
        {
            return s_type_converter.Enumerate_TDWVDASmartContractEntry_Envelope(value);
        }
        
        internal static T ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(TDWVDASmartContractEntry_EnvelopeContent value)
        {
            return s_type_converter.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent(value);
        }
        internal static TDWVDASmartContractEntry_EnvelopeContent ConvertTo_TDWVDASmartContractEntry_EnvelopeContent(T value)
        {
            return s_type_converter.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent()
        {
            return s_type_converter.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent();
        }
        internal static IEnumerable<TDWVDASmartContractEntry_EnvelopeContent> Enumerate_TDWVDASmartContractEntry_EnvelopeContent(T value)
        {
            return s_type_converter.Enumerate_TDWVDASmartContractEntry_EnvelopeContent(value);
        }
        
        internal static T ConvertFrom_TRAClaim(TRAClaim value)
        {
            return s_type_converter.ConvertFrom_TRAClaim(value);
        }
        internal static TRAClaim ConvertTo_TRAClaim(T value)
        {
            return s_type_converter.ConvertTo_TRAClaim(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TRAClaim()
        {
            return s_type_converter.GetConversionActionTo_TRAClaim();
        }
        internal static IEnumerable<TRAClaim> Enumerate_TRAClaim(T value)
        {
            return s_type_converter.Enumerate_TRAClaim(value);
        }
        
        internal static T ConvertFrom_TRACredential_Envelope(TRACredential_Envelope value)
        {
            return s_type_converter.ConvertFrom_TRACredential_Envelope(value);
        }
        internal static TRACredential_Envelope ConvertTo_TRACredential_Envelope(T value)
        {
            return s_type_converter.ConvertTo_TRACredential_Envelope(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TRACredential_Envelope()
        {
            return s_type_converter.GetConversionActionTo_TRACredential_Envelope();
        }
        internal static IEnumerable<TRACredential_Envelope> Enumerate_TRACredential_Envelope(T value)
        {
            return s_type_converter.Enumerate_TRACredential_Envelope(value);
        }
        
        internal static T ConvertFrom_TRACredential_EnvelopeContent(TRACredential_EnvelopeContent value)
        {
            return s_type_converter.ConvertFrom_TRACredential_EnvelopeContent(value);
        }
        internal static TRACredential_EnvelopeContent ConvertTo_TRACredential_EnvelopeContent(T value)
        {
            return s_type_converter.ConvertTo_TRACredential_EnvelopeContent(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TRACredential_EnvelopeContent()
        {
            return s_type_converter.GetConversionActionTo_TRACredential_EnvelopeContent();
        }
        internal static IEnumerable<TRACredential_EnvelopeContent> Enumerate_TRACredential_EnvelopeContent(T value)
        {
            return s_type_converter.Enumerate_TRACredential_EnvelopeContent(value);
        }
        
        internal static T ConvertFrom_TRACredential_EnvelopeLabel(TRACredential_EnvelopeLabel value)
        {
            return s_type_converter.ConvertFrom_TRACredential_EnvelopeLabel(value);
        }
        internal static TRACredential_EnvelopeLabel ConvertTo_TRACredential_EnvelopeLabel(T value)
        {
            return s_type_converter.ConvertTo_TRACredential_EnvelopeLabel(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TRACredential_EnvelopeLabel()
        {
            return s_type_converter.GetConversionActionTo_TRACredential_EnvelopeLabel();
        }
        internal static IEnumerable<TRACredential_EnvelopeLabel> Enumerate_TRACredential_EnvelopeLabel(T value)
        {
            return s_type_converter.Enumerate_TRACredential_EnvelopeLabel(value);
        }
        
        internal static T ConvertFrom_TRACredential_EnvelopeSeal(TRACredential_EnvelopeSeal value)
        {
            return s_type_converter.ConvertFrom_TRACredential_EnvelopeSeal(value);
        }
        internal static TRACredential_EnvelopeSeal ConvertTo_TRACredential_EnvelopeSeal(T value)
        {
            return s_type_converter.ConvertTo_TRACredential_EnvelopeSeal(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TRACredential_EnvelopeSeal()
        {
            return s_type_converter.GetConversionActionTo_TRACredential_EnvelopeSeal();
        }
        internal static IEnumerable<TRACredential_EnvelopeSeal> Enumerate_TRACredential_EnvelopeSeal(T value)
        {
            return s_type_converter.Enumerate_TRACredential_EnvelopeSeal(value);
        }
        
        internal static T ConvertFrom_TRAEncryptedClaims(TRAEncryptedClaims value)
        {
            return s_type_converter.ConvertFrom_TRAEncryptedClaims(value);
        }
        internal static TRAEncryptedClaims ConvertTo_TRAEncryptedClaims(T value)
        {
            return s_type_converter.ConvertTo_TRAEncryptedClaims(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TRAEncryptedClaims()
        {
            return s_type_converter.GetConversionActionTo_TRAEncryptedClaims();
        }
        internal static IEnumerable<TRAEncryptedClaims> Enumerate_TRAEncryptedClaims(T value)
        {
            return s_type_converter.Enumerate_TRAEncryptedClaims(value);
        }
        
        internal static T ConvertFrom_TRAKeyValuePair(TRAKeyValuePair value)
        {
            return s_type_converter.ConvertFrom_TRAKeyValuePair(value);
        }
        internal static TRAKeyValuePair ConvertTo_TRAKeyValuePair(T value)
        {
            return s_type_converter.ConvertTo_TRAKeyValuePair(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TRAKeyValuePair()
        {
            return s_type_converter.GetConversionActionTo_TRAKeyValuePair();
        }
        internal static IEnumerable<TRAKeyValuePair> Enumerate_TRAKeyValuePair(T value)
        {
            return s_type_converter.Enumerate_TRAKeyValuePair(value);
        }
        
        internal static T ConvertFrom_TRACredentialType(TRACredentialType value)
        {
            return s_type_converter.ConvertFrom_TRACredentialType(value);
        }
        internal static TRACredentialType ConvertTo_TRACredentialType(T value)
        {
            return s_type_converter.ConvertTo_TRACredentialType(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TRACredentialType()
        {
            return s_type_converter.GetConversionActionTo_TRACredentialType();
        }
        internal static IEnumerable<TRACredentialType> Enumerate_TRACredentialType(T value)
        {
            return s_type_converter.Enumerate_TRACredentialType(value);
        }
        
        internal static T ConvertFrom_TRAEncryptionFlag(TRAEncryptionFlag value)
        {
            return s_type_converter.ConvertFrom_TRAEncryptionFlag(value);
        }
        internal static TRAEncryptionFlag ConvertTo_TRAEncryptionFlag(T value)
        {
            return s_type_converter.ConvertTo_TRAEncryptionFlag(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TRAEncryptionFlag()
        {
            return s_type_converter.GetConversionActionTo_TRAEncryptionFlag();
        }
        internal static IEnumerable<TRAEncryptionFlag> Enumerate_TRAEncryptionFlag(T value)
        {
            return s_type_converter.Enumerate_TRAEncryptionFlag(value);
        }
        
        internal static T ConvertFrom_TRAServiceType(TRAServiceType value)
        {
            return s_type_converter.ConvertFrom_TRAServiceType(value);
        }
        internal static TRAServiceType ConvertTo_TRAServiceType(T value)
        {
            return s_type_converter.ConvertTo_TRAServiceType(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TRAServiceType()
        {
            return s_type_converter.GetConversionActionTo_TRAServiceType();
        }
        internal static IEnumerable<TRAServiceType> Enumerate_TRAServiceType(T value)
        {
            return s_type_converter.Enumerate_TRAServiceType(value);
        }
        
        internal static T ConvertFrom_TRATrustLevel(TRATrustLevel value)
        {
            return s_type_converter.ConvertFrom_TRATrustLevel(value);
        }
        internal static TRATrustLevel ConvertTo_TRATrustLevel(T value)
        {
            return s_type_converter.ConvertTo_TRATrustLevel(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TRATrustLevel()
        {
            return s_type_converter.GetConversionActionTo_TRATrustLevel();
        }
        internal static IEnumerable<TRATrustLevel> Enumerate_TRATrustLevel(T value)
        {
            return s_type_converter.Enumerate_TRATrustLevel(value);
        }
        
        internal static T ConvertFrom_List_List_TRAKeyValuePair(List<List<TRAKeyValuePair>> value)
        {
            return s_type_converter.ConvertFrom_List_List_TRAKeyValuePair(value);
        }
        internal static List<List<TRAKeyValuePair>> ConvertTo_List_List_TRAKeyValuePair(T value)
        {
            return s_type_converter.ConvertTo_List_List_TRAKeyValuePair(value);
        }
        internal static TypeConversionAction GetConversionActionTo_List_List_TRAKeyValuePair()
        {
            return s_type_converter.GetConversionActionTo_List_List_TRAKeyValuePair();
        }
        internal static IEnumerable<List<List<TRAKeyValuePair>>> Enumerate_List_List_TRAKeyValuePair(T value)
        {
            return s_type_converter.Enumerate_List_List_TRAKeyValuePair(value);
        }
        
        internal static T ConvertFrom_List_TRAClaim(List<TRAClaim> value)
        {
            return s_type_converter.ConvertFrom_List_TRAClaim(value);
        }
        internal static List<TRAClaim> ConvertTo_List_TRAClaim(T value)
        {
            return s_type_converter.ConvertTo_List_TRAClaim(value);
        }
        internal static TypeConversionAction GetConversionActionTo_List_TRAClaim()
        {
            return s_type_converter.GetConversionActionTo_List_TRAClaim();
        }
        internal static IEnumerable<List<TRAClaim>> Enumerate_List_TRAClaim(T value)
        {
            return s_type_converter.Enumerate_List_TRAClaim(value);
        }
        
        internal static T ConvertFrom_TDWVDAAccountEntry_Claims_nullable(TDWVDAAccountEntry_Claims? value)
        {
            return s_type_converter.ConvertFrom_TDWVDAAccountEntry_Claims_nullable(value);
        }
        internal static TDWVDAAccountEntry_Claims? ConvertTo_TDWVDAAccountEntry_Claims_nullable(T value)
        {
            return s_type_converter.ConvertTo_TDWVDAAccountEntry_Claims_nullable(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TDWVDAAccountEntry_Claims_nullable()
        {
            return s_type_converter.GetConversionActionTo_TDWVDAAccountEntry_Claims_nullable();
        }
        internal static IEnumerable<TDWVDAAccountEntry_Claims?> Enumerate_TDWVDAAccountEntry_Claims_nullable(T value)
        {
            return s_type_converter.Enumerate_TDWVDAAccountEntry_Claims_nullable(value);
        }
        
        internal static T ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(TDWVDAAccountEntry_EnvelopeContent? value)
        {
            return s_type_converter.ConvertFrom_TDWVDAAccountEntry_EnvelopeContent_nullable(value);
        }
        internal static TDWVDAAccountEntry_EnvelopeContent? ConvertTo_TDWVDAAccountEntry_EnvelopeContent_nullable(T value)
        {
            return s_type_converter.ConvertTo_TDWVDAAccountEntry_EnvelopeContent_nullable(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent_nullable()
        {
            return s_type_converter.GetConversionActionTo_TDWVDAAccountEntry_EnvelopeContent_nullable();
        }
        internal static IEnumerable<TDWVDAAccountEntry_EnvelopeContent?> Enumerate_TDWVDAAccountEntry_EnvelopeContent_nullable(T value)
        {
            return s_type_converter.Enumerate_TDWVDAAccountEntry_EnvelopeContent_nullable(value);
        }
        
        internal static T ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(TDWVDASmartContractEntry_Claims? value)
        {
            return s_type_converter.ConvertFrom_TDWVDASmartContractEntry_Claims_nullable(value);
        }
        internal static TDWVDASmartContractEntry_Claims? ConvertTo_TDWVDASmartContractEntry_Claims_nullable(T value)
        {
            return s_type_converter.ConvertTo_TDWVDASmartContractEntry_Claims_nullable(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TDWVDASmartContractEntry_Claims_nullable()
        {
            return s_type_converter.GetConversionActionTo_TDWVDASmartContractEntry_Claims_nullable();
        }
        internal static IEnumerable<TDWVDASmartContractEntry_Claims?> Enumerate_TDWVDASmartContractEntry_Claims_nullable(T value)
        {
            return s_type_converter.Enumerate_TDWVDASmartContractEntry_Claims_nullable(value);
        }
        
        internal static T ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(TDWVDASmartContractEntry_EnvelopeContent? value)
        {
            return s_type_converter.ConvertFrom_TDWVDASmartContractEntry_EnvelopeContent_nullable(value);
        }
        internal static TDWVDASmartContractEntry_EnvelopeContent? ConvertTo_TDWVDASmartContractEntry_EnvelopeContent_nullable(T value)
        {
            return s_type_converter.ConvertTo_TDWVDASmartContractEntry_EnvelopeContent_nullable(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent_nullable()
        {
            return s_type_converter.GetConversionActionTo_TDWVDASmartContractEntry_EnvelopeContent_nullable();
        }
        internal static IEnumerable<TDWVDASmartContractEntry_EnvelopeContent?> Enumerate_TDWVDASmartContractEntry_EnvelopeContent_nullable(T value)
        {
            return s_type_converter.Enumerate_TDWVDASmartContractEntry_EnvelopeContent_nullable(value);
        }
        
        internal static T ConvertFrom_TRAEncryptedClaims_nullable(TRAEncryptedClaims? value)
        {
            return s_type_converter.ConvertFrom_TRAEncryptedClaims_nullable(value);
        }
        internal static TRAEncryptedClaims? ConvertTo_TRAEncryptedClaims_nullable(T value)
        {
            return s_type_converter.ConvertTo_TRAEncryptedClaims_nullable(value);
        }
        internal static TypeConversionAction GetConversionActionTo_TRAEncryptedClaims_nullable()
        {
            return s_type_converter.GetConversionActionTo_TRAEncryptedClaims_nullable();
        }
        internal static IEnumerable<TRAEncryptedClaims?> Enumerate_TRAEncryptedClaims_nullable(T value)
        {
            return s_type_converter.Enumerate_TRAEncryptedClaims_nullable(value);
        }
        
    }
}

#pragma warning restore 162,168,649,660,661,1522
